# Generated by GraphQLGen
#
# Generated at: 2023-02-08T17:19:03.151
abstract type OfficialGithubSchema end

using EnumX

    Core.@doc "The actor's type." @enumx(ActorType, begin
            TEAM
            USER
        end)

Core.@doc "Properties by which Audit Log connections can be ordered." @enumx(AuditLogOrderField, CREATED_AT)

Core.@doc "A (potentially binary) string encoded using base64." const Base64String = Any

Core.@doc "Represents an annotation's information level." @enumx(CheckAnnotationLevel, begin
            FAILURE
            NOTICE
            WARNING
        end)

Core.@doc "The possible states for a check suite or run conclusion." @enumx(CheckConclusionState, begin
            ACTION_REQUIRED
            CANCELLED
            FAILURE
            NEUTRAL
            SKIPPED
            STALE
            STARTUP_FAILURE
            SUCCESS
            TIMED_OUT
        end)

Core.@doc "The possible states of a check run in a status rollup." @enumx(CheckRunState, begin
            ACTION_REQUIRED
            CANCELLED
            COMPLETED
            FAILURE
            IN_PROGRESS
            NEUTRAL
            PENDING
            QUEUED
            SKIPPED
            STALE
            STARTUP_FAILURE
            SUCCESS
            TIMED_OUT
            WAITING
        end)

Core.@doc "The possible types of check runs." @enumx(CheckRunType, begin
            ALL
            LATEST
        end)

Core.@doc "The possible states for a check suite or run status." @enumx(CheckStatusState, begin
            COMPLETED
            IN_PROGRESS
            PENDING
            QUEUED
            REQUESTED
            WAITING
        end)

Core.@doc "Collaborators affiliation level with a subject." @enumx(CollaboratorAffiliation, begin
            ALL
            DIRECT
            OUTSIDE
        end)

Core.@doc "A comment author association with repository." @enumx(CommentAuthorAssociation, begin
            COLLABORATOR
            CONTRIBUTOR
            FIRST_TIMER
            FIRST_TIME_CONTRIBUTOR
            MANNEQUIN
            MEMBER
            NONE
            OWNER
        end)

Core.@doc "The possible errors that will prevent a user from updating a comment." @enumx(CommentCannotUpdateReason, begin
            ARCHIVED
            DENIED
            INSUFFICIENT_ACCESS
            LOCKED
            LOGIN_REQUIRED
            MAINTENANCE
            VERIFIED_EMAIL_REQUIRED
        end)

Core.@doc "Properties by which commit contribution connections can be ordered." @enumx(CommitContributionOrderField, begin
            COMMIT_COUNT
            OCCURRED_AT
        end)

Core.@doc "The status of a git comparison between two refs." @enumx(ComparisonStatus, begin
            AHEAD
            BEHIND
            DIVERGED
            IDENTICAL
        end)

Core.@doc "Varying levels of contributions from none to many." @enumx(ContributionLevel, begin
            FIRST_QUARTILE
            FOURTH_QUARTILE
            NONE
            SECOND_QUARTILE
            THIRD_QUARTILE
        end)

Core.@doc "An ISO-8601 encoded date string." const Date = Any

Core.@doc "An ISO-8601 encoded UTC date string." const DateTime = Any

Core.@doc "The possible base permissions for repositories." @enumx(DefaultRepositoryPermissionField, begin
            ADMIN
            NONE
            READ
            WRITE
        end)

Core.@doc "The possible ecosystems of a dependency graph package." @enumx(DependencyGraphEcosystem, begin
            ACTIONS
            COMPOSER
            GO
            MAVEN
            NPM
            NUGET
            PIP
            PUB
            RUBYGEMS
            RUST
        end)

Core.@doc "Properties by which deployment connections can be ordered." @enumx(DeploymentOrderField, CREATED_AT)

Core.@doc "The possible protection rule types." @enumx(DeploymentProtectionRuleType, begin
            REQUIRED_REVIEWERS
            WAIT_TIMER
        end)

Core.@doc "The possible states for a deployment review." @enumx(DeploymentReviewState, begin
            APPROVED
            REJECTED
        end)

Core.@doc "The possible states in which a deployment can be." @enumx(DeploymentState, begin
            ABANDONED
            ACTIVE
            DESTROYED
            ERROR
            FAILURE
            INACTIVE
            IN_PROGRESS
            PENDING
            QUEUED
            WAITING
        end)

Core.@doc "The possible states for a deployment status." @enumx(DeploymentStatusState, begin
            ERROR
            FAILURE
            INACTIVE
            IN_PROGRESS
            PENDING
            QUEUED
            SUCCESS
            WAITING
        end)

Core.@doc "The possible sides of a diff." @enumx(DiffSide, begin
            LEFT
            RIGHT
        end)

Core.@doc "Properties by which discussion connections can be ordered." @enumx(DiscussionOrderField, begin
            CREATED_AT
            UPDATED_AT
        end)

Core.@doc "Properties by which discussion poll option connections can be ordered." @enumx(DiscussionPollOptionOrderField, begin
            AUTHORED_ORDER
            VOTE_COUNT
        end)

Core.@doc "The possible reasons that a Dependabot alert was dismissed." @enumx(DismissReason, begin
            FIX_STARTED
            INACCURATE
            NOT_USED
            NO_BANDWIDTH
            TOLERABLE_RISK
        end)

Core.@doc "Properties by which enterprise administrator invitation connections can be ordered." @enumx(EnterpriseAdministratorInvitationOrderField, CREATED_AT)

Core.@doc "The possible administrator roles in an enterprise account." @enumx(EnterpriseAdministratorRole, begin
            BILLING_MANAGER
            OWNER
        end)

Core.@doc "The possible values for the enterprise allow private repository forking policy value." @enumx(EnterpriseAllowPrivateRepositoryForkingPolicyValue, begin
            ENTERPRISE_ORGANIZATIONS
            ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS
            EVERYWHERE
            SAME_ORGANIZATION
            SAME_ORGANIZATION_USER_ACCOUNTS
            USER_ACCOUNTS
        end)

Core.@doc "The possible values for the enterprise base repository permission setting." @enumx(EnterpriseDefaultRepositoryPermissionSettingValue, begin
            ADMIN
            NONE
            NO_POLICY
            READ
            WRITE
        end)

Core.@doc "The possible values for an enabled/disabled enterprise setting." @enumx(EnterpriseEnabledDisabledSettingValue, begin
            DISABLED
            ENABLED
            NO_POLICY
        end)

Core.@doc "The possible values for an enabled/no policy enterprise setting." @enumx(EnterpriseEnabledSettingValue, begin
            ENABLED
            NO_POLICY
        end)

Core.@doc "Properties by which enterprise member connections can be ordered." @enumx(EnterpriseMemberOrderField, begin
            CREATED_AT
            LOGIN
        end)

Core.@doc "The possible values for the enterprise members can create repositories setting." @enumx(EnterpriseMembersCanCreateRepositoriesSettingValue, begin
            ALL
            DISABLED
            NO_POLICY
            PRIVATE
            PUBLIC
        end)

Core.@doc "The possible values for the members can make purchases setting." @enumx(EnterpriseMembersCanMakePurchasesSettingValue, begin
            DISABLED
            ENABLED
        end)

Core.@doc "Properties by which Enterprise Server installation connections can be ordered." @enumx(EnterpriseServerInstallationOrderField, begin
            CREATED_AT
            CUSTOMER_NAME
            HOST_NAME
        end)

Core.@doc "Properties by which Enterprise Server user account email connections can be ordered." @enumx(EnterpriseServerUserAccountEmailOrderField, EMAIL)

Core.@doc "Properties by which Enterprise Server user account connections can be ordered." @enumx(EnterpriseServerUserAccountOrderField, begin
            LOGIN
            REMOTE_CREATED_AT
        end)

Core.@doc "Properties by which Enterprise Server user accounts upload connections can be ordered." @enumx(EnterpriseServerUserAccountsUploadOrderField, CREATED_AT)

Core.@doc "Synchronization state of the Enterprise Server user accounts upload" @enumx(EnterpriseServerUserAccountsUploadSyncState, begin
            FAILURE
            PENDING
            SUCCESS
        end)

Core.@doc "The possible roles for enterprise membership." @enumx(EnterpriseUserAccountMembershipRole, begin
            MEMBER
            OWNER
            UNAFFILIATED
        end)

Core.@doc "The possible GitHub Enterprise deployments where this user can exist." @enumx(EnterpriseUserDeployment, begin
            CLOUD
            SERVER
        end)

Core.@doc "The possible viewed states of a file ." @enumx(FileViewedState, begin
            DISMISSED
            UNVIEWED
            VIEWED
        end)

Core.@doc "The possible funding platforms for repository funding links." @enumx(FundingPlatform, begin
            COMMUNITY_BRIDGE
            CUSTOM
            GITHUB
            ISSUEHUNT
            KO_FI
            LFX_CROWDFUNDING
            LIBERAPAY
            OPEN_COLLECTIVE
            OTECHIE
            PATREON
            TIDELIFT
        end)

Core.@doc "Properties by which gist connections can be ordered." @enumx(GistOrderField, begin
            CREATED_AT
            PUSHED_AT
            UPDATED_AT
        end)

Core.@doc "The privacy of a Gist" @enumx(GistPrivacy, begin
            ALL
            PUBLIC
            SECRET
        end)

Core.@doc "A Git object ID." const GitObjectID = Any

Core.@doc "A fully qualified reference name (e.g. `refs/heads/master`)." const GitRefname = Any

Core.@doc "Git SSH string" const GitSSHRemote = Any

Core.@doc "The state of a Git signature." @enumx(GitSignatureState, begin
            BAD_CERT
            BAD_EMAIL
            EXPIRED_KEY
            GPGVERIFY_ERROR
            GPGVERIFY_UNAVAILABLE
            INVALID
            MALFORMED_SIG
            NOT_SIGNING_KEY
            NO_USER
            OCSP_ERROR
            OCSP_PENDING
            OCSP_REVOKED
            UNKNOWN_KEY
            UNKNOWN_SIG_TYPE
            UNSIGNED
            UNVERIFIED_EMAIL
            VALID
        end)

Core.@doc "An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC." const GitTimestamp = Any

Core.@doc "A string containing HTML code." const HTML = Any

Core.@doc "The possible states in which authentication can be configured with an identity provider." @enumx(IdentityProviderConfigurationState, begin
            CONFIGURED
            ENFORCED
            UNCONFIGURED
        end)

Core.@doc "The possible values for the IP allow list enabled setting." @enumx(IpAllowListEnabledSettingValue, begin
            DISABLED
            ENABLED
        end)

Core.@doc "Properties by which IP allow list entry connections can be ordered." @enumx(IpAllowListEntryOrderField, begin
            ALLOW_LIST_VALUE
            CREATED_AT
        end)

Core.@doc "The possible values for the IP allow list configuration for installed GitHub Apps setting." @enumx(IpAllowListForInstalledAppsEnabledSettingValue, begin
            DISABLED
            ENABLED
        end)

Core.@doc "The possible state reasons of a closed issue." @enumx(IssueClosedStateReason, begin
            COMPLETED
            NOT_PLANNED
        end)

Core.@doc "Properties by which issue comment connections can be ordered." @enumx(IssueCommentOrderField, UPDATED_AT)

Core.@doc "Properties by which issue connections can be ordered." @enumx(IssueOrderField, begin
            COMMENTS
            CREATED_AT
            UPDATED_AT
        end)

Core.@doc "The possible states of an issue." @enumx(IssueState, begin
            CLOSED
            OPEN
        end)

Core.@doc "The possible state reasons of an issue." @enumx(IssueStateReason, begin
            COMPLETED
            NOT_PLANNED
            REOPENED
        end)

Core.@doc "The possible item types found in a timeline." @enumx(IssueTimelineItemsItemType, begin
            ADDED_TO_PROJECT_EVENT
            ASSIGNED_EVENT
            CLOSED_EVENT
            COMMENT_DELETED_EVENT
            CONNECTED_EVENT
            CONVERTED_NOTE_TO_ISSUE_EVENT
            CONVERTED_TO_DISCUSSION_EVENT
            CROSS_REFERENCED_EVENT
            DEMILESTONED_EVENT
            DISCONNECTED_EVENT
            ISSUE_COMMENT
            LABELED_EVENT
            LOCKED_EVENT
            MARKED_AS_DUPLICATE_EVENT
            MENTIONED_EVENT
            MILESTONED_EVENT
            MOVED_COLUMNS_IN_PROJECT_EVENT
            PINNED_EVENT
            REFERENCED_EVENT
            REMOVED_FROM_PROJECT_EVENT
            RENAMED_TITLE_EVENT
            REOPENED_EVENT
            SUBSCRIBED_EVENT
            TRANSFERRED_EVENT
            UNASSIGNED_EVENT
            UNLABELED_EVENT
            UNLOCKED_EVENT
            UNMARKED_AS_DUPLICATE_EVENT
            UNPINNED_EVENT
            UNSUBSCRIBED_EVENT
            USER_BLOCKED_EVENT
        end)

Core.@doc "Properties by which label connections can be ordered." @enumx(LabelOrderField, begin
            CREATED_AT
            NAME
        end)

Core.@doc "Properties by which language connections can be ordered." @enumx(LanguageOrderField, SIZE)

Core.@doc "The possible reasons that an issue or pull request was locked." @enumx(LockReason, begin
            OFF_TOPIC
            RESOLVED
            SPAM
            TOO_HEATED
        end)

Core.@doc "The possible default commit messages for merges." @enumx(MergeCommitMessage, begin
            BLANK
            PR_BODY
            PR_TITLE
        end)

Core.@doc "The possible default commit titles for merges." @enumx(MergeCommitTitle, begin
            MERGE_MESSAGE
            PR_TITLE
        end)

Core.@doc "Detailed status information about a pull request merge." @enumx(MergeStateStatus, begin
            BEHIND
            BLOCKED
            CLEAN
            DIRTY
            DRAFT
            HAS_HOOKS
            UNKNOWN
            UNSTABLE
        end)

Core.@doc "Whether or not a PullRequest can be merged." @enumx(MergeableState, begin
            CONFLICTING
            MERGEABLE
            UNKNOWN
        end)

Core.@doc "Represents the different Octoshift migration sources." @enumx(MigrationSourceType, begin
            AZURE_DEVOPS
            BITBUCKET_SERVER
            GITHUB_ARCHIVE
        end)

Core.@doc "The Octoshift migration state." @enumx(MigrationState, begin
            FAILED
            FAILED_VALIDATION
            IN_PROGRESS
            NOT_STARTED
            PENDING_VALIDATION
            QUEUED
            SUCCEEDED
        end)

Core.@doc "Properties by which milestone connections can be ordered." @enumx(MilestoneOrderField, begin
            CREATED_AT
            DUE_DATE
            NUMBER
            UPDATED_AT
        end)

Core.@doc "The possible states of a milestone." @enumx(MilestoneState, begin
            CLOSED
            OPEN
        end)

Core.@doc "The possible values for the notification restriction setting." @enumx(NotificationRestrictionSettingValue, begin
            DISABLED
            ENABLED
        end)

Core.@doc "The OIDC identity provider type" @enumx(OIDCProviderType, AAD)

Core.@doc "The state of an OAuth Application when it was created." @enumx(OauthApplicationCreateAuditEntryState, begin
            ACTIVE
            PENDING_DELETION
            SUSPENDED
        end)

Core.@doc "The corresponding operation type for the action" @enumx(OperationType, begin
            ACCESS
            AUTHENTICATION
            CREATE
            MODIFY
            REMOVE
            RESTORE
            TRANSFER
        end)

Core.@doc "Possible directions in which to order a list of items when provided an `orderBy` argument." @enumx(OrderDirection, begin
            ASC
            DESC
        end)

Core.@doc "The permissions available to members on an Organization." @enumx(OrgAddMemberAuditEntryPermission, begin
            ADMIN
            READ
        end)

Core.@doc "The billing plans available for organizations." @enumx(OrgCreateAuditEntryBillingPlan, begin
            BUSINESS
            BUSINESS_PLUS
            FREE
            TIERED_PER_SEAT
            UNLIMITED
        end)

Core.@doc "Properties by which enterprise owners can be ordered." @enumx(OrgEnterpriseOwnerOrderField, LOGIN)

Core.@doc "The reason a billing manager was removed from an Organization." @enumx(OrgRemoveBillingManagerAuditEntryReason, begin
            SAML_EXTERNAL_IDENTITY_MISSING
            SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
            TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
        end)

Core.@doc "The type of membership a user has with an Organization." @enumx(OrgRemoveMemberAuditEntryMembershipType, begin
            ADMIN
            BILLING_MANAGER
            DIRECT_MEMBER
            OUTSIDE_COLLABORATOR
            SUSPENDED
            UNAFFILIATED
        end)

Core.@doc "The reason a member was removed from an Organization." @enumx(OrgRemoveMemberAuditEntryReason, begin
            SAML_EXTERNAL_IDENTITY_MISSING
            SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
            TWO_FACTOR_ACCOUNT_RECOVERY
            TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
            USER_ACCOUNT_DELETED
        end)

Core.@doc "The type of membership a user has with an Organization." @enumx(OrgRemoveOutsideCollaboratorAuditEntryMembershipType, begin
            BILLING_MANAGER
            OUTSIDE_COLLABORATOR
            UNAFFILIATED
        end)

Core.@doc "The reason an outside collaborator was removed from an Organization." @enumx(OrgRemoveOutsideCollaboratorAuditEntryReason, begin
            SAML_EXTERNAL_IDENTITY_MISSING
            TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
        end)

Core.@doc "The default permission a repository can have in an Organization." @enumx(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission, begin
            ADMIN
            NONE
            READ
            WRITE
        end)

Core.@doc "The permissions available to members on an Organization." @enumx(OrgUpdateMemberAuditEntryPermission, begin
            ADMIN
            READ
        end)

Core.@doc "The permissions available for repository creation on an Organization." @enumx(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility, begin
            ALL
            INTERNAL
            NONE
            PRIVATE
            PRIVATE_INTERNAL
            PUBLIC
            PUBLIC_INTERNAL
            PUBLIC_PRIVATE
        end)

Core.@doc "The possible organization invitation roles." @enumx(OrganizationInvitationRole, begin
            ADMIN
            BILLING_MANAGER
            DIRECT_MEMBER
            REINSTATE
        end)

Core.@doc "The possible organization invitation types." @enumx(OrganizationInvitationType, begin
            EMAIL
            USER
        end)

Core.@doc "The possible roles within an organization for its members." @enumx(OrganizationMemberRole, begin
            ADMIN
            MEMBER
        end)

Core.@doc "The possible values for the members can create repositories setting on an organization." @enumx(OrganizationMembersCanCreateRepositoriesSettingValue, begin
            ALL
            DISABLED
            INTERNAL
            PRIVATE
        end)

Core.@doc "Properties by which organization connections can be ordered." @enumx(OrganizationOrderField, begin
            CREATED_AT
            LOGIN
        end)

Core.@doc "Properties by which package file connections can be ordered." @enumx(PackageFileOrderField, CREATED_AT)

Core.@doc "Properties by which package connections can be ordered." @enumx(PackageOrderField, CREATED_AT)

Core.@doc "The possible types of a package." @enumx(PackageType, begin
            DEBIAN
            DOCKER
            MAVEN
            NPM
            NUGET
            PYPI
            RUBYGEMS
        end)

Core.@doc "Properties by which package version connections can be ordered." @enumx(PackageVersionOrderField, CREATED_AT)

Core.@doc "The possible types of patch statuses." @enumx(PatchStatus, begin
            ADDED
            CHANGED
            COPIED
            DELETED
            MODIFIED
            RENAMED
        end)

Core.@doc "Represents items that can be pinned to a profile page or dashboard." @enumx(PinnableItemType, begin
            GIST
            ISSUE
            ORGANIZATION
            PROJECT
            PULL_REQUEST
            REPOSITORY
            TEAM
            USER
        end)

Core.@doc "Preconfigured gradients that may be used to style discussions pinned within a repository." @enumx(PinnedDiscussionGradient, begin
            BLUE_MINT
            BLUE_PURPLE
            PINK_BLUE
            PURPLE_CORAL
            RED_ORANGE
        end)

Core.@doc "Preconfigured background patterns that may be used to style discussions pinned within a repository." @enumx(PinnedDiscussionPattern, begin
            CHEVRON_UP
            DOT
            DOT_FILL
            HEART_FILL
            PLUS
            ZAP
        end)

Core.@doc "An ISO-8601 encoded UTC date string with millisecond precision." const PreciseDateTime = Any

Core.@doc "The possible archived states of a project card." @enumx(ProjectCardArchivedState, begin
            ARCHIVED
            NOT_ARCHIVED
        end)

Core.@doc "Various content states of a ProjectCard" @enumx(ProjectCardState, begin
            CONTENT_ONLY
            NOTE_ONLY
            REDACTED
        end)

Core.@doc "The semantic purpose of the column - todo, in progress, or done." @enumx(ProjectColumnPurpose, begin
            DONE
            IN_PROGRESS
            TODO
        end)

Core.@doc "The type of a project item." @enumx(ProjectItemType, begin
            DRAFT_ISSUE
            ISSUE
            PULL_REQUEST
            REDACTED
        end)

Core.@doc "The type of a project next field." @enumx(ProjectNextFieldType, begin
            ASSIGNEES
            DATE
            ITERATION
            LABELS
            LINKED_PULL_REQUESTS
            MILESTONE
            NUMBER
            REPOSITORY
            REVIEWERS
            SINGLE_SELECT
            TEXT
            TITLE
            TRACKED_BY
            TRACKS
        end)

Core.@doc "Properties by which the return project can be ordered." @enumx(ProjectNextOrderField, begin
            CREATED_AT
            NUMBER
            TITLE
            UPDATED_AT
        end)

Core.@doc "Properties by which project connections can be ordered." @enumx(ProjectOrderField, begin
            CREATED_AT
            NAME
            UPDATED_AT
        end)

Core.@doc "State of the project; either 'open' or 'closed'" @enumx(ProjectState, begin
            CLOSED
            OPEN
        end)

Core.@doc "GitHub-provided templates for Projects" @enumx(ProjectTemplate, begin
            AUTOMATED_KANBAN_V2
            AUTOMATED_REVIEWS_KANBAN
            BASIC_KANBAN
            BUG_TRIAGE
        end)

Core.@doc "Properties by which project v2 field connections can be ordered." @enumx(ProjectV2FieldOrderField, begin
            CREATED_AT
            NAME
            POSITION
        end)

Core.@doc "The type of a project field." @enumx(ProjectV2FieldType, begin
            ASSIGNEES
            DATE
            ITERATION
            LABELS
            LINKED_PULL_REQUESTS
            MILESTONE
            NUMBER
            REPOSITORY
            REVIEWERS
            SINGLE_SELECT
            TEXT
            TITLE
            TRACKED_BY
            TRACKS
        end)

Core.@doc "Properties by which project v2 item field value connections can be ordered." @enumx(ProjectV2ItemFieldValueOrderField, POSITION)

Core.@doc "Properties by which project v2 item connections can be ordered." @enumx(ProjectV2ItemOrderField, POSITION)

Core.@doc "The type of a project item." @enumx(ProjectV2ItemType, begin
            DRAFT_ISSUE
            ISSUE
            PULL_REQUEST
            REDACTED
        end)

Core.@doc "Properties by which projects can be ordered." @enumx(ProjectV2OrderField, begin
            CREATED_AT
            NUMBER
            TITLE
            UPDATED_AT
        end)

Core.@doc "The possible states of a project v2." @enumx(ProjectV2State, begin
            CLOSED
            OPEN
        end)

Core.@doc "The layout of a project v2 view." @enumx(ProjectV2ViewLayout, begin
            BOARD_LAYOUT
            TABLE_LAYOUT
        end)

Core.@doc "Properties by which project v2 view connections can be ordered." @enumx(ProjectV2ViewOrderField, begin
            CREATED_AT
            NAME
            POSITION
        end)

Core.@doc "The layout of a project view." @enumx(ProjectViewLayout, begin
            BOARD_LAYOUT
            TABLE_LAYOUT
        end)

Core.@doc "Represents available types of methods to use when merging a pull request." @enumx(PullRequestMergeMethod, begin
            MERGE
            REBASE
            SQUASH
        end)

Core.@doc "Properties by which pull_requests connections can be ordered." @enumx(PullRequestOrderField, begin
            CREATED_AT
            UPDATED_AT
        end)

Core.@doc "The possible states of a pull request review comment." @enumx(PullRequestReviewCommentState, begin
            PENDING
            SUBMITTED
        end)

Core.@doc "The review status of a pull request." @enumx(PullRequestReviewDecision, begin
            APPROVED
            CHANGES_REQUESTED
            REVIEW_REQUIRED
        end)

Core.@doc "The possible events to perform on a pull request review." @enumx(PullRequestReviewEvent, begin
            APPROVE
            COMMENT
            DISMISS
            REQUEST_CHANGES
        end)

Core.@doc "The possible states of a pull request review." @enumx(PullRequestReviewState, begin
            APPROVED
            CHANGES_REQUESTED
            COMMENTED
            DISMISSED
            PENDING
        end)

Core.@doc "The possible states of a pull request." @enumx(PullRequestState, begin
            CLOSED
            MERGED
            OPEN
        end)

Core.@doc "The possible item types found in a timeline." @enumx(PullRequestTimelineItemsItemType, begin
            ADDED_TO_MERGE_QUEUE_EVENT
            ADDED_TO_PROJECT_EVENT
            ASSIGNED_EVENT
            AUTOMATIC_BASE_CHANGE_FAILED_EVENT
            AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT
            AUTO_MERGE_DISABLED_EVENT
            AUTO_MERGE_ENABLED_EVENT
            AUTO_REBASE_ENABLED_EVENT
            AUTO_SQUASH_ENABLED_EVENT
            BASE_REF_CHANGED_EVENT
            BASE_REF_DELETED_EVENT
            BASE_REF_FORCE_PUSHED_EVENT
            CLOSED_EVENT
            COMMENT_DELETED_EVENT
            CONNECTED_EVENT
            CONVERTED_NOTE_TO_ISSUE_EVENT
            CONVERTED_TO_DISCUSSION_EVENT
            CONVERT_TO_DRAFT_EVENT
            CROSS_REFERENCED_EVENT
            DEMILESTONED_EVENT
            DEPLOYED_EVENT
            DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
            DISCONNECTED_EVENT
            HEAD_REF_DELETED_EVENT
            HEAD_REF_FORCE_PUSHED_EVENT
            HEAD_REF_RESTORED_EVENT
            ISSUE_COMMENT
            LABELED_EVENT
            LOCKED_EVENT
            MARKED_AS_DUPLICATE_EVENT
            MENTIONED_EVENT
            MERGED_EVENT
            MILESTONED_EVENT
            MOVED_COLUMNS_IN_PROJECT_EVENT
            PINNED_EVENT
            PULL_REQUEST_COMMIT
            PULL_REQUEST_COMMIT_COMMENT_THREAD
            PULL_REQUEST_REVIEW
            PULL_REQUEST_REVIEW_THREAD
            PULL_REQUEST_REVISION_MARKER
            READY_FOR_REVIEW_EVENT
            REFERENCED_EVENT
            REMOVED_FROM_MERGE_QUEUE_EVENT
            REMOVED_FROM_PROJECT_EVENT
            RENAMED_TITLE_EVENT
            REOPENED_EVENT
            REVIEW_DISMISSED_EVENT
            REVIEW_REQUESTED_EVENT
            REVIEW_REQUEST_REMOVED_EVENT
            SUBSCRIBED_EVENT
            TRANSFERRED_EVENT
            UNASSIGNED_EVENT
            UNLABELED_EVENT
            UNLOCKED_EVENT
            UNMARKED_AS_DUPLICATE_EVENT
            UNPINNED_EVENT
            UNSUBSCRIBED_EVENT
            USER_BLOCKED_EVENT
        end)

Core.@doc "The possible target states when updating a pull request." @enumx(PullRequestUpdateState, begin
            CLOSED
            OPEN
        end)

Core.@doc "Emojis that can be attached to Issues, Pull Requests and Comments." @enumx(ReactionContent, begin
            CONFUSED
            EYES
            HEART
            HOORAY
            LAUGH
            ROCKET
            THUMBS_DOWN
            THUMBS_UP
        end)

Core.@doc "A list of fields that reactions can be ordered by." @enumx(ReactionOrderField, CREATED_AT)

Core.@doc "Properties by which ref connections can be ordered." @enumx(RefOrderField, begin
            ALPHABETICAL
            TAG_COMMIT_DATE
        end)

Core.@doc "Properties by which release connections can be ordered." @enumx(ReleaseOrderField, begin
            CREATED_AT
            NAME
        end)

Core.@doc "The privacy of a repository" @enumx(RepoAccessAuditEntryVisibility, begin
            INTERNAL
            PRIVATE
            PUBLIC
        end)

Core.@doc "The privacy of a repository" @enumx(RepoAddMemberAuditEntryVisibility, begin
            INTERNAL
            PRIVATE
            PUBLIC
        end)

Core.@doc "The privacy of a repository" @enumx(RepoArchivedAuditEntryVisibility, begin
            INTERNAL
            PRIVATE
            PUBLIC
        end)

Core.@doc "The merge options available for pull requests to this repository." @enumx(RepoChangeMergeSettingAuditEntryMergeType, begin
            MERGE
            REBASE
            SQUASH
        end)

Core.@doc "The privacy of a repository" @enumx(RepoCreateAuditEntryVisibility, begin
            INTERNAL
            PRIVATE
            PUBLIC
        end)

Core.@doc "The privacy of a repository" @enumx(RepoDestroyAuditEntryVisibility, begin
            INTERNAL
            PRIVATE
            PUBLIC
        end)

Core.@doc "The privacy of a repository" @enumx(RepoRemoveMemberAuditEntryVisibility, begin
            INTERNAL
            PRIVATE
            PUBLIC
        end)

Core.@doc "The reasons a piece of content can be reported or minimized." @enumx(ReportedContentClassifiers, begin
            ABUSE
            DUPLICATE
            OFF_TOPIC
            OUTDATED
            RESOLVED
            SPAM
        end)

Core.@doc "The affiliation of a user to a repository" @enumx(RepositoryAffiliation, begin
            COLLABORATOR
            ORGANIZATION_MEMBER
            OWNER
        end)

Core.@doc "The reason a repository is listed as 'contributed'." @enumx(RepositoryContributionType, begin
            COMMIT
            ISSUE
            PULL_REQUEST
            PULL_REQUEST_REVIEW
            REPOSITORY
        end)

Core.@doc "A repository interaction limit." @enumx(RepositoryInteractionLimit, begin
            COLLABORATORS_ONLY
            CONTRIBUTORS_ONLY
            EXISTING_USERS
            NO_LIMIT
        end)

Core.@doc "The length for a repository interaction limit to be enabled for." @enumx(RepositoryInteractionLimitExpiry, begin
            ONE_DAY
            ONE_MONTH
            ONE_WEEK
            SIX_MONTHS
            THREE_DAYS
        end)

Core.@doc "Indicates where an interaction limit is configured." @enumx(RepositoryInteractionLimitOrigin, begin
            ORGANIZATION
            REPOSITORY
            USER
        end)

Core.@doc "Properties by which repository invitation connections can be ordered." @enumx(RepositoryInvitationOrderField, CREATED_AT)

Core.@doc "The possible reasons a given repository could be in a locked state." @enumx(RepositoryLockReason, begin
            BILLING
            MIGRATING
            MOVING
            RENAME
            TRADE_RESTRICTION
        end)

Core.@doc "Possible directions in which to order a list of repository migrations when provided an `orderBy` argument." @enumx(RepositoryMigrationOrderDirection, begin
            ASC
            DESC
        end)

Core.@doc "Properties by which repository migrations can be ordered." @enumx(RepositoryMigrationOrderField, CREATED_AT)

Core.@doc "Properties by which repository connections can be ordered." @enumx(RepositoryOrderField, begin
            CREATED_AT
            NAME
            PUSHED_AT
            STARGAZERS
            UPDATED_AT
        end)

Core.@doc "The access level to a repository" @enumx(RepositoryPermission, begin
            ADMIN
            MAINTAIN
            READ
            TRIAGE
            WRITE
        end)

Core.@doc "The privacy of a repository" @enumx(RepositoryPrivacy, begin
            PRIVATE
            PUBLIC
        end)

Core.@doc "The repository's visibility level." @enumx(RepositoryVisibility, begin
            INTERNAL
            PRIVATE
            PUBLIC
        end)

Core.@doc "The possible scopes of an alert's dependency." @enumx(RepositoryVulnerabilityAlertDependencyScope, begin
            DEVELOPMENT
            RUNTIME
        end)

Core.@doc "The possible states of an alert" @enumx(RepositoryVulnerabilityAlertState, begin
            DISMISSED
            FIXED
            OPEN
        end)

Core.@doc "The possible states that can be requested when creating a check run." @enumx(RequestableCheckStatusState, begin
            COMPLETED
            IN_PROGRESS
            PENDING
            QUEUED
            WAITING
        end)

Core.@doc "Possible roles a user may have in relation to an organization." @enumx(RoleInOrganization, begin
            DIRECT_MEMBER
            OWNER
            UNAFFILIATED
        end)

Core.@doc "The possible digest algorithms used to sign SAML requests for an identity provider." @enumx(SamlDigestAlgorithm, begin
            SHA1
            SHA256
            SHA384
            SHA512
        end)

Core.@doc "The possible signature algorithms used to sign SAML requests for a Identity Provider." @enumx(SamlSignatureAlgorithm, begin
            RSA_SHA1
            RSA_SHA256
            RSA_SHA384
            RSA_SHA512
        end)

Core.@doc "Properties by which saved reply connections can be ordered." @enumx(SavedReplyOrderField, UPDATED_AT)

Core.@doc "Represents the individual results of a search." @enumx(SearchType, begin
            DISCUSSION
            ISSUE
            REPOSITORY
            USER
        end)

Core.@doc "Classification of the advisory." @enumx(SecurityAdvisoryClassification, begin
            GENERAL
            MALWARE
        end)

Core.@doc "The possible ecosystems of a security vulnerability's package." @enumx(SecurityAdvisoryEcosystem, begin
            ACTIONS
            COMPOSER
            ERLANG
            GO
            MAVEN
            NPM
            NUGET
            PIP
            PUB
            RUBYGEMS
            RUST
        end)

Core.@doc "Identifier formats available for advisories." @enumx(SecurityAdvisoryIdentifierType, begin
            CVE
            GHSA
        end)

Core.@doc "Properties by which security advisory connections can be ordered." @enumx(SecurityAdvisoryOrderField, begin
            PUBLISHED_AT
            UPDATED_AT
        end)

Core.@doc "Severity of the vulnerability." @enumx(SecurityAdvisorySeverity, begin
            CRITICAL
            HIGH
            LOW
            MODERATE
        end)

Core.@doc "Properties by which security vulnerability connections can be ordered." @enumx(SecurityVulnerabilityOrderField, UPDATED_AT)

Core.@doc "Properties by which sponsor connections can be ordered." @enumx(SponsorOrderField, begin
            LOGIN
            RELEVANCE
        end)

Core.@doc "Properties by which sponsorable connections can be ordered." @enumx(SponsorableOrderField, LOGIN)

Core.@doc "The possible actions that GitHub Sponsors activities can represent." @enumx(SponsorsActivityAction, begin
            CANCELLED_SPONSORSHIP
            NEW_SPONSORSHIP
            PENDING_CHANGE
            REFUND
            SPONSOR_MATCH_DISABLED
            TIER_CHANGE
        end)

Core.@doc "Properties by which GitHub Sponsors activity connections can be ordered." @enumx(SponsorsActivityOrderField, TIMESTAMP)

Core.@doc "The possible time periods for which Sponsors activities can be requested." @enumx(SponsorsActivityPeriod, begin
            ALL
            DAY
            MONTH
            WEEK
        end)

Core.@doc "The different kinds of goals a GitHub Sponsors member can have." @enumx(SponsorsGoalKind, begin
            MONTHLY_SPONSORSHIP_AMOUNT
            TOTAL_SPONSORS_COUNT
        end)

Core.@doc "The different kinds of records that can be featured on a GitHub Sponsors profile page." @enumx(SponsorsListingFeaturedItemFeatureableType, begin
            REPOSITORY
            USER
        end)

Core.@doc "Properties by which Sponsors tiers connections can be ordered." @enumx(SponsorsTierOrderField, begin
            CREATED_AT
            MONTHLY_PRICE_IN_CENTS
        end)

Core.@doc "Properties by which sponsorship update connections can be ordered." @enumx(SponsorshipNewsletterOrderField, CREATED_AT)

Core.@doc "Properties by which sponsorship connections can be ordered." @enumx(SponsorshipOrderField, CREATED_AT)

Core.@doc "The privacy of a sponsorship" @enumx(SponsorshipPrivacy, begin
            PRIVATE
            PUBLIC
        end)

Core.@doc "The possible default commit messages for squash merges." @enumx(SquashMergeCommitMessage, begin
            BLANK
            COMMIT_MESSAGES
            PR_BODY
        end)

Core.@doc "The possible default commit titles for squash merges." @enumx(SquashMergeCommitTitle, begin
            COMMIT_OR_PR_TITLE
            PR_TITLE
        end)

Core.@doc "Properties by which star connections can be ordered." @enumx(StarOrderField, STARRED_AT)

Core.@doc "The possible commit status states." @enumx(StatusState, begin
            ERROR
            EXPECTED
            FAILURE
            PENDING
            SUCCESS
        end)

Core.@doc "The possible states of a subscription." @enumx(SubscriptionState, begin
            IGNORED
            SUBSCRIBED
            UNSUBSCRIBED
        end)

Core.@doc "Properties by which team discussion comment connections can be ordered." @enumx(TeamDiscussionCommentOrderField, NUMBER)

Core.@doc "Properties by which team discussion connections can be ordered." @enumx(TeamDiscussionOrderField, CREATED_AT)

Core.@doc "Properties by which team member connections can be ordered." @enumx(TeamMemberOrderField, begin
            CREATED_AT
            LOGIN
        end)

Core.@doc "The possible team member roles; either 'maintainer' or 'member'." @enumx(TeamMemberRole, begin
            MAINTAINER
            MEMBER
        end)

Core.@doc "Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL." @enumx(TeamMembershipType, begin
            ALL
            CHILD_TEAM
            IMMEDIATE
        end)

Core.@doc "Properties by which team connections can be ordered." @enumx(TeamOrderField, NAME)

Core.@doc "The possible team privacy values." @enumx(TeamPrivacy, begin
            SECRET
            VISIBLE
        end)

Core.@doc "Properties by which team repository connections can be ordered." @enumx(TeamRepositoryOrderField, begin
            CREATED_AT
            NAME
            PERMISSION
            PUSHED_AT
            STARGAZERS
            UPDATED_AT
        end)

Core.@doc "The possible team review assignment algorithms" @enumx(TeamReviewAssignmentAlgorithm, begin
            LOAD_BALANCE
            ROUND_ROBIN
        end)

Core.@doc "The role of a user on a team." @enumx(TeamRole, begin
            ADMIN
            MEMBER
        end)

Core.@doc "Reason that the suggested topic is declined." @enumx(TopicSuggestionDeclineReason, begin
            NOT_RELEVANT
            PERSONAL_PREFERENCE
            TOO_GENERAL
            TOO_SPECIFIC
        end)

Core.@doc "The possible states of a tracked issue." @enumx(TrackedIssueStates, begin
            CLOSED
            OPEN
        end)

Core.@doc "An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string." const URI = Any

Core.@doc "The possible durations that a user can be blocked for." @enumx(UserBlockDuration, begin
            ONE_DAY
            ONE_MONTH
            ONE_WEEK
            PERMANENT
            THREE_DAYS
        end)

Core.@doc "Properties by which user status connections can be ordered." @enumx(UserStatusOrderField, UPDATED_AT)

Core.@doc "Properties by which verifiable domain connections can be ordered." @enumx(VerifiableDomainOrderField, begin
            CREATED_AT
            DOMAIN
        end)

Core.@doc "Properties by which workflow run connections can be ordered." @enumx(WorkflowRunOrderField, CREATED_AT)

Core.@doc "A valid x509 certificate string" const X509Certificate = Any

"""
Information about pagination in a connection.
"""
mutable struct PageInfo <: OfficialGithubSchema
    "\n  When paginating forwards, the cursor to continue.\n  "
    endCursor::Union{String, Missing, Nothing}
    "\n  When paginating forwards, are there more items?\n  "
    hasNextPage::Bool
    "\n  When paginating backwards, are there more items?\n  "
    hasPreviousPage::Bool
    "\n  When paginating backwards, the cursor to continue.\n  "
    startCursor::Union{String, Missing, Nothing}
end
function PageInfo(; endCursor = nothing, hasNextPage, hasPreviousPage, startCursor = nothing)
    PageInfo(endCursor, hasNextPage, hasPreviousPage, startCursor)
end

"""
Represents a user.
"""
mutable struct UserEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
end
function UserEdge(; cursor, node = nothing)
    UserEdge(cursor, node)
end
function Base.getproperty(t::UserEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::UserEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for User.
"""
mutable struct FollowingConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{UserEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function FollowingConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    FollowingConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::FollowingConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::FollowingConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Iteration field iteration settings for a project.
"""
mutable struct ProjectV2IterationFieldIteration <: OfficialGithubSchema
    "\n  The iteration's duration in days\n  "
    duration::Int
    "\n  The iteration's ID.\n  "
    id::String
    "\n  The iteration's start date\n  "
    startDate::Date
    "\n  The iteration's title.\n  "
    title::String
    "\n  The iteration's html title.\n  "
    titleHTML::String
end
function ProjectV2IterationFieldIteration(; duration, id, startDate, title, titleHTML)
    ProjectV2IterationFieldIteration(duration, id, startDate, title, titleHTML)
end

"""
Iteration field configuration for a project.
"""
mutable struct ProjectV2IterationFieldConfiguration <: OfficialGithubSchema
    "\n  The iteration's completed iterations\n  "
    completedIterations::Vector{ProjectV2IterationFieldIteration}
    "\n  The iteration's duration in days\n  "
    duration::Int
    "\n  The iteration's iterations\n  "
    iterations::Vector{ProjectV2IterationFieldIteration}
    "\n  The iteration's start day of the week\n  "
    startDay::Int
end
function ProjectV2IterationFieldConfiguration(; completedIterations, duration, iterations, startDay)
    ProjectV2IterationFieldConfiguration(completedIterations, duration, iterations, startDay)
end

"""
An iteration field inside a project.
"""
mutable struct ProjectV2IterationField <: OfficialGithubSchema
    "\n  Iteration configuration settings\n  "
    configuration::ProjectV2IterationFieldConfiguration
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The field's type.\n  "
    dataType::ProjectV2FieldType.T
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The project field's name.\n  "
    name::String
    project
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function ProjectV2IterationField(; configuration, createdAt, dataType, databaseId = nothing, id, name, project, updatedAt)
    ProjectV2IterationField(configuration, createdAt, dataType, databaseId, id, name, project, updatedAt)
end
function Base.getproperty(t::ProjectV2IterationField, sym::Symbol)
    if sym === Symbol("project")
        getfield(t, Symbol("project"))::ProjectV2
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2IterationField, sym::Symbol, val::Any)
    if sym === Symbol("project")
        setfield!(t, Symbol("project"), val::ProjectV2)
    else
        setfield!(t, sym, val)
    end
end

"""
Single select field option for a configuration for a project.
"""
mutable struct ProjectV2SingleSelectFieldOption <: OfficialGithubSchema
    "\n  The option's ID.\n  "
    id::String
    "\n  The option's name.\n  "
    name::String
    "\n  The option's html name.\n  "
    nameHTML::String
end
function ProjectV2SingleSelectFieldOption(; id, name, nameHTML)
    ProjectV2SingleSelectFieldOption(id, name, nameHTML)
end

"""
A single select field inside a project.
"""
mutable struct ProjectV2SingleSelectField <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The field's type.\n  "
    dataType::ProjectV2FieldType.T
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The project field's name.\n  "
    name::String
    "\n  Options for the single select field\n  "
    options::Vector{ProjectV2SingleSelectFieldOption}
    project
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function ProjectV2SingleSelectField(; createdAt, dataType, databaseId = nothing, id, name, options, project, updatedAt)
    ProjectV2SingleSelectField(createdAt, dataType, databaseId, id, name, options, project, updatedAt)
end
function Base.getproperty(t::ProjectV2SingleSelectField, sym::Symbol)
    if sym === Symbol("project")
        getfield(t, Symbol("project"))::ProjectV2
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2SingleSelectField, sym::Symbol, val::Any)
    if sym === Symbol("project")
        setfield!(t, Symbol("project"), val::ProjectV2)
    else
        setfield!(t, sym, val)
    end
end

"""
A field inside a project.
"""
mutable struct ProjectV2Field <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The field's type.\n  "
    dataType::ProjectV2FieldType.T
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The project field's name.\n  "
    name::String
    project
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function ProjectV2Field(; createdAt, dataType, databaseId = nothing, id, name, project, updatedAt)
    ProjectV2Field(createdAt, dataType, databaseId, id, name, project, updatedAt)
end
function Base.getproperty(t::ProjectV2Field, sym::Symbol)
    if sym === Symbol("project")
        getfield(t, Symbol("project"))::ProjectV2
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2Field, sym::Symbol, val::Any)
    if sym === Symbol("project")
        setfield!(t, Symbol("project"), val::ProjectV2)
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Configurations for project fields." const ProjectV2FieldConfiguration = Union{ProjectV2Field, ProjectV2IterationField, ProjectV2SingleSelectField}

"""
An edge in a connection.
"""
mutable struct ProjectV2FieldConfigurationEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectV2FieldConfiguration, Missing, Nothing}
end
function ProjectV2FieldConfigurationEdge(; cursor, node = nothing)
    ProjectV2FieldConfigurationEdge(cursor, node)
end

"""
The connection type for ProjectV2FieldConfiguration.
"""
mutable struct ProjectV2FieldConfigurationConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectV2FieldConfigurationEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectV2FieldConfiguration, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectV2FieldConfigurationConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectV2FieldConfigurationConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct ProjectV2FieldEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectV2Field, Missing, Nothing}
end
function ProjectV2FieldEdge(; cursor, node = nothing)
    ProjectV2FieldEdge(cursor, node)
end

"""
The connection type for ProjectV2Field.
"""
mutable struct ProjectV2FieldConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectV2FieldEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectV2Field, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectV2FieldConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectV2FieldConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a sort by field and direction.
"""
mutable struct ProjectV2SortByField <: OfficialGithubSchema
    "\n  The direction of the sorting. Possible values are ASC and DESC.\n  "
    direction::OrderDirection.T
    "\n  The field by which items are sorted.\n  "
    field::ProjectV2FieldConfiguration
end
function ProjectV2SortByField(; direction, field)
    ProjectV2SortByField(direction, field)
end

"""
An edge in a connection.
"""
mutable struct ProjectV2SortByFieldEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectV2SortByField, Missing, Nothing}
end
function ProjectV2SortByFieldEdge(; cursor, node = nothing)
    ProjectV2SortByFieldEdge(cursor, node)
end

"""
The connection type for ProjectV2SortByField.
"""
mutable struct ProjectV2SortByFieldConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectV2SortByFieldEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectV2SortByField, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectV2SortByFieldConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectV2SortByFieldConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a sort by field and direction.
"""
mutable struct ProjectV2SortBy <: OfficialGithubSchema
    "\n  The direction of the sorting. Possible values are ASC and DESC.\n  "
    direction::OrderDirection.T
    "\n  The field by which items are sorted.\n  "
    field::ProjectV2Field
end
function ProjectV2SortBy(; direction, field)
    ProjectV2SortBy(direction, field)
end

"""
An edge in a connection.
"""
mutable struct ProjectV2SortByEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectV2SortBy, Missing, Nothing}
end
function ProjectV2SortByEdge(; cursor, node = nothing)
    ProjectV2SortByEdge(cursor, node)
end

"""
The connection type for ProjectV2SortBy.
"""
mutable struct ProjectV2SortByConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectV2SortByEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectV2SortBy, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectV2SortByConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectV2SortByConnection(edges, nodes, pageInfo, totalCount)
end

"""
A view within a ProjectV2.
"""
mutable struct ProjectV2View <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The view's visible fields.\n  "
    fields::Union{ProjectV2FieldConfigurationConnection, Missing, Nothing}
    "\n  The project view's filter.\n  "
    filter::Union{String, Missing, Nothing}
    "\n  The view's group-by field.\n  "
    groupBy::Union{ProjectV2FieldConnection, Missing, Nothing}
    "\n  The view's group-by field.\n  "
    groupByFields::Union{ProjectV2FieldConfigurationConnection, Missing, Nothing}
    id::String
    "\n  The project view's layout.\n  "
    layout::ProjectV2ViewLayout.T
    "\n  The project view's name.\n  "
    name::String
    "\n  The project view's number.\n  "
    number::Int
    project
    "\n  The view's sort-by config.\n  "
    sortBy::Union{ProjectV2SortByConnection, Missing, Nothing}
    "\n  The view's sort-by config.\n  "
    sortByFields::Union{ProjectV2SortByFieldConnection, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The view's vertical-group-by field.\n  "
    verticalGroupBy::Union{ProjectV2FieldConnection, Missing, Nothing}
    "\n  The view's vertical-group-by field.\n  "
    verticalGroupByFields::Union{ProjectV2FieldConfigurationConnection, Missing, Nothing}
    "\n  The view's visible fields.\n  "
    visibleFields::Union{ProjectV2FieldConnection, Missing, Nothing}
end
function ProjectV2View(; createdAt, databaseId = nothing, fields = nothing, filter = nothing, groupBy = nothing, groupByFields = nothing, id, layout, name, number, project, sortBy = nothing, sortByFields = nothing, updatedAt, verticalGroupBy = nothing, verticalGroupByFields = nothing, visibleFields = nothing)
    ProjectV2View(createdAt, databaseId, fields, filter, groupBy, groupByFields, id, layout, name, number, project, sortBy, sortByFields, updatedAt, verticalGroupBy, verticalGroupByFields, visibleFields)
end
function Base.getproperty(t::ProjectV2View, sym::Symbol)
    if sym === Symbol("project")
        getfield(t, Symbol("project"))::ProjectV2
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2View, sym::Symbol, val::Any)
    if sym === Symbol("project")
        setfield!(t, Symbol("project"), val::ProjectV2)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct ProjectV2ViewEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectV2View, Missing, Nothing}
end
function ProjectV2ViewEdge(; cursor, node = nothing)
    ProjectV2ViewEdge(cursor, node)
end

"""
The connection type for ProjectV2View.
"""
mutable struct ProjectV2ViewConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectV2ViewEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectV2View, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectV2ViewConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectV2ViewConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct DiscussionCommentEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
end
function DiscussionCommentEdge(; cursor, node = nothing)
    DiscussionCommentEdge(cursor, node)
end
function Base.getproperty(t::DiscussionCommentEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{DiscussionComment, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DiscussionCommentEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{DiscussionComment, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for DiscussionComment.
"""
mutable struct DiscussionCommentConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DiscussionCommentEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DiscussionCommentConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DiscussionCommentConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::DiscussionCommentConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{DiscussionComment, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DiscussionCommentConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{DiscussionComment, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A special type of user which takes actions on behalf of GitHub Apps.
"""
mutable struct Bot <: OfficialGithubSchema
    "\n  A URL pointing to the GitHub App's public avatar.\n  "
    avatarUrl::URI
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The username of the actor.\n  "
    login::String
    "\n  The HTTP path for this bot\n  "
    resourcePath::URI
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this bot\n  "
    url::URI
end
function Bot(; avatarUrl, createdAt, databaseId = nothing, id, login, resourcePath, updatedAt, url)
    Bot(avatarUrl, createdAt, databaseId, id, login, resourcePath, updatedAt, url)
end

"""
A placeholder user for attribution of imported data on GitHub.
"""
mutable struct Mannequin <: OfficialGithubSchema
    "\n  A URL pointing to the GitHub App's public avatar.\n  "
    avatarUrl::URI
    claimant
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The mannequin's email on the source instance.\n  "
    email::Union{String, Missing, Nothing}
    id::String
    "\n  The username of the actor.\n  "
    login::String
    "\n  The HTML path to this resource.\n  "
    resourcePath::URI
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The URL to this resource.\n  "
    url::URI
end
function Mannequin(; avatarUrl, claimant = nothing, createdAt, databaseId = nothing, email = nothing, id, login, resourcePath, updatedAt, url)
    Mannequin(avatarUrl, claimant, createdAt, databaseId, email, id, login, resourcePath, updatedAt, url)
end
function Base.getproperty(t::Mannequin, sym::Symbol)
    if sym === Symbol("claimant")
        getfield(t, Symbol("claimant"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Mannequin, sym::Symbol, val::Any)
    if sym === Symbol("claimant")
        setfield!(t, Symbol("claimant"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An Octoshift migration source.
"""
mutable struct MigrationSource <: OfficialGithubSchema
    id::String
    "\n  The Octoshift migration source name.\n  "
    name::String
    "\n  The Octoshift migration source type.\n  "
    type::MigrationSourceType.T
    "\n  The Octoshift migration source URL.\n  "
    url::URI
end
function MigrationSource(; id, name, type, url)
    MigrationSource(id, name, type, url)
end

"""
An Octoshift repository migration.
"""
mutable struct RepositoryMigration <: OfficialGithubSchema
    "\n  The Octoshift migration flag to continue on error.\n  "
    continueOnError::Bool
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{String, Missing, Nothing}
    "\n  The reason the migration failed.\n  "
    failureReason::Union{String, Missing, Nothing}
    id::String
    "\n  The URL for the migration log (expires 1 day after migration completes).\n  "
    migrationLogUrl::Union{URI, Missing, Nothing}
    "\n  The Octoshift migration source.\n  "
    migrationSource::MigrationSource
    "\n  The target repository name.\n  "
    repositoryName::String
    "\n  The Octoshift migration source URL.\n  "
    sourceUrl::URI
    "\n  The Octoshift migration state.\n  "
    state::MigrationState.T
end
function RepositoryMigration(; continueOnError, createdAt, databaseId = nothing, failureReason = nothing, id, migrationLogUrl = nothing, migrationSource, repositoryName, sourceUrl, state)
    RepositoryMigration(continueOnError, createdAt, databaseId, failureReason, id, migrationLogUrl, migrationSource, repositoryName, sourceUrl, state)
end

"""
Represents a repository migration.
"""
mutable struct RepositoryMigrationEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{RepositoryMigration, Missing, Nothing}
end
function RepositoryMigrationEdge(; cursor, node = nothing)
    RepositoryMigrationEdge(cursor, node)
end

"""
The connection type for RepositoryMigration.
"""
mutable struct RepositoryMigrationConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{RepositoryMigrationEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{RepositoryMigration, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function RepositoryMigrationConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    RepositoryMigrationConnection(edges, nodes, pageInfo, totalCount)
end

"""
The user's description of what they're currently doing.
"""
mutable struct UserStatus <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  An emoji summarizing the user's status.\n  "
    emoji::Union{String, Missing, Nothing}
    "\n  The status emoji as HTML.\n  "
    emojiHTML::Union{HTML, Missing, Nothing}
    "\n  If set, the status will not be shown after this date.\n  "
    expiresAt::Union{DateTime, Missing, Nothing}
    id::String
    "\n  Whether this status indicates the user is not fully available on GitHub.\n  "
    indicatesLimitedAvailability::Bool
    "\n  A brief message describing what the user is doing.\n  "
    message::Union{String, Missing, Nothing}
    organization
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    user
end
function UserStatus(; createdAt, emoji = nothing, emojiHTML = nothing, expiresAt = nothing, id, indicatesLimitedAvailability, message = nothing, organization = nothing, updatedAt, user)
    UserStatus(createdAt, emoji, emojiHTML, expiresAt, id, indicatesLimitedAvailability, message, organization, updatedAt, user)
end
function Base.getproperty(t::UserStatus, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::UserStatus, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct UserStatusEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{UserStatus, Missing, Nothing}
end
function UserStatusEdge(; cursor, node = nothing)
    UserStatusEdge(cursor, node)
end

"""
The connection type for UserStatus.
"""
mutable struct UserStatusConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{UserStatusEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{UserStatus, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function UserStatusConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    UserStatusConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct OrganizationEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
end
function OrganizationEdge(; cursor, node = nothing)
    OrganizationEdge(cursor, node)
end
function Base.getproperty(t::OrganizationEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{Organization, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrganizationEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{Organization, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A list of organizations managed by an enterprise.
"""
mutable struct OrganizationConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{OrganizationEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function OrganizationConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    OrganizationConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::OrganizationConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{Organization, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrganizationConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{Organization, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An enterprise organization that a user is a member of.
"""
mutable struct EnterpriseOrganizationMembershipEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
    "\n  The role of the user in the enterprise membership.\n  "
    role::EnterpriseUserAccountMembershipRole.T
end
function EnterpriseOrganizationMembershipEdge(; cursor, node = nothing, role)
    EnterpriseOrganizationMembershipEdge(cursor, node, role)
end
function Base.getproperty(t::EnterpriseOrganizationMembershipEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{Organization, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseOrganizationMembershipEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{Organization, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for Organization.
"""
mutable struct EnterpriseOrganizationMembershipConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{EnterpriseOrganizationMembershipEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function EnterpriseOrganizationMembershipConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    EnterpriseOrganizationMembershipConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::EnterpriseOrganizationMembershipConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{Organization, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseOrganizationMembershipConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{Organization, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
"""
mutable struct EnterpriseUserAccount <: OfficialGithubSchema
    "\n  A URL pointing to the enterprise user account's public avatar.\n  "
    avatarUrl::URI
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    enterprise
    id::String
    "\n  An identifier for the enterprise user account, a login or email address\n  "
    login::String
    "\n  The name of the enterprise user account\n  "
    name::Union{String, Missing, Nothing}
    "\n  A list of enterprise organizations this user is a member of.\n  "
    organizations::EnterpriseOrganizationMembershipConnection
    "\n  The HTTP path for this user.\n  "
    resourcePath::URI
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this user.\n  "
    url::URI
    user
end
function EnterpriseUserAccount(; avatarUrl, createdAt, enterprise, id, login, name = nothing, organizations, resourcePath, updatedAt, url, user = nothing)
    EnterpriseUserAccount(avatarUrl, createdAt, enterprise, id, login, name, organizations, resourcePath, updatedAt, url, user)
end
function Base.getproperty(t::EnterpriseUserAccount, sym::Symbol)
    if sym === Symbol("enterprise")
        getfield(t, Symbol("enterprise"))::Enterprise
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseUserAccount, sym::Symbol, val::Any)
    if sym === Symbol("enterprise")
        setfield!(t, Symbol("enterprise"), val::Enterprise)
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "An object that is a member of an enterprise." const EnterpriseMember = Union{EnterpriseUserAccount, User}

"""
A User who is a member of an enterprise through one or more organizations.
"""
mutable struct EnterpriseMemberEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{EnterpriseMember, Missing, Nothing}
end
function EnterpriseMemberEdge(; cursor, node = nothing)
    EnterpriseMemberEdge(cursor, node)
end

"""
The connection type for EnterpriseMember.
"""
mutable struct EnterpriseMemberConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{EnterpriseMemberEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{EnterpriseMember, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function EnterpriseMemberConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    EnterpriseMemberConnection(edges, nodes, pageInfo, totalCount)
end

"""
Enterprise billing information visible to enterprise billing managers and owners.
"""
mutable struct EnterpriseBillingInfo <: OfficialGithubSchema
    "\n  The number of licenseable users/emails across the enterprise.\n  "
    allLicensableUsersCount::Int
    "\n  The number of data packs used by all organizations owned by the enterprise.\n  "
    assetPacks::Int
    "\n  The bandwidth quota in GB for all organizations owned by the enterprise.\n  "
    bandwidthQuota::Float64
    "\n  The bandwidth usage in GB for all organizations owned by the enterprise.\n  "
    bandwidthUsage::Float64
    "\n  The bandwidth usage as a percentage of the bandwidth quota.\n  "
    bandwidthUsagePercentage::Int
    "\n  The storage quota in GB for all organizations owned by the enterprise.\n  "
    storageQuota::Float64
    "\n  The storage usage in GB for all organizations owned by the enterprise.\n  "
    storageUsage::Float64
    "\n  The storage usage as a percentage of the storage quota.\n  "
    storageUsagePercentage::Int
    "\n  The number of available licenses across all owned organizations based on the unique number of billable users.\n  "
    totalAvailableLicenses::Int
    "\n  The total number of licenses allocated.\n  "
    totalLicenses::Int
end
function EnterpriseBillingInfo(; allLicensableUsersCount, assetPacks, bandwidthQuota, bandwidthUsage, bandwidthUsagePercentage, storageQuota, storageUsage, storageUsagePercentage, totalAvailableLicenses, totalLicenses)
    EnterpriseBillingInfo(allLicensableUsersCount, assetPacks, bandwidthQuota, bandwidthUsage, bandwidthUsagePercentage, storageQuota, storageUsage, storageUsagePercentage, totalAvailableLicenses, totalLicenses)
end

"""
A user accounts upload from an Enterprise Server installation.
"""
mutable struct EnterpriseServerUserAccountsUpload <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    enterprise
    enterpriseServerInstallation
    id::String
    "\n  The name of the file uploaded.\n  "
    name::String
    "\n  The synchronization state of the upload\n  "
    syncState::EnterpriseServerUserAccountsUploadSyncState.T
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function EnterpriseServerUserAccountsUpload(; createdAt, enterprise, enterpriseServerInstallation, id, name, syncState, updatedAt)
    EnterpriseServerUserAccountsUpload(createdAt, enterprise, enterpriseServerInstallation, id, name, syncState, updatedAt)
end
function Base.getproperty(t::EnterpriseServerUserAccountsUpload, sym::Symbol)
    if sym === Symbol("enterprise")
        getfield(t, Symbol("enterprise"))::Enterprise
    elseif sym === Symbol("enterpriseServerInstallation")
        getfield(t, Symbol("enterpriseServerInstallation"))::EnterpriseServerInstallation
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseServerUserAccountsUpload, sym::Symbol, val::Any)
    if sym === Symbol("enterprise")
        setfield!(t, Symbol("enterprise"), val::Enterprise)
    elseif sym === Symbol("enterpriseServerInstallation")
        setfield!(t, Symbol("enterpriseServerInstallation"), val::EnterpriseServerInstallation)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct EnterpriseServerUserAccountsUploadEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{EnterpriseServerUserAccountsUpload, Missing, Nothing}
end
function EnterpriseServerUserAccountsUploadEdge(; cursor, node = nothing)
    EnterpriseServerUserAccountsUploadEdge(cursor, node)
end

"""
The connection type for EnterpriseServerUserAccountsUpload.
"""
mutable struct EnterpriseServerUserAccountsUploadConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{EnterpriseServerUserAccountsUploadEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{EnterpriseServerUserAccountsUpload, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function EnterpriseServerUserAccountsUploadConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    EnterpriseServerUserAccountsUploadConnection(edges, nodes, pageInfo, totalCount)
end

"""
An email belonging to a user account on an Enterprise Server installation.
"""
mutable struct EnterpriseServerUserAccountEmail <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The email address.\n  "
    email::String
    id::String
    "\n  Indicates whether this is the primary email of the associated user account.\n  "
    isPrimary::Bool
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    userAccount
end
function EnterpriseServerUserAccountEmail(; createdAt, email, id, isPrimary, updatedAt, userAccount)
    EnterpriseServerUserAccountEmail(createdAt, email, id, isPrimary, updatedAt, userAccount)
end
function Base.getproperty(t::EnterpriseServerUserAccountEmail, sym::Symbol)
    if sym === Symbol("userAccount")
        getfield(t, Symbol("userAccount"))::EnterpriseServerUserAccount
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseServerUserAccountEmail, sym::Symbol, val::Any)
    if sym === Symbol("userAccount")
        setfield!(t, Symbol("userAccount"), val::EnterpriseServerUserAccount)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct EnterpriseServerUserAccountEmailEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{EnterpriseServerUserAccountEmail, Missing, Nothing}
end
function EnterpriseServerUserAccountEmailEdge(; cursor, node = nothing)
    EnterpriseServerUserAccountEmailEdge(cursor, node)
end

"""
The connection type for EnterpriseServerUserAccountEmail.
"""
mutable struct EnterpriseServerUserAccountEmailConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{EnterpriseServerUserAccountEmailEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{EnterpriseServerUserAccountEmail, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function EnterpriseServerUserAccountEmailConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    EnterpriseServerUserAccountEmailConnection(edges, nodes, pageInfo, totalCount)
end

"""
A user account on an Enterprise Server installation.
"""
mutable struct EnterpriseServerUserAccount <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  User emails belonging to this user account.\n  "
    emails::EnterpriseServerUserAccountEmailConnection
    enterpriseServerInstallation
    id::String
    "\n  Whether the user account is a site administrator on the Enterprise Server installation.\n  "
    isSiteAdmin::Bool
    "\n  The login of the user account on the Enterprise Server installation.\n  "
    login::String
    "\n  The profile name of the user account on the Enterprise Server installation.\n  "
    profileName::Union{String, Missing, Nothing}
    "\n  The date and time when the user account was created on the Enterprise Server installation.\n  "
    remoteCreatedAt::DateTime
    "\n  The ID of the user account on the Enterprise Server installation.\n  "
    remoteUserId::Int
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function EnterpriseServerUserAccount(; createdAt, emails, enterpriseServerInstallation, id, isSiteAdmin, login, profileName = nothing, remoteCreatedAt, remoteUserId, updatedAt)
    EnterpriseServerUserAccount(createdAt, emails, enterpriseServerInstallation, id, isSiteAdmin, login, profileName, remoteCreatedAt, remoteUserId, updatedAt)
end
function Base.getproperty(t::EnterpriseServerUserAccount, sym::Symbol)
    if sym === Symbol("enterpriseServerInstallation")
        getfield(t, Symbol("enterpriseServerInstallation"))::EnterpriseServerInstallation
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseServerUserAccount, sym::Symbol, val::Any)
    if sym === Symbol("enterpriseServerInstallation")
        setfield!(t, Symbol("enterpriseServerInstallation"), val::EnterpriseServerInstallation)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct EnterpriseServerUserAccountEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{EnterpriseServerUserAccount, Missing, Nothing}
end
function EnterpriseServerUserAccountEdge(; cursor, node = nothing)
    EnterpriseServerUserAccountEdge(cursor, node)
end

"""
The connection type for EnterpriseServerUserAccount.
"""
mutable struct EnterpriseServerUserAccountConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{EnterpriseServerUserAccountEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{EnterpriseServerUserAccount, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function EnterpriseServerUserAccountConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    EnterpriseServerUserAccountConnection(edges, nodes, pageInfo, totalCount)
end

"""
An Enterprise Server installation.
"""
mutable struct EnterpriseServerInstallation <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The customer name to which the Enterprise Server installation belongs.\n  "
    customerName::String
    "\n  The host name of the Enterprise Server installation.\n  "
    hostName::String
    id::String
    "\n  Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.\n  "
    isConnected::Bool
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  User accounts on this Enterprise Server installation.\n  "
    userAccounts::EnterpriseServerUserAccountConnection
    "\n  User accounts uploads for the Enterprise Server installation.\n  "
    userAccountsUploads::EnterpriseServerUserAccountsUploadConnection
end
function EnterpriseServerInstallation(; createdAt, customerName, hostName, id, isConnected, updatedAt, userAccounts, userAccountsUploads)
    EnterpriseServerInstallation(createdAt, customerName, hostName, id, isConnected, updatedAt, userAccounts, userAccountsUploads)
end

"""
An edge in a connection.
"""
mutable struct EnterpriseServerInstallationEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{EnterpriseServerInstallation, Missing, Nothing}
end
function EnterpriseServerInstallationEdge(; cursor, node = nothing)
    EnterpriseServerInstallationEdge(cursor, node)
end

"""
The connection type for EnterpriseServerInstallation.
"""
mutable struct EnterpriseServerInstallationConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{EnterpriseServerInstallationEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{EnterpriseServerInstallation, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function EnterpriseServerInstallationConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    EnterpriseServerInstallationConnection(edges, nodes, pageInfo, totalCount)
end

"""
Email attributes from External Identity
"""
mutable struct UserEmailMetadata <: OfficialGithubSchema
    "\n  Boolean to identify primary emails\n  "
    primary::Union{Bool, Missing, Nothing}
    "\n  Type of email\n  "
    type::Union{String, Missing, Nothing}
    "\n  Email id\n  "
    value::String
end
function UserEmailMetadata(; primary = nothing, type = nothing, value)
    UserEmailMetadata(primary, type, value)
end

"""
An attribute for the External Identity attributes collection
"""
mutable struct ExternalIdentityAttribute <: OfficialGithubSchema
    "\n  The attribute metadata as JSON\n  "
    metadata::Union{String, Missing, Nothing}
    "\n  The attribute name\n  "
    name::String
    "\n  The attribute value\n  "
    value::String
end
function ExternalIdentityAttribute(; metadata = nothing, name, value)
    ExternalIdentityAttribute(metadata, name, value)
end

"""
SAML attributes for the External Identity
"""
mutable struct ExternalIdentitySamlAttributes <: OfficialGithubSchema
    "\n  SAML Identity attributes\n  "
    attributes::Vector{ExternalIdentityAttribute}
    "\n  The emails associated with the SAML identity\n  "
    emails::Union{Vector{UserEmailMetadata}, Missing, Nothing}
    "\n  Family name of the SAML identity\n  "
    familyName::Union{String, Missing, Nothing}
    "\n  Given name of the SAML identity\n  "
    givenName::Union{String, Missing, Nothing}
    "\n  The groups linked to this identity in IDP\n  "
    groups::Union{Vector{String}, Missing, Nothing}
    "\n  The NameID of the SAML identity\n  "
    nameId::Union{String, Missing, Nothing}
    "\n  The userName of the SAML identity\n  "
    username::Union{String, Missing, Nothing}
end
function ExternalIdentitySamlAttributes(; attributes, emails = nothing, familyName = nothing, givenName = nothing, groups = nothing, nameId = nothing, username = nothing)
    ExternalIdentitySamlAttributes(attributes, emails, familyName, givenName, groups, nameId, username)
end

"""
An Invitation for a user to an organization.
"""
mutable struct OrganizationInvitation <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The email address of the user invited to the organization.\n  "
    email::Union{String, Missing, Nothing}
    id::String
    "\n  The type of invitation that was sent (e.g. email, user).\n  "
    invitationType::OrganizationInvitationType.T
    invitee
    inviter
    organization
    "\n  The user's pending role in the organization (e.g. member, owner).\n  "
    role::OrganizationInvitationRole.T
end
function OrganizationInvitation(; createdAt, email = nothing, id, invitationType, invitee = nothing, inviter, organization, role)
    OrganizationInvitation(createdAt, email, id, invitationType, invitee, inviter, organization, role)
end
function Base.getproperty(t::OrganizationInvitation, sym::Symbol)
    if sym === Symbol("invitee")
        getfield(t, Symbol("invitee"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("inviter")
        getfield(t, Symbol("inviter"))::User
    elseif sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Organization
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrganizationInvitation, sym::Symbol, val::Any)
    if sym === Symbol("invitee")
        setfield!(t, Symbol("invitee"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("inviter")
        setfield!(t, Symbol("inviter"), val::User)
    elseif sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Organization)
    else
        setfield!(t, sym, val)
    end
end

"""
SCIM attributes for the External Identity
"""
mutable struct ExternalIdentityScimAttributes <: OfficialGithubSchema
    "\n  The emails associated with the SCIM identity\n  "
    emails::Union{Vector{UserEmailMetadata}, Missing, Nothing}
    "\n  Family name of the SCIM identity\n  "
    familyName::Union{String, Missing, Nothing}
    "\n  Given name of the SCIM identity\n  "
    givenName::Union{String, Missing, Nothing}
    "\n  The groups linked to this identity in IDP\n  "
    groups::Union{Vector{String}, Missing, Nothing}
    "\n  The userName of the SCIM identity\n  "
    username::Union{String, Missing, Nothing}
end
function ExternalIdentityScimAttributes(; emails = nothing, familyName = nothing, givenName = nothing, groups = nothing, username = nothing)
    ExternalIdentityScimAttributes(emails, familyName, givenName, groups, username)
end

"""
An external identity provisioned by SAML SSO or SCIM.
"""
mutable struct ExternalIdentity <: OfficialGithubSchema
    "\n  The GUID for this identity\n  "
    guid::String
    id::String
    "\n  Organization invitation for this SCIM-provisioned external identity\n  "
    organizationInvitation::Union{OrganizationInvitation, Missing, Nothing}
    "\n  SAML Identity attributes\n  "
    samlIdentity::Union{ExternalIdentitySamlAttributes, Missing, Nothing}
    "\n  SCIM Identity attributes\n  "
    scimIdentity::Union{ExternalIdentityScimAttributes, Missing, Nothing}
    user
end
function ExternalIdentity(; guid, id, organizationInvitation = nothing, samlIdentity = nothing, scimIdentity = nothing, user = nothing)
    ExternalIdentity(guid, id, organizationInvitation, samlIdentity, scimIdentity, user)
end
function Base.getproperty(t::ExternalIdentity, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ExternalIdentity, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct ExternalIdentityEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ExternalIdentity, Missing, Nothing}
end
function ExternalIdentityEdge(; cursor, node = nothing)
    ExternalIdentityEdge(cursor, node)
end

"""
The connection type for ExternalIdentity.
"""
mutable struct ExternalIdentityConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ExternalIdentityEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ExternalIdentity, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ExternalIdentityConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ExternalIdentityConnection(edges, nodes, pageInfo, totalCount)
end

"""
An identity provider configured to provision identities for an enterprise.
"""
mutable struct EnterpriseIdentityProvider <: OfficialGithubSchema
    "\n  The digest algorithm used to sign SAML requests for the identity provider.\n  "
    digestMethod::Union{SamlDigestAlgorithm.T, Missing, Nothing}
    enterprise
    "\n  ExternalIdentities provisioned by this identity provider.\n  "
    externalIdentities::ExternalIdentityConnection
    id::String
    "\n  The x509 certificate used by the identity provider to sign assertions and responses.\n  "
    idpCertificate::Union{X509Certificate, Missing, Nothing}
    "\n  The Issuer Entity ID for the SAML identity provider.\n  "
    issuer::Union{String, Missing, Nothing}
    "\n  Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.\n  "
    recoveryCodes::Union{Vector{String}, Missing, Nothing}
    "\n  The signature algorithm used to sign SAML requests for the identity provider.\n  "
    signatureMethod::Union{SamlSignatureAlgorithm.T, Missing, Nothing}
    "\n  The URL endpoint for the identity provider's SAML SSO.\n  "
    ssoUrl::Union{URI, Missing, Nothing}
end
function EnterpriseIdentityProvider(; digestMethod = nothing, enterprise = nothing, externalIdentities, id, idpCertificate = nothing, issuer = nothing, recoveryCodes = nothing, signatureMethod = nothing, ssoUrl = nothing)
    EnterpriseIdentityProvider(digestMethod, enterprise, externalIdentities, id, idpCertificate, issuer, recoveryCodes, signatureMethod, ssoUrl)
end
function Base.getproperty(t::EnterpriseIdentityProvider, sym::Symbol)
    if sym === Symbol("enterprise")
        getfield(t, Symbol("enterprise"))::Union{Enterprise, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseIdentityProvider, sym::Symbol, val::Any)
    if sym === Symbol("enterprise")
        setfield!(t, Symbol("enterprise"), val::Union{Enterprise, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for User.
"""
mutable struct UserConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{UserEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function UserConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    UserConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::UserConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::UserConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An invitation for a user to become an owner or billing manager of an enterprise.
"""
mutable struct EnterpriseAdministratorInvitation <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The email of the person who was invited to the enterprise.\n  "
    email::Union{String, Missing, Nothing}
    enterprise
    id::String
    invitee
    inviter
    "\n  The invitee's pending role in the enterprise (owner or billing_manager).\n  "
    role::EnterpriseAdministratorRole.T
end
function EnterpriseAdministratorInvitation(; createdAt, email = nothing, enterprise, id, invitee = nothing, inviter = nothing, role)
    EnterpriseAdministratorInvitation(createdAt, email, enterprise, id, invitee, inviter, role)
end
function Base.getproperty(t::EnterpriseAdministratorInvitation, sym::Symbol)
    if sym === Symbol("enterprise")
        getfield(t, Symbol("enterprise"))::Enterprise
    elseif sym === Symbol("invitee")
        getfield(t, Symbol("invitee"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("inviter")
        getfield(t, Symbol("inviter"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseAdministratorInvitation, sym::Symbol, val::Any)
    if sym === Symbol("enterprise")
        setfield!(t, Symbol("enterprise"), val::Enterprise)
    elseif sym === Symbol("invitee")
        setfield!(t, Symbol("invitee"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("inviter")
        setfield!(t, Symbol("inviter"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct EnterpriseAdministratorInvitationEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{EnterpriseAdministratorInvitation, Missing, Nothing}
end
function EnterpriseAdministratorInvitationEdge(; cursor, node = nothing)
    EnterpriseAdministratorInvitationEdge(cursor, node)
end

"""
The connection type for EnterpriseAdministratorInvitation.
"""
mutable struct EnterpriseAdministratorInvitationConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{EnterpriseAdministratorInvitationEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{EnterpriseAdministratorInvitation, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function EnterpriseAdministratorInvitationConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    EnterpriseAdministratorInvitationConnection(edges, nodes, pageInfo, totalCount)
end

"""
An invitation to be a member in an enterprise organization.
"""
mutable struct EnterprisePendingMemberInvitationEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{OrganizationInvitation, Missing, Nothing}
end
function EnterprisePendingMemberInvitationEdge(; cursor, node = nothing)
    EnterprisePendingMemberInvitationEdge(cursor, node)
end

"""
The connection type for OrganizationInvitation.
"""
mutable struct EnterprisePendingMemberInvitationConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{EnterprisePendingMemberInvitationEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{OrganizationInvitation, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
    "\n  Identifies the total count of unique users in the connection.\n  "
    totalUniqueUserCount::Int
end
function EnterprisePendingMemberInvitationConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount, totalUniqueUserCount)
    EnterprisePendingMemberInvitationConnection(edges, nodes, pageInfo, totalCount, totalUniqueUserCount)
end

"""
An invitation for a user to be added to a repository.
"""
mutable struct RepositoryInvitation <: OfficialGithubSchema
    "\n  The email address that received the invitation.\n  "
    email::Union{String, Missing, Nothing}
    id::String
    invitee
    inviter
    "\n  The permalink for this repository invitation.\n  "
    permalink::URI
    "\n  The permission granted on this repository by this invitation.\n  "
    permission::RepositoryPermission.T
    "\n  The Repository the user is invited to.\n  "
    repository::Union{RepositoryInfo, Missing, Nothing}
end
function RepositoryInvitation(; email = nothing, id, invitee = nothing, inviter, permalink, permission, repository = nothing)
    RepositoryInvitation(email, id, invitee, inviter, permalink, permission, repository)
end
function Base.getproperty(t::RepositoryInvitation, sym::Symbol)
    if sym === Symbol("invitee")
        getfield(t, Symbol("invitee"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("inviter")
        getfield(t, Symbol("inviter"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepositoryInvitation, sym::Symbol, val::Any)
    if sym === Symbol("invitee")
        setfield!(t, Symbol("invitee"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("inviter")
        setfield!(t, Symbol("inviter"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct RepositoryInvitationEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{RepositoryInvitation, Missing, Nothing}
end
function RepositoryInvitationEdge(; cursor, node = nothing)
    RepositoryInvitationEdge(cursor, node)
end

"""
A list of repository invitations.
"""
mutable struct RepositoryInvitationConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{RepositoryInvitationEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{RepositoryInvitation, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function RepositoryInvitationConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    RepositoryInvitationConnection(edges, nodes, pageInfo, totalCount)
end

"""
An OIDC identity provider configured to provision identities for an enterprise.
"""
mutable struct OIDCProvider <: OfficialGithubSchema
    enterprise
    "\n  ExternalIdentities provisioned by this identity provider.\n  "
    externalIdentities::ExternalIdentityConnection
    id::String
    "\n  The OIDC identity provider type\n  "
    providerType::OIDCProviderType.T
    "\n  The id of the tenant this provider is attached to\n  "
    tenantId::String
end
function OIDCProvider(; enterprise = nothing, externalIdentities, id, providerType, tenantId)
    OIDCProvider(enterprise, externalIdentities, id, providerType, tenantId)
end
function Base.getproperty(t::OIDCProvider, sym::Symbol)
    if sym === Symbol("enterprise")
        getfield(t, Symbol("enterprise"))::Union{Enterprise, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OIDCProvider, sym::Symbol, val::Any)
    if sym === Symbol("enterprise")
        setfield!(t, Symbol("enterprise"), val::Union{Enterprise, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A subset of repository information queryable from an enterprise.
"""
mutable struct EnterpriseRepositoryInfo <: OfficialGithubSchema
    id::String
    "\n  Identifies if the repository is private or internal.\n  "
    isPrivate::Bool
    "\n  The repository's name.\n  "
    name::String
    "\n  The repository's name with owner.\n  "
    nameWithOwner::String
end
function EnterpriseRepositoryInfo(; id, isPrivate, name, nameWithOwner)
    EnterpriseRepositoryInfo(id, isPrivate, name, nameWithOwner)
end

"""
An edge in a connection.
"""
mutable struct EnterpriseRepositoryInfoEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{EnterpriseRepositoryInfo, Missing, Nothing}
end
function EnterpriseRepositoryInfoEdge(; cursor, node = nothing)
    EnterpriseRepositoryInfoEdge(cursor, node)
end

"""
The connection type for EnterpriseRepositoryInfo.
"""
mutable struct EnterpriseRepositoryInfoConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{EnterpriseRepositoryInfoEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{EnterpriseRepositoryInfo, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function EnterpriseRepositoryInfoConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    EnterpriseRepositoryInfoConnection(edges, nodes, pageInfo, totalCount)
end

"""
A User who is an outside collaborator of an enterprise through one or more organizations.
"""
mutable struct EnterpriseOutsideCollaboratorEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
    "\n  The enterprise organization repositories this user is a member of.\n  "
    repositories::EnterpriseRepositoryInfoConnection
end
function EnterpriseOutsideCollaboratorEdge(; cursor, node = nothing, repositories)
    EnterpriseOutsideCollaboratorEdge(cursor, node, repositories)
end
function Base.getproperty(t::EnterpriseOutsideCollaboratorEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseOutsideCollaboratorEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for User.
"""
mutable struct EnterpriseOutsideCollaboratorConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{EnterpriseOutsideCollaboratorEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function EnterpriseOutsideCollaboratorConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    EnterpriseOutsideCollaboratorConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::EnterpriseOutsideCollaboratorConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseOutsideCollaboratorConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A User who is an administrator of an enterprise.
"""
mutable struct EnterpriseAdministratorEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
    "\n  The role of the administrator.\n  "
    role::EnterpriseAdministratorRole.T
end
function EnterpriseAdministratorEdge(; cursor, node = nothing, role)
    EnterpriseAdministratorEdge(cursor, node, role)
end
function Base.getproperty(t::EnterpriseAdministratorEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseAdministratorEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for User.
"""
mutable struct EnterpriseAdministratorConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{EnterpriseAdministratorEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function EnterpriseAdministratorConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    EnterpriseAdministratorConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::EnterpriseAdministratorConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseAdministratorConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A GitHub App.
"""
mutable struct App <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The description of the app.\n  "
    description::Union{String, Missing, Nothing}
    id::String
    ipAllowListEntries
    "\n  The hex color code, without the leading '#', for the logo background.\n  "
    logoBackgroundColor::String
    "\n  A URL pointing to the app's logo.\n  "
    logoUrl::URI
    "\n  The name of the app.\n  "
    name::String
    "\n  A slug based on the name of the app for use in URLs.\n  "
    slug::String
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The URL to the app's homepage.\n  "
    url::URI
end
function App(; createdAt, databaseId = nothing, description = nothing, id, ipAllowListEntries, logoBackgroundColor, logoUrl, name, slug, updatedAt, url)
    App(createdAt, databaseId, description, id, ipAllowListEntries, logoBackgroundColor, logoUrl, name, slug, updatedAt, url)
end
function Base.getproperty(t::App, sym::Symbol)
    if sym === Symbol("ipAllowListEntries")
        getfield(t, Symbol("ipAllowListEntries"))::IpAllowListEntryConnection
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::App, sym::Symbol, val::Any)
    if sym === Symbol("ipAllowListEntries")
        setfield!(t, Symbol("ipAllowListEntries"), val::IpAllowListEntryConnection)
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Types that can own an IP allow list." const IpAllowListOwner = Union{App, Enterprise, Organization}

"""
An IP address or range of addresses that is allowed to access an owner's resources.
"""
mutable struct IpAllowListEntry <: OfficialGithubSchema
    "\n  A single IP address or range of IP addresses in CIDR notation.\n  "
    allowListValue::String
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Whether the entry is currently active.\n  "
    isActive::Bool
    "\n  The name of the IP allow list entry.\n  "
    name::Union{String, Missing, Nothing}
    "\n  The owner of the IP allow list entry.\n  "
    owner::IpAllowListOwner
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function IpAllowListEntry(; allowListValue, createdAt, id, isActive, name = nothing, owner, updatedAt)
    IpAllowListEntry(allowListValue, createdAt, id, isActive, name, owner, updatedAt)
end

"""
An edge in a connection.
"""
mutable struct IpAllowListEntryEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{IpAllowListEntry, Missing, Nothing}
end
function IpAllowListEntryEdge(; cursor, node = nothing)
    IpAllowListEntryEdge(cursor, node)
end

"""
The connection type for IpAllowListEntry.
"""
mutable struct IpAllowListEntryConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{IpAllowListEntryEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{IpAllowListEntry, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function IpAllowListEntryConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    IpAllowListEntryConnection(edges, nodes, pageInfo, totalCount)
end

"""
Enterprise information only visible to enterprise owners.
"""
mutable struct EnterpriseOwnerInfo <: OfficialGithubSchema
    "\n  A list of all of the administrators for this enterprise.\n  "
    admins::EnterpriseAdministratorConnection
    "\n  A list of users in the enterprise who currently have two-factor authentication disabled.\n  "
    affiliatedUsersWithTwoFactorDisabled::UserConnection
    "\n  Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.\n  "
    affiliatedUsersWithTwoFactorDisabledExist::Bool
    "\n  The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.\n  "
    allowPrivateRepositoryForkingSetting::EnterpriseEnabledDisabledSettingValue.T
    "\n  A list of enterprise organizations configured with the provided private repository forking setting value.\n  "
    allowPrivateRepositoryForkingSettingOrganizations::OrganizationConnection
    "\n  The value for the allow private repository forking policy on the enterprise.\n  "
    allowPrivateRepositoryForkingSettingPolicyValue::Union{EnterpriseAllowPrivateRepositoryForkingPolicyValue.T, Missing, Nothing}
    "\n  The setting value for base repository permissions for organizations in this enterprise.\n  "
    defaultRepositoryPermissionSetting::EnterpriseDefaultRepositoryPermissionSettingValue.T
    "\n  A list of enterprise organizations configured with the provided base repository permission.\n  "
    defaultRepositoryPermissionSettingOrganizations::OrganizationConnection
    domains
    "\n  Enterprise Server installations owned by the enterprise.\n  "
    enterpriseServerInstallations::EnterpriseServerInstallationConnection
    "\n  The setting value for whether the enterprise has an IP allow list enabled.\n  "
    ipAllowListEnabledSetting::IpAllowListEnabledSettingValue.T
    "\n  The IP addresses that are allowed to access resources owned by the enterprise.\n  "
    ipAllowListEntries::IpAllowListEntryConnection
    "\n  The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled.\n  "
    ipAllowListForInstalledAppsEnabledSetting::IpAllowListForInstalledAppsEnabledSettingValue.T
    "\n  Whether or not the base repository permission is currently being updated.\n  "
    isUpdatingDefaultRepositoryPermission::Bool
    "\n  Whether the two-factor authentication requirement is currently being enforced.\n  "
    isUpdatingTwoFactorRequirement::Bool
    "\n  The setting value for whether organization members with admin permissions on a\n  repository can change repository visibility.\n  "
    membersCanChangeRepositoryVisibilitySetting::EnterpriseEnabledDisabledSettingValue.T
    "\n  A list of enterprise organizations configured with the provided can change repository visibility setting value.\n  "
    membersCanChangeRepositoryVisibilitySettingOrganizations::OrganizationConnection
    "\n  The setting value for whether members of organizations in the enterprise can create internal repositories.\n  "
    membersCanCreateInternalRepositoriesSetting::Union{Bool, Missing, Nothing}
    "\n  The setting value for whether members of organizations in the enterprise can create private repositories.\n  "
    membersCanCreatePrivateRepositoriesSetting::Union{Bool, Missing, Nothing}
    "\n  The setting value for whether members of organizations in the enterprise can create public repositories.\n  "
    membersCanCreatePublicRepositoriesSetting::Union{Bool, Missing, Nothing}
    "\n  The setting value for whether members of organizations in the enterprise can create repositories.\n  "
    membersCanCreateRepositoriesSetting::Union{EnterpriseMembersCanCreateRepositoriesSettingValue.T, Missing, Nothing}
    "\n  A list of enterprise organizations configured with the provided repository creation setting value.\n  "
    membersCanCreateRepositoriesSettingOrganizations::OrganizationConnection
    "\n  The setting value for whether members with admin permissions for repositories can delete issues.\n  "
    membersCanDeleteIssuesSetting::EnterpriseEnabledDisabledSettingValue.T
    "\n  A list of enterprise organizations configured with the provided members can delete issues setting value.\n  "
    membersCanDeleteIssuesSettingOrganizations::OrganizationConnection
    "\n  The setting value for whether members with admin permissions for repositories can delete or transfer repositories.\n  "
    membersCanDeleteRepositoriesSetting::EnterpriseEnabledDisabledSettingValue.T
    "\n  A list of enterprise organizations configured with the provided members can delete repositories setting value.\n  "
    membersCanDeleteRepositoriesSettingOrganizations::OrganizationConnection
    "\n  The setting value for whether members of organizations in the enterprise can invite outside collaborators.\n  "
    membersCanInviteCollaboratorsSetting::EnterpriseEnabledDisabledSettingValue.T
    "\n  A list of enterprise organizations configured with the provided members can invite collaborators setting value.\n  "
    membersCanInviteCollaboratorsSettingOrganizations::OrganizationConnection
    "\n  Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.\n  "
    membersCanMakePurchasesSetting::EnterpriseMembersCanMakePurchasesSettingValue.T
    "\n  The setting value for whether members with admin permissions for repositories can update protected branches.\n  "
    membersCanUpdateProtectedBranchesSetting::EnterpriseEnabledDisabledSettingValue.T
    "\n  A list of enterprise organizations configured with the provided members can update protected branches setting value.\n  "
    membersCanUpdateProtectedBranchesSettingOrganizations::OrganizationConnection
    "\n  The setting value for whether members can view dependency insights.\n  "
    membersCanViewDependencyInsightsSetting::EnterpriseEnabledDisabledSettingValue.T
    "\n  A list of enterprise organizations configured with the provided members can view dependency insights setting value.\n  "
    membersCanViewDependencyInsightsSettingOrganizations::OrganizationConnection
    "\n  Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.\n  "
    notificationDeliveryRestrictionEnabledSetting::NotificationRestrictionSettingValue.T
    "\n  The OIDC Identity Provider for the enterprise.\n  "
    oidcProvider::Union{OIDCProvider, Missing, Nothing}
    "\n  The setting value for whether organization projects are enabled for organizations in this enterprise.\n  "
    organizationProjectsSetting::EnterpriseEnabledDisabledSettingValue.T
    "\n  A list of enterprise organizations configured with the provided organization projects setting value.\n  "
    organizationProjectsSettingOrganizations::OrganizationConnection
    "\n  A list of outside collaborators across the repositories in the enterprise.\n  "
    outsideCollaborators::EnterpriseOutsideCollaboratorConnection
    "\n  A list of pending administrator invitations for the enterprise.\n  "
    pendingAdminInvitations::EnterpriseAdministratorInvitationConnection
    "\n  A list of pending collaborator invitations across the repositories in the enterprise.\n  "
    pendingCollaboratorInvitations::RepositoryInvitationConnection
    "\n  A list of pending member invitations for organizations in the enterprise.\n  "
    pendingMemberInvitations::EnterprisePendingMemberInvitationConnection
    "\n  The setting value for whether repository projects are enabled in this enterprise.\n  "
    repositoryProjectsSetting::EnterpriseEnabledDisabledSettingValue.T
    "\n  A list of enterprise organizations configured with the provided repository projects setting value.\n  "
    repositoryProjectsSettingOrganizations::OrganizationConnection
    "\n  The SAML Identity Provider for the enterprise. When used by a GitHub App,\n  requires an installation token with read and write access to members.\n  "
    samlIdentityProvider::Union{EnterpriseIdentityProvider, Missing, Nothing}
    "\n  A list of enterprise organizations configured with the SAML single sign-on setting value.\n  "
    samlIdentityProviderSettingOrganizations::OrganizationConnection
    "\n  A list of members with a support entitlement.\n  "
    supportEntitlements::EnterpriseMemberConnection
    "\n  The setting value for whether team discussions are enabled for organizations in this enterprise.\n  "
    teamDiscussionsSetting::EnterpriseEnabledDisabledSettingValue.T
    "\n  A list of enterprise organizations configured with the provided team discussions setting value.\n  "
    teamDiscussionsSettingOrganizations::OrganizationConnection
    "\n  The setting value for whether the enterprise requires two-factor authentication for its organizations and users.\n  "
    twoFactorRequiredSetting::EnterpriseEnabledSettingValue.T
    "\n  A list of enterprise organizations configured with the two-factor authentication setting value.\n  "
    twoFactorRequiredSettingOrganizations::OrganizationConnection
end
function EnterpriseOwnerInfo(; admins, affiliatedUsersWithTwoFactorDisabled, affiliatedUsersWithTwoFactorDisabledExist, allowPrivateRepositoryForkingSetting, allowPrivateRepositoryForkingSettingOrganizations, allowPrivateRepositoryForkingSettingPolicyValue = nothing, defaultRepositoryPermissionSetting, defaultRepositoryPermissionSettingOrganizations, domains, enterpriseServerInstallations, ipAllowListEnabledSetting, ipAllowListEntries, ipAllowListForInstalledAppsEnabledSetting, isUpdatingDefaultRepositoryPermission, isUpdatingTwoFactorRequirement, membersCanChangeRepositoryVisibilitySetting, membersCanChangeRepositoryVisibilitySettingOrganizations, membersCanCreateInternalRepositoriesSetting = nothing, membersCanCreatePrivateRepositoriesSetting = nothing, membersCanCreatePublicRepositoriesSetting = nothing, membersCanCreateRepositoriesSetting = nothing, membersCanCreateRepositoriesSettingOrganizations, membersCanDeleteIssuesSetting, membersCanDeleteIssuesSettingOrganizations, membersCanDeleteRepositoriesSetting, membersCanDeleteRepositoriesSettingOrganizations, membersCanInviteCollaboratorsSetting, membersCanInviteCollaboratorsSettingOrganizations, membersCanMakePurchasesSetting, membersCanUpdateProtectedBranchesSetting, membersCanUpdateProtectedBranchesSettingOrganizations, membersCanViewDependencyInsightsSetting, membersCanViewDependencyInsightsSettingOrganizations, notificationDeliveryRestrictionEnabledSetting, oidcProvider = nothing, organizationProjectsSetting, organizationProjectsSettingOrganizations, outsideCollaborators, pendingAdminInvitations, pendingCollaboratorInvitations, pendingMemberInvitations, repositoryProjectsSetting, repositoryProjectsSettingOrganizations, samlIdentityProvider = nothing, samlIdentityProviderSettingOrganizations, supportEntitlements, teamDiscussionsSetting, teamDiscussionsSettingOrganizations, twoFactorRequiredSetting, twoFactorRequiredSettingOrganizations)
    EnterpriseOwnerInfo(admins, affiliatedUsersWithTwoFactorDisabled, affiliatedUsersWithTwoFactorDisabledExist, allowPrivateRepositoryForkingSetting, allowPrivateRepositoryForkingSettingOrganizations, allowPrivateRepositoryForkingSettingPolicyValue, defaultRepositoryPermissionSetting, defaultRepositoryPermissionSettingOrganizations, domains, enterpriseServerInstallations, ipAllowListEnabledSetting, ipAllowListEntries, ipAllowListForInstalledAppsEnabledSetting, isUpdatingDefaultRepositoryPermission, isUpdatingTwoFactorRequirement, membersCanChangeRepositoryVisibilitySetting, membersCanChangeRepositoryVisibilitySettingOrganizations, membersCanCreateInternalRepositoriesSetting, membersCanCreatePrivateRepositoriesSetting, membersCanCreatePublicRepositoriesSetting, membersCanCreateRepositoriesSetting, membersCanCreateRepositoriesSettingOrganizations, membersCanDeleteIssuesSetting, membersCanDeleteIssuesSettingOrganizations, membersCanDeleteRepositoriesSetting, membersCanDeleteRepositoriesSettingOrganizations, membersCanInviteCollaboratorsSetting, membersCanInviteCollaboratorsSettingOrganizations, membersCanMakePurchasesSetting, membersCanUpdateProtectedBranchesSetting, membersCanUpdateProtectedBranchesSettingOrganizations, membersCanViewDependencyInsightsSetting, membersCanViewDependencyInsightsSettingOrganizations, notificationDeliveryRestrictionEnabledSetting, oidcProvider, organizationProjectsSetting, organizationProjectsSettingOrganizations, outsideCollaborators, pendingAdminInvitations, pendingCollaboratorInvitations, pendingMemberInvitations, repositoryProjectsSetting, repositoryProjectsSettingOrganizations, samlIdentityProvider, samlIdentityProviderSettingOrganizations, supportEntitlements, teamDiscussionsSetting, teamDiscussionsSettingOrganizations, twoFactorRequiredSetting, twoFactorRequiredSettingOrganizations)
end
function Base.getproperty(t::EnterpriseOwnerInfo, sym::Symbol)
    if sym === Symbol("domains")
        getfield(t, Symbol("domains"))::VerifiableDomainConnection
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::EnterpriseOwnerInfo, sym::Symbol, val::Any)
    if sym === Symbol("domains")
        setfield!(t, Symbol("domains"), val::VerifiableDomainConnection)
    else
        setfield!(t, sym, val)
    end
end

"""
An account to manage multiple organizations with consolidated policy and billing.
"""
mutable struct Enterprise <: OfficialGithubSchema
    "\n  A URL pointing to the enterprise's public avatar.\n  "
    avatarUrl::URI
    "\n  Enterprise billing information visible to enterprise billing managers.\n  "
    billingInfo::Union{EnterpriseBillingInfo, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The description of the enterprise.\n  "
    description::Union{String, Missing, Nothing}
    "\n  The description of the enterprise as HTML.\n  "
    descriptionHTML::HTML
    id::String
    "\n  The location of the enterprise.\n  "
    location::Union{String, Missing, Nothing}
    "\n  A list of users who are members of this enterprise.\n  "
    members::EnterpriseMemberConnection
    "\n  The name of the enterprise.\n  "
    name::String
    "\n  A list of organizations that belong to this enterprise.\n  "
    organizations::OrganizationConnection
    "\n  Enterprise information only visible to enterprise owners.\n  "
    ownerInfo::Union{EnterpriseOwnerInfo, Missing, Nothing}
    "\n  The HTTP path for this enterprise.\n  "
    resourcePath::URI
    "\n  The URL-friendly identifier for the enterprise.\n  "
    slug::String
    "\n  The HTTP URL for this enterprise.\n  "
    url::URI
    "\n  Is the current viewer an admin of this enterprise?\n  "
    viewerIsAdmin::Bool
    "\n  The URL of the enterprise website.\n  "
    websiteUrl::Union{URI, Missing, Nothing}
end
function Enterprise(; avatarUrl, billingInfo = nothing, createdAt, databaseId = nothing, description = nothing, descriptionHTML, id, location = nothing, members, name, organizations, ownerInfo = nothing, resourcePath, slug, url, viewerIsAdmin, websiteUrl = nothing)
    Enterprise(avatarUrl, billingInfo, createdAt, databaseId, description, descriptionHTML, id, location, members, name, organizations, ownerInfo, resourcePath, slug, url, viewerIsAdmin, websiteUrl)
end

Core.@doc "Types that can own a verifiable domain." const VerifiableDomainOwner = Union{Enterprise, Organization}

"""
A domain that can be verified or approved for an organization or an enterprise.
"""
mutable struct VerifiableDomain <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The DNS host name that should be used for verification.\n  "
    dnsHostName::Union{URI, Missing, Nothing}
    "\n  The unicode encoded domain.\n  "
    domain::URI
    "\n  Whether a TXT record for verification with the expected host name was found.\n  "
    hasFoundHostName::Bool
    "\n  Whether a TXT record for verification with the expected verification token was found.\n  "
    hasFoundVerificationToken::Bool
    id::String
    "\n  Whether or not the domain is approved.\n  "
    isApproved::Bool
    "\n  Whether this domain is required to exist for an organization or enterprise policy to be enforced.\n  "
    isRequiredForPolicyEnforcement::Bool
    "\n  Whether or not the domain is verified.\n  "
    isVerified::Bool
    "\n  The owner of the domain.\n  "
    owner::VerifiableDomainOwner
    "\n  The punycode encoded domain.\n  "
    punycodeEncodedDomain::URI
    "\n  The time that the current verification token will expire.\n  "
    tokenExpirationTime::Union{DateTime, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The current verification token for the domain.\n  "
    verificationToken::Union{String, Missing, Nothing}
end
function VerifiableDomain(; createdAt, databaseId = nothing, dnsHostName = nothing, domain, hasFoundHostName, hasFoundVerificationToken, id, isApproved, isRequiredForPolicyEnforcement, isVerified, owner, punycodeEncodedDomain, tokenExpirationTime = nothing, updatedAt, verificationToken = nothing)
    VerifiableDomain(createdAt, databaseId, dnsHostName, domain, hasFoundHostName, hasFoundVerificationToken, id, isApproved, isRequiredForPolicyEnforcement, isVerified, owner, punycodeEncodedDomain, tokenExpirationTime, updatedAt, verificationToken)
end

"""
An edge in a connection.
"""
mutable struct VerifiableDomainEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{VerifiableDomain, Missing, Nothing}
end
function VerifiableDomainEdge(; cursor, node = nothing)
    VerifiableDomainEdge(cursor, node)
end

"""
The connection type for VerifiableDomain.
"""
mutable struct VerifiableDomainConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{VerifiableDomainEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{VerifiableDomain, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function VerifiableDomainConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    VerifiableDomainConnection(edges, nodes, pageInfo, totalCount)
end

"""
A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
"""
mutable struct SponsorsGoal <: OfficialGithubSchema
    "\n  A description of the goal from the maintainer.\n  "
    description::Union{String, Missing, Nothing}
    "\n  What the objective of this goal is.\n  "
    kind::SponsorsGoalKind.T
    "\n  The percentage representing how complete this goal is, between 0-100.\n  "
    percentComplete::Int
    "\n  What the goal amount is. Represents an amount in USD for monthly sponsorship\n  amount goals. Represents a count of unique sponsors for total sponsors count goals.\n  "
    targetValue::Int
    "\n  A brief summary of the kind and target value of this goal.\n  "
    title::String
end
function SponsorsGoal(; description = nothing, kind, percentComplete, targetValue, title)
    SponsorsGoal(description, kind, percentComplete, targetValue, title)
end

"""
A record that is promoted on a GitHub Sponsors profile.
"""
mutable struct SponsorsListingFeaturedItem <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Will either be a description from the sponsorable maintainer about why they\n  featured this item, or the item's description itself, such as a user's bio\n  from their GitHub profile page.\n  "
    description::Union{String, Missing, Nothing}
    id::String
    "\n  The position of this featured item on the GitHub Sponsors profile with a lower\n  position indicating higher precedence. Starts at 1.\n  "
    position::Int
    sponsorsListing
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function SponsorsListingFeaturedItem(; createdAt, description = nothing, id, position, sponsorsListing, updatedAt)
    SponsorsListingFeaturedItem(createdAt, description, id, position, sponsorsListing, updatedAt)
end
function Base.getproperty(t::SponsorsListingFeaturedItem, sym::Symbol)
    if sym === Symbol("sponsorsListing")
        getfield(t, Symbol("sponsorsListing"))::SponsorsListing
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::SponsorsListingFeaturedItem, sym::Symbol, val::Any)
    if sym === Symbol("sponsorsListing")
        setfield!(t, Symbol("sponsorsListing"), val::SponsorsListing)
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Entities that can sponsor others via GitHub Sponsors" const Sponsor = Union{Organization, User}

"""
A sponsorship relationship between a sponsor and a maintainer
"""
mutable struct Sponsorship <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Whether this sponsorship represents a one-time payment versus a recurring sponsorship.\n  "
    isOneTimePayment::Bool
    "\n  Check if the sponsor has chosen to receive sponsorship update emails sent from\n  the sponsorable. Only returns a non-null value when the viewer has permission to know this.\n  "
    isSponsorOptedIntoEmail::Union{Bool, Missing, Nothing}
    maintainer
    "\n  The privacy level for this sponsorship.\n  "
    privacyLevel::SponsorshipPrivacy.T
    sponsor
    "\n  The user or organization that is sponsoring, if you have permission to view them.\n  "
    sponsorEntity::Union{Sponsor, Missing, Nothing}
    "\n  The entity that is being sponsored\n  "
    sponsorable::Sponsorable
    tier
    "\n  Identifies the date and time when the current tier was chosen for this sponsorship.\n  "
    tierSelectedAt::Union{DateTime, Missing, Nothing}
end
function Sponsorship(; createdAt, id, isOneTimePayment, isSponsorOptedIntoEmail = nothing, maintainer, privacyLevel, sponsor = nothing, sponsorEntity = nothing, sponsorable, tier = nothing, tierSelectedAt = nothing)
    Sponsorship(createdAt, id, isOneTimePayment, isSponsorOptedIntoEmail, maintainer, privacyLevel, sponsor, sponsorEntity, sponsorable, tier, tierSelectedAt)
end
function Base.getproperty(t::Sponsorship, sym::Symbol)
    if sym === Symbol("maintainer")
        getfield(t, Symbol("maintainer"))::User
    elseif sym === Symbol("sponsor")
        getfield(t, Symbol("sponsor"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("tier")
        getfield(t, Symbol("tier"))::Union{SponsorsTier, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Sponsorship, sym::Symbol, val::Any)
    if sym === Symbol("maintainer")
        setfield!(t, Symbol("maintainer"), val::User)
    elseif sym === Symbol("sponsor")
        setfield!(t, Symbol("sponsor"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("tier")
        setfield!(t, Symbol("tier"), val::Union{SponsorsTier, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct SponsorshipEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Sponsorship, Missing, Nothing}
end
function SponsorshipEdge(; cursor, node = nothing)
    SponsorshipEdge(cursor, node)
end

"""
The connection type for Sponsorship.
"""
mutable struct SponsorshipConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{SponsorshipEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Sponsorship, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
    "\n  The total amount in cents of all recurring sponsorships in the connection\n  whose amount you can view. Does not include one-time sponsorships.\n  "
    totalRecurringMonthlyPriceInCents::Int
    "\n  The total amount in USD of all recurring sponsorships in the connection whose\n  amount you can view. Does not include one-time sponsorships.\n  "
    totalRecurringMonthlyPriceInDollars::Int
end
function SponsorshipConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount, totalRecurringMonthlyPriceInCents, totalRecurringMonthlyPriceInDollars)
    SponsorshipConnection(edges, nodes, pageInfo, totalCount, totalRecurringMonthlyPriceInCents, totalRecurringMonthlyPriceInDollars)
end

"""
SponsorsTier information only visible to users that can administer the associated Sponsors listing.
"""
mutable struct SponsorsTierAdminInfo <: OfficialGithubSchema
    "\n  The sponsorships associated with this tier.\n  "
    sponsorships::SponsorshipConnection
end
function SponsorsTierAdminInfo(; sponsorships)
    SponsorsTierAdminInfo(sponsorships)
end

"""
A GitHub Sponsors tier associated with a GitHub Sponsors listing.
"""
mutable struct SponsorsTier <: OfficialGithubSchema
    "\n  SponsorsTier information only visible to users that can administer the associated Sponsors listing.\n  "
    adminInfo::Union{SponsorsTierAdminInfo, Missing, Nothing}
    "\n  Get a different tier for this tier's maintainer that is at the same frequency\n  as this tier but with an equal or lesser cost. Returns the published tier with\n  the monthly price closest to this tier's without going over.\n  "
    closestLesserValueTier::Union{SponsorsTier, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The description of the tier.\n  "
    description::String
    "\n  The tier description rendered to HTML\n  "
    descriptionHTML::HTML
    id::String
    "\n  Whether this tier was chosen at checkout time by the sponsor rather than\n  defined ahead of time by the maintainer who manages the Sponsors listing.\n  "
    isCustomAmount::Bool
    "\n  Whether this tier is only for use with one-time sponsorships.\n  "
    isOneTime::Bool
    "\n  How much this tier costs per month in cents.\n  "
    monthlyPriceInCents::Int
    "\n  How much this tier costs per month in USD.\n  "
    monthlyPriceInDollars::Int
    "\n  The name of the tier.\n  "
    name::String
    sponsorsListing
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function SponsorsTier(; adminInfo = nothing, closestLesserValueTier = nothing, createdAt, description, descriptionHTML, id, isCustomAmount, isOneTime, monthlyPriceInCents, monthlyPriceInDollars, name, sponsorsListing, updatedAt)
    SponsorsTier(adminInfo, closestLesserValueTier, createdAt, description, descriptionHTML, id, isCustomAmount, isOneTime, monthlyPriceInCents, monthlyPriceInDollars, name, sponsorsListing, updatedAt)
end
function Base.getproperty(t::SponsorsTier, sym::Symbol)
    if sym === Symbol("sponsorsListing")
        getfield(t, Symbol("sponsorsListing"))::SponsorsListing
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::SponsorsTier, sym::Symbol, val::Any)
    if sym === Symbol("sponsorsListing")
        setfield!(t, Symbol("sponsorsListing"), val::SponsorsListing)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct SponsorsTierEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{SponsorsTier, Missing, Nothing}
end
function SponsorsTierEdge(; cursor, node = nothing)
    SponsorsTierEdge(cursor, node)
end

"""
The connection type for SponsorsTier.
"""
mutable struct SponsorsTierConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{SponsorsTierEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{SponsorsTier, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function SponsorsTierConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    SponsorsTierConnection(edges, nodes, pageInfo, totalCount)
end

"""
A GitHub Sponsors listing.
"""
mutable struct SponsorsListing <: OfficialGithubSchema
    "\n  The current goal the maintainer is trying to reach with GitHub Sponsors, if any.\n  "
    activeGoal::Union{SponsorsGoal, Missing, Nothing}
    "\n  The name of the country or region with the maintainer's bank account or fiscal\n  host. Will only return a value when queried by the maintainer themselves, or\n  by an admin of the sponsorable organization.\n  "
    billingCountryOrRegion::Union{String, Missing, Nothing}
    "\n  The email address used by GitHub to contact the sponsorable about their GitHub\n  Sponsors profile. Will only return a value when queried by the maintainer\n  themselves, or by an admin of the sponsorable organization.\n  "
    contactEmailAddress::Union{String, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The HTTP path for the Sponsors dashboard for this Sponsors listing.\n  "
    dashboardResourcePath::URI
    "\n  The HTTP URL for the Sponsors dashboard for this Sponsors listing.\n  "
    dashboardUrl::URI
    "\n  The records featured on the GitHub Sponsors profile.\n  "
    featuredItems::Vector{SponsorsListingFeaturedItem}
    "\n  The full description of the listing.\n  "
    fullDescription::String
    "\n  The full description of the listing rendered to HTML.\n  "
    fullDescriptionHTML::HTML
    id::String
    "\n  Whether this listing is publicly visible.\n  "
    isPublic::Bool
    "\n  The listing's full name.\n  "
    name::String
    "\n  A future date on which this listing is eligible to receive a payout.\n  "
    nextPayoutDate::Union{Date, Missing, Nothing}
    "\n  The name of the country or region where the maintainer resides. Will only\n  return a value when queried by the maintainer themselves, or by an admin of\n  the sponsorable organization.\n  "
    residenceCountryOrRegion::Union{String, Missing, Nothing}
    "\n  The HTTP path for this Sponsors listing.\n  "
    resourcePath::URI
    "\n  The short description of the listing.\n  "
    shortDescription::String
    "\n  The short name of the listing.\n  "
    slug::String
    "\n  The entity this listing represents who can be sponsored on GitHub Sponsors.\n  "
    sponsorable::Sponsorable
    "\n  The published tiers for this GitHub Sponsors listing.\n  "
    tiers::Union{SponsorsTierConnection, Missing, Nothing}
    "\n  The HTTP URL for this Sponsors listing.\n  "
    url::URI
end
function SponsorsListing(; activeGoal = nothing, billingCountryOrRegion = nothing, contactEmailAddress = nothing, createdAt, dashboardResourcePath, dashboardUrl, featuredItems, fullDescription, fullDescriptionHTML, id, isPublic, name, nextPayoutDate = nothing, residenceCountryOrRegion = nothing, resourcePath, shortDescription, slug, sponsorable, tiers = nothing, url)
    SponsorsListing(activeGoal, billingCountryOrRegion, contactEmailAddress, createdAt, dashboardResourcePath, dashboardUrl, featuredItems, fullDescription, fullDescriptionHTML, id, isPublic, name, nextPayoutDate, residenceCountryOrRegion, resourcePath, shortDescription, slug, sponsorable, tiers, url)
end

"""
Repository interaction limit that applies to this object.
"""
mutable struct RepositoryInteractionAbility <: OfficialGithubSchema
    "\n  The time the currently active limit expires.\n  "
    expiresAt::Union{DateTime, Missing, Nothing}
    "\n  The current limit that is enabled on this object.\n  "
    limit::RepositoryInteractionLimit.T
    "\n  The origin of the currently active interaction limit.\n  "
    origin::RepositoryInteractionLimitOrigin.T
end
function RepositoryInteractionAbility(; expiresAt = nothing, limit, origin)
    RepositoryInteractionAbility(expiresAt, limit, origin)
end

"""
An edge in a connection.
"""
mutable struct GistEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
end
function GistEdge(; cursor, node = nothing)
    GistEdge(cursor, node)
end
function Base.getproperty(t::GistEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{Gist, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::GistEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{Gist, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for Gist.
"""
mutable struct GistConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{GistEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function GistConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    GistConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::GistConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{Gist, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::GistConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{Gist, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a user that's starred a repository.
"""
mutable struct StargazerEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
    "\n  Identifies when the item was starred.\n  "
    starredAt::DateTime
end
function StargazerEdge(; cursor, node, starredAt)
    StargazerEdge(cursor, node, starredAt)
end
function Base.getproperty(t::StargazerEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::StargazerEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for User.
"""
mutable struct StargazerConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{StargazerEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function StargazerConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    StargazerConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::StargazerConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::StargazerConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a given language found in repositories.
"""
mutable struct Language <: OfficialGithubSchema
    "\n  The color defined for the current language.\n  "
    color::Union{String, Missing, Nothing}
    id::String
    "\n  The name of the current language.\n  "
    name::String
end
function Language(; color = nothing, id, name)
    Language(color, id, name)
end

"""
A file in a gist.
"""
mutable struct GistFile <: OfficialGithubSchema
    "\n  The file name encoded to remove characters that are invalid in URL paths.\n  "
    encodedName::Union{String, Missing, Nothing}
    "\n  The gist file encoding.\n  "
    encoding::Union{String, Missing, Nothing}
    "\n  The file extension from the file name.\n  "
    extension::Union{String, Missing, Nothing}
    "\n  Indicates if this file is an image.\n  "
    isImage::Bool
    "\n  Whether the file's contents were truncated.\n  "
    isTruncated::Bool
    "\n  The programming language this file is written in.\n  "
    language::Union{Language, Missing, Nothing}
    "\n  The gist file name.\n  "
    name::Union{String, Missing, Nothing}
    "\n  The gist file size in bytes.\n  "
    size::Union{Int, Missing, Nothing}
    "\n  UTF8 text data or null if the file is binary\n  "
    text::Union{String, Missing, Nothing}
end
function GistFile(; encodedName = nothing, encoding = nothing, extension = nothing, isImage, isTruncated, language = nothing, name = nothing, size = nothing, text = nothing)
    GistFile(encodedName, encoding, extension, isImage, isTruncated, language, name, size, text)
end

"""
An edit on user content
"""
mutable struct UserContentEdit <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the date and time when the object was deleted.\n  "
    deletedAt::Union{DateTime, Missing, Nothing}
    "\n  The actor who deleted this content\n  "
    deletedBy::Union{Actor, Missing, Nothing}
    "\n  A summary of the changes for this edit\n  "
    diff::Union{String, Missing, Nothing}
    "\n  When this content was edited\n  "
    editedAt::DateTime
    "\n  The actor who edited this content\n  "
    editor::Union{Actor, Missing, Nothing}
    id::String
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function UserContentEdit(; createdAt, deletedAt = nothing, deletedBy = nothing, diff = nothing, editedAt, editor = nothing, id, updatedAt)
    UserContentEdit(createdAt, deletedAt, deletedBy, diff, editedAt, editor, id, updatedAt)
end

"""
An edge in a connection.
"""
mutable struct UserContentEditEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{UserContentEdit, Missing, Nothing}
end
function UserContentEditEdge(; cursor, node = nothing)
    UserContentEditEdge(cursor, node)
end

"""
A list of edits to content.
"""
mutable struct UserContentEditConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{UserContentEditEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{UserContentEdit, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function UserContentEditConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    UserContentEditConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a comment on an Gist.
"""
mutable struct GistComment <: OfficialGithubSchema
    "\n  The actor who authored the comment.\n  "
    author::Union{Actor, Missing, Nothing}
    "\n  Author's association with the gist.\n  "
    authorAssociation::CommentAuthorAssociation.T
    "\n  Identifies the comment body.\n  "
    body::String
    "\n  The body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  The body rendered to text.\n  "
    bodyText::String
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Check if this comment was created via an email reply.\n  "
    createdViaEmail::Bool
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The actor who edited the comment.\n  "
    editor::Union{Actor, Missing, Nothing}
    gist
    id::String
    "\n  Check if this comment was edited and includes an edit with the creation data\n  "
    includesCreatedEdit::Bool
    "\n  Returns whether or not a comment has been minimized.\n  "
    isMinimized::Bool
    "\n  The moment the editor made the last edit\n  "
    lastEditedAt::Union{DateTime, Missing, Nothing}
    "\n  Returns why the comment was minimized. One of `abuse`, `off-topic`,\n  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\n  formatting of these values differs from the inputs to the `MinimizeComment` mutation.\n  "
    minimizedReason::Union{String, Missing, Nothing}
    "\n  Identifies when the comment was published at.\n  "
    publishedAt::Union{DateTime, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  A list of edits to this content.\n  "
    userContentEdits::Union{UserContentEditConnection, Missing, Nothing}
    "\n  Check if the current viewer can delete this object.\n  "
    viewerCanDelete::Bool
    "\n  Check if the current viewer can minimize this object.\n  "
    viewerCanMinimize::Bool
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  Reasons why the current viewer can not update this comment.\n  "
    viewerCannotUpdateReasons::Vector{CommentCannotUpdateReason.T}
    "\n  Did the viewer author this comment.\n  "
    viewerDidAuthor::Bool
end
function GistComment(; author = nothing, authorAssociation, body, bodyHTML, bodyText, createdAt, createdViaEmail, databaseId = nothing, editor = nothing, gist, id, includesCreatedEdit, isMinimized, lastEditedAt = nothing, minimizedReason = nothing, publishedAt = nothing, updatedAt, userContentEdits = nothing, viewerCanDelete, viewerCanMinimize, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor)
    GistComment(author, authorAssociation, body, bodyHTML, bodyText, createdAt, createdViaEmail, databaseId, editor, gist, id, includesCreatedEdit, isMinimized, lastEditedAt, minimizedReason, publishedAt, updatedAt, userContentEdits, viewerCanDelete, viewerCanMinimize, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor)
end
function Base.getproperty(t::GistComment, sym::Symbol)
    if sym === Symbol("gist")
        getfield(t, Symbol("gist"))::Gist
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::GistComment, sym::Symbol, val::Any)
    if sym === Symbol("gist")
        setfield!(t, Symbol("gist"), val::Gist)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct GistCommentEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{GistComment, Missing, Nothing}
end
function GistCommentEdge(; cursor, node = nothing)
    GistCommentEdge(cursor, node)
end

"""
The connection type for GistComment.
"""
mutable struct GistCommentConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{GistCommentEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{GistComment, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function GistCommentConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    GistCommentConnection(edges, nodes, pageInfo, totalCount)
end

"""
A Gist.
"""
mutable struct Gist <: OfficialGithubSchema
    "\n  A list of comments associated with the gist\n  "
    comments::GistCommentConnection
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The gist description.\n  "
    description::Union{String, Missing, Nothing}
    "\n  The files in this gist.\n  "
    files::Union{Vector{Union{GistFile, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of forks associated with the gist\n  "
    forks::GistConnection
    id::String
    "\n  Identifies if the gist is a fork.\n  "
    isFork::Bool
    "\n  Whether the gist is public or not.\n  "
    isPublic::Bool
    "\n  The gist name.\n  "
    name::String
    "\n  The gist owner.\n  "
    owner::Union{RepositoryOwner, Missing, Nothing}
    "\n  Identifies when the gist was last pushed to.\n  "
    pushedAt::Union{DateTime, Missing, Nothing}
    "\n  The HTML path to this resource.\n  "
    resourcePath::URI
    "\n  Returns a count of how many stargazers there are on this object\n  "
    stargazerCount::Int
    "\n  A list of users who have starred this starrable.\n  "
    stargazers::StargazerConnection
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this Gist.\n  "
    url::URI
    "\n  Returns a boolean indicating whether the viewing user has starred this starrable.\n  "
    viewerHasStarred::Bool
end
function Gist(; comments, createdAt, description = nothing, files = nothing, forks, id, isFork, isPublic, name, owner = nothing, pushedAt = nothing, resourcePath, stargazerCount, stargazers, updatedAt, url, viewerHasStarred)
    Gist(comments, createdAt, description, files, forks, id, isFork, isPublic, name, owner, pushedAt, resourcePath, stargazerCount, stargazers, updatedAt, url, viewerHasStarred)
end

Core.@doc "Types that can be pinned to a profile page." const PinnableItem = Union{Gist, Repository}

"""
An edge in a connection.
"""
mutable struct PinnableItemEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PinnableItem, Missing, Nothing}
end
function PinnableItemEdge(; cursor, node = nothing)
    PinnableItemEdge(cursor, node)
end

"""
The connection type for PinnableItem.
"""
mutable struct PinnableItemConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PinnableItemEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PinnableItem, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PinnableItemConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PinnableItemConnection(edges, nodes, pageInfo, totalCount)
end

"""
A curatable list of repositories relating to a repository owner, which defaults
to showing the most popular repositories they own.
"""
mutable struct ProfileItemShowcase <: OfficialGithubSchema
    "\n  Whether or not the owner has pinned any repositories or gists.\n  "
    hasPinnedItems::Bool
    "\n  The repositories and gists in the showcase. If the profile owner has any\n  pinned items, those will be returned. Otherwise, the profile owner's popular\n  repositories will be returned.\n  "
    items::PinnableItemConnection
end
function ProfileItemShowcase(; hasPinnedItems, items)
    ProfileItemShowcase(hasPinnedItems, items)
end

"""
A field inside a project.
"""
mutable struct ProjectNextField <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The field's type.\n  "
    dataType::ProjectNextFieldType.T
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The project field's name.\n  "
    name::String
    project
    "\n  The field's settings.\n  "
    settings::Union{String, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function ProjectNextField(; createdAt, dataType, databaseId = nothing, id, name, project, settings = nothing, updatedAt)
    ProjectNextField(createdAt, dataType, databaseId, id, name, project, settings, updatedAt)
end
function Base.getproperty(t::ProjectNextField, sym::Symbol)
    if sym === Symbol("project")
        getfield(t, Symbol("project"))::ProjectNext
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectNextField, sym::Symbol, val::Any)
    if sym === Symbol("project")
        setfield!(t, Symbol("project"), val::ProjectNext)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct ProjectNextFieldEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectNextField, Missing, Nothing}
end
function ProjectNextFieldEdge(; cursor, node = nothing)
    ProjectNextFieldEdge(cursor, node)
end

"""
The connection type for ProjectNextField.
"""
mutable struct ProjectNextFieldConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectNextFieldEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectNextField, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectNextFieldConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectNextFieldConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a sort by field and direction.
"""
mutable struct SortBy <: OfficialGithubSchema
    "\n  The direction of the sorting. Possible values are ASC and DESC.\n  "
    direction::OrderDirection.T
    "\n  The id of the field by which the column is sorted.\n  "
    field::Int
end
function SortBy(; direction, field)
    SortBy(direction, field)
end

"""
A view within a Project.
"""
mutable struct ProjectView <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The project view's filter.\n  "
    filter::Union{String, Missing, Nothing}
    "\n  The view's group-by field.\n  "
    groupBy::Union{Vector{Int}, Missing, Nothing}
    id::String
    "\n  The project view's layout.\n  "
    layout::ProjectViewLayout.T
    "\n  The project view's name.\n  "
    name::String
    "\n  The project view's number.\n  "
    number::Int
    project
    "\n  The view's sort-by config.\n  "
    sortBy::Union{Vector{SortBy}, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The view's vertical-group-by field.\n  "
    verticalGroupBy::Union{Vector{Int}, Missing, Nothing}
    "\n  The view's visible fields.\n  "
    visibleFields::Union{Vector{Int}, Missing, Nothing}
end
function ProjectView(; createdAt, databaseId = nothing, filter = nothing, groupBy = nothing, id, layout, name, number, project, sortBy = nothing, updatedAt, verticalGroupBy = nothing, visibleFields = nothing)
    ProjectView(createdAt, databaseId, filter, groupBy, id, layout, name, number, project, sortBy, updatedAt, verticalGroupBy, visibleFields)
end
function Base.getproperty(t::ProjectView, sym::Symbol)
    if sym === Symbol("project")
        getfield(t, Symbol("project"))::ProjectNext
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectView, sym::Symbol, val::Any)
    if sym === Symbol("project")
        setfield!(t, Symbol("project"), val::ProjectNext)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct ProjectViewEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectView, Missing, Nothing}
end
function ProjectViewEdge(; cursor, node = nothing)
    ProjectViewEdge(cursor, node)
end

"""
The connection type for ProjectView.
"""
mutable struct ProjectViewConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectViewEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectView, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectViewConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectViewConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents an auto-merge request for a pull request
"""
mutable struct AutoMergeRequest <: OfficialGithubSchema
    "\n  The email address of the author of this auto-merge request.\n  "
    authorEmail::Union{String, Missing, Nothing}
    "\n  The commit message of the auto-merge request. If a merge queue is required by\n  the base branch, this value will be set by the merge queue when merging.\n  "
    commitBody::Union{String, Missing, Nothing}
    "\n  The commit title of the auto-merge request. If a merge queue is required by\n  the base branch, this value will be set by the merge queue when merging\n  "
    commitHeadline::Union{String, Missing, Nothing}
    "\n  When was this auto-merge request was enabled.\n  "
    enabledAt::Union{DateTime, Missing, Nothing}
    "\n  The actor who created the auto-merge request.\n  "
    enabledBy::Union{Actor, Missing, Nothing}
    "\n  The merge method of the auto-merge request. If a merge queue is required by\n  the base branch, this value will be set by the merge queue when merging.\n  "
    mergeMethod::PullRequestMergeMethod.T
    pullRequest
end
function AutoMergeRequest(; authorEmail = nothing, commitBody = nothing, commitHeadline = nothing, enabledAt = nothing, enabledBy = nothing, mergeMethod, pullRequest)
    AutoMergeRequest(authorEmail, commitBody, commitHeadline, enabledAt, enabledBy, mergeMethod, pullRequest)
end
function Base.getproperty(t::AutoMergeRequest, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::AutoMergeRequest, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Describes the status of a given deployment attempt.
"""
mutable struct DeploymentStatus <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the actor who triggered the deployment.\n  "
    creator::Actor
    deployment
    "\n  Identifies the description of the deployment.\n  "
    description::Union{String, Missing, Nothing}
    "\n  Identifies the environment of the deployment at the time of this deployment status\n  "
    environment::Union{String, Missing, Nothing}
    "\n  Identifies the environment URL of the deployment.\n  "
    environmentUrl::Union{URI, Missing, Nothing}
    id::String
    "\n  Identifies the log URL of the deployment.\n  "
    logUrl::Union{URI, Missing, Nothing}
    "\n  Identifies the current state of the deployment.\n  "
    state::DeploymentStatusState.T
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function DeploymentStatus(; createdAt, creator, deployment, description = nothing, environment = nothing, environmentUrl = nothing, id, logUrl = nothing, state, updatedAt)
    DeploymentStatus(createdAt, creator, deployment, description, environment, environmentUrl, id, logUrl, state, updatedAt)
end
function Base.getproperty(t::DeploymentStatus, sym::Symbol)
    if sym === Symbol("deployment")
        getfield(t, Symbol("deployment"))::Deployment
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DeploymentStatus, sym::Symbol, val::Any)
    if sym === Symbol("deployment")
        setfield!(t, Symbol("deployment"), val::Deployment)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct DeploymentStatusEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{DeploymentStatus, Missing, Nothing}
end
function DeploymentStatusEdge(; cursor, node = nothing)
    DeploymentStatusEdge(cursor, node)
end

"""
The connection type for DeploymentStatus.
"""
mutable struct DeploymentStatusConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DeploymentStatusEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{DeploymentStatus, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DeploymentStatusConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DeploymentStatusConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents triggered deployment instance.
"""
mutable struct Deployment <: OfficialGithubSchema
    commit
    "\n  Identifies the oid of the deployment commit, even if the commit has been deleted.\n  "
    commitOid::String
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the actor who triggered the deployment.\n  "
    creator::Actor
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The deployment description.\n  "
    description::Union{String, Missing, Nothing}
    "\n  The latest environment to which this deployment was made.\n  "
    environment::Union{String, Missing, Nothing}
    id::String
    "\n  The latest environment to which this deployment was made.\n  "
    latestEnvironment::Union{String, Missing, Nothing}
    "\n  The latest status of this deployment.\n  "
    latestStatus::Union{DeploymentStatus, Missing, Nothing}
    "\n  The original environment to which this deployment was made.\n  "
    originalEnvironment::Union{String, Missing, Nothing}
    "\n  Extra information that a deployment system might need.\n  "
    payload::Union{String, Missing, Nothing}
    ref
    repository
    "\n  The current state of the deployment.\n  "
    state::Union{DeploymentState.T, Missing, Nothing}
    "\n  A list of statuses associated with the deployment.\n  "
    statuses::Union{DeploymentStatusConnection, Missing, Nothing}
    "\n  The deployment task.\n  "
    task::Union{String, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function Deployment(; commit = nothing, commitOid, createdAt, creator, databaseId = nothing, description = nothing, environment = nothing, id, latestEnvironment = nothing, latestStatus = nothing, originalEnvironment = nothing, payload = nothing, ref = nothing, repository, state = nothing, statuses = nothing, task = nothing, updatedAt)
    Deployment(commit, commitOid, createdAt, creator, databaseId, description, environment, id, latestEnvironment, latestStatus, originalEnvironment, payload, ref, repository, state, statuses, task, updatedAt)
end
function Base.getproperty(t::Deployment, sym::Symbol)
    if sym === Symbol("commit")
        getfield(t, Symbol("commit"))::Union{Commit, Missing, Nothing}
    elseif sym === Symbol("ref")
        getfield(t, Symbol("ref"))::Union{Ref, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Deployment, sym::Symbol, val::Any)
    if sym === Symbol("commit")
        setfield!(t, Symbol("commit"), val::Union{Commit, Missing, Nothing})
    elseif sym === Symbol("ref")
        setfield!(t, Symbol("ref"), val::Union{Ref, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct DeploymentEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Deployment, Missing, Nothing}
end
function DeploymentEdge(; cursor, node = nothing)
    DeploymentEdge(cursor, node)
end

"""
The connection type for Deployment.
"""
mutable struct DeploymentConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DeploymentEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Deployment, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DeploymentConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DeploymentConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a count of the state of a status context.
"""
mutable struct StatusContextStateCount <: OfficialGithubSchema
    "\n  The number of statuses with this state.\n  "
    count::Int
    "\n  The state of a status context.\n  "
    state::StatusState.T
end
function StatusContextStateCount(; count, state)
    StatusContextStateCount(count, state)
end

"""
Represents a count of the state of a check run.
"""
mutable struct CheckRunStateCount <: OfficialGithubSchema
    "\n  The number of check runs with this state.\n  "
    count::Int
    "\n  The state of a check run.\n  "
    state::CheckRunState.T
end
function CheckRunStateCount(; count, state)
    CheckRunStateCount(count, state)
end

"""
Represents an individual commit status context
"""
mutable struct StatusContext <: OfficialGithubSchema
    "\n  The avatar of the OAuth application or the user that created the status\n  "
    avatarUrl::Union{URI, Missing, Nothing}
    commit
    "\n  The name of this status context.\n  "
    context::String
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who created this status context.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  The description for this status context.\n  "
    description::Union{String, Missing, Nothing}
    id::String
    "\n  Whether this is required to pass before merging for a specific pull request.\n  "
    isRequired::Bool
    "\n  The state of this status context.\n  "
    state::StatusState.T
    "\n  The URL for this status context.\n  "
    targetUrl::Union{URI, Missing, Nothing}
end
function StatusContext(; avatarUrl = nothing, commit = nothing, context, createdAt, creator = nothing, description = nothing, id, isRequired, state, targetUrl = nothing)
    StatusContext(avatarUrl, commit, context, createdAt, creator, description, id, isRequired, state, targetUrl)
end
function Base.getproperty(t::StatusContext, sym::Symbol)
    if sym === Symbol("commit")
        getfield(t, Symbol("commit"))::Union{Commit, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::StatusContext, sym::Symbol, val::Any)
    if sym === Symbol("commit")
        setfield!(t, Symbol("commit"), val::Union{Commit, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct CheckRunEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
end
function CheckRunEdge(; cursor, node = nothing)
    CheckRunEdge(cursor, node)
end
function Base.getproperty(t::CheckRunEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{CheckRun, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CheckRunEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{CheckRun, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for CheckRun.
"""
mutable struct CheckRunConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CheckRunEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function CheckRunConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CheckRunConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::CheckRunConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{CheckRun, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CheckRunConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{CheckRun, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct WorkflowRunEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
end
function WorkflowRunEdge(; cursor, node = nothing)
    WorkflowRunEdge(cursor, node)
end
function Base.getproperty(t::WorkflowRunEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{WorkflowRun, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::WorkflowRunEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{WorkflowRun, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for WorkflowRun.
"""
mutable struct WorkflowRunConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{WorkflowRunEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function WorkflowRunConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    WorkflowRunConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::WorkflowRunConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{WorkflowRun, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::WorkflowRunConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{WorkflowRun, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A workflow contains meta information about an Actions workflow file.
"""
mutable struct Workflow <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The name of the workflow.\n  "
    name::String
    "\n  The runs of the workflow.\n  "
    runs::WorkflowRunConnection
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function Workflow(; createdAt, databaseId = nothing, id, name, runs, updatedAt)
    Workflow(createdAt, databaseId, id, name, runs, updatedAt)
end

"""
An edge in a connection.
"""
mutable struct OrganizationInvitationEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{OrganizationInvitation, Missing, Nothing}
end
function OrganizationInvitationEdge(; cursor, node = nothing)
    OrganizationInvitationEdge(cursor, node)
end

"""
The connection type for OrganizationInvitation.
"""
mutable struct OrganizationInvitationConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{OrganizationInvitationEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{OrganizationInvitation, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function OrganizationInvitationConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    OrganizationInvitationConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct TeamEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
end
function TeamEdge(; cursor, node = nothing)
    TeamEdge(cursor, node)
end
function Base.getproperty(t::TeamEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{Team, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{Team, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for Team.
"""
mutable struct TeamConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{TeamEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function TeamConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    TeamConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::TeamConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{Team, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{Team, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a team repository.
"""
mutable struct TeamRepositoryEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
    "\n  The permission level the team has on the repository\n  "
    permission::RepositoryPermission.T
end
function TeamRepositoryEdge(; cursor, node, permission)
    TeamRepositoryEdge(cursor, node, permission)
end
function Base.getproperty(t::TeamRepositoryEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamRepositoryEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for Repository.
"""
mutable struct TeamRepositoryConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{TeamRepositoryEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function TeamRepositoryConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    TeamRepositoryConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::TeamRepositoryConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{Repository, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamRepositoryConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{Repository, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An emoji reaction to a particular piece of content.
"""
mutable struct Reaction <: OfficialGithubSchema
    "\n  Identifies the emoji reaction.\n  "
    content::ReactionContent.T
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The reactable piece of content\n  "
    reactable::Reactable
    user
end
function Reaction(; content, createdAt, databaseId = nothing, id, reactable, user = nothing)
    Reaction(content, createdAt, databaseId, id, reactable, user)
end
function Base.getproperty(t::Reaction, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Reaction, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct ReactionEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Reaction, Missing, Nothing}
end
function ReactionEdge(; cursor, node = nothing)
    ReactionEdge(cursor, node)
end

"""
A list of reactions that have been left on the subject.
"""
mutable struct ReactionConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ReactionEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Reaction, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
    "\n  Whether or not the authenticated user has left a reaction on the subject.\n  "
    viewerHasReacted::Bool
end
function ReactionConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount, viewerHasReacted)
    ReactionConnection(edges, nodes, pageInfo, totalCount, viewerHasReacted)
end

"""
A comment on a team discussion.
"""
mutable struct TeamDiscussionComment <: OfficialGithubSchema
    "\n  The actor who authored the comment.\n  "
    author::Union{Actor, Missing, Nothing}
    "\n  Author's association with the comment's team.\n  "
    authorAssociation::CommentAuthorAssociation.T
    "\n  The body as Markdown.\n  "
    body::String
    "\n  The body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  The body rendered to text.\n  "
    bodyText::String
    "\n  The current version of the body content.\n  "
    bodyVersion::String
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Check if this comment was created via an email reply.\n  "
    createdViaEmail::Bool
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    discussion
    "\n  The actor who edited the comment.\n  "
    editor::Union{Actor, Missing, Nothing}
    id::String
    "\n  Check if this comment was edited and includes an edit with the creation data\n  "
    includesCreatedEdit::Bool
    "\n  The moment the editor made the last edit\n  "
    lastEditedAt::Union{DateTime, Missing, Nothing}
    "\n  Identifies the comment number.\n  "
    number::Int
    "\n  Identifies when the comment was published at.\n  "
    publishedAt::Union{DateTime, Missing, Nothing}
    reactionGroups
    "\n  A list of Reactions left on the Issue.\n  "
    reactions::ReactionConnection
    "\n  The HTTP path for this comment\n  "
    resourcePath::URI
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this comment\n  "
    url::URI
    "\n  A list of edits to this content.\n  "
    userContentEdits::Union{UserContentEditConnection, Missing, Nothing}
    "\n  Check if the current viewer can delete this object.\n  "
    viewerCanDelete::Bool
    "\n  Can user react to this subject\n  "
    viewerCanReact::Bool
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  Reasons why the current viewer can not update this comment.\n  "
    viewerCannotUpdateReasons::Vector{CommentCannotUpdateReason.T}
    "\n  Did the viewer author this comment.\n  "
    viewerDidAuthor::Bool
end
function TeamDiscussionComment(; author = nothing, authorAssociation, body, bodyHTML, bodyText, bodyVersion, createdAt, createdViaEmail, databaseId = nothing, discussion, editor = nothing, id, includesCreatedEdit, lastEditedAt = nothing, number, publishedAt = nothing, reactionGroups = nothing, reactions, resourcePath, updatedAt, url, userContentEdits = nothing, viewerCanDelete, viewerCanReact, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor)
    TeamDiscussionComment(author, authorAssociation, body, bodyHTML, bodyText, bodyVersion, createdAt, createdViaEmail, databaseId, discussion, editor, id, includesCreatedEdit, lastEditedAt, number, publishedAt, reactionGroups, reactions, resourcePath, updatedAt, url, userContentEdits, viewerCanDelete, viewerCanReact, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor)
end
function Base.getproperty(t::TeamDiscussionComment, sym::Symbol)
    if sym === Symbol("discussion")
        getfield(t, Symbol("discussion"))::TeamDiscussion
    elseif sym === Symbol("reactionGroups")
        getfield(t, Symbol("reactionGroups"))::Union{Vector{ReactionGroup}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamDiscussionComment, sym::Symbol, val::Any)
    if sym === Symbol("discussion")
        setfield!(t, Symbol("discussion"), val::TeamDiscussion)
    elseif sym === Symbol("reactionGroups")
        setfield!(t, Symbol("reactionGroups"), val::Union{Vector{ReactionGroup}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct TeamDiscussionCommentEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{TeamDiscussionComment, Missing, Nothing}
end
function TeamDiscussionCommentEdge(; cursor, node = nothing)
    TeamDiscussionCommentEdge(cursor, node)
end

"""
The connection type for TeamDiscussionComment.
"""
mutable struct TeamDiscussionCommentConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{TeamDiscussionCommentEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{TeamDiscussionComment, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function TeamDiscussionCommentConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    TeamDiscussionCommentConnection(edges, nodes, pageInfo, totalCount)
end

"""
A team discussion.
"""
mutable struct TeamDiscussion <: OfficialGithubSchema
    "\n  The actor who authored the comment.\n  "
    author::Union{Actor, Missing, Nothing}
    "\n  Author's association with the discussion's team.\n  "
    authorAssociation::CommentAuthorAssociation.T
    "\n  The body as Markdown.\n  "
    body::String
    "\n  The body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  The body rendered to text.\n  "
    bodyText::String
    "\n  Identifies the discussion body hash.\n  "
    bodyVersion::String
    "\n  A list of comments on this discussion.\n  "
    comments::TeamDiscussionCommentConnection
    "\n  The HTTP path for discussion comments\n  "
    commentsResourcePath::URI
    "\n  The HTTP URL for discussion comments\n  "
    commentsUrl::URI
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Check if this comment was created via an email reply.\n  "
    createdViaEmail::Bool
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The actor who edited the comment.\n  "
    editor::Union{Actor, Missing, Nothing}
    id::String
    "\n  Check if this comment was edited and includes an edit with the creation data\n  "
    includesCreatedEdit::Bool
    "\n  Whether or not the discussion is pinned.\n  "
    isPinned::Bool
    "\n  Whether or not the discussion is only visible to team members and org admins.\n  "
    isPrivate::Bool
    "\n  The moment the editor made the last edit\n  "
    lastEditedAt::Union{DateTime, Missing, Nothing}
    "\n  Identifies the discussion within its team.\n  "
    number::Int
    "\n  Identifies when the comment was published at.\n  "
    publishedAt::Union{DateTime, Missing, Nothing}
    reactionGroups
    "\n  A list of Reactions left on the Issue.\n  "
    reactions::ReactionConnection
    "\n  The HTTP path for this discussion\n  "
    resourcePath::URI
    team
    "\n  The title of the discussion\n  "
    title::String
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this discussion\n  "
    url::URI
    "\n  A list of edits to this content.\n  "
    userContentEdits::Union{UserContentEditConnection, Missing, Nothing}
    "\n  Check if the current viewer can delete this object.\n  "
    viewerCanDelete::Bool
    "\n  Whether or not the current viewer can pin this discussion.\n  "
    viewerCanPin::Bool
    "\n  Can user react to this subject\n  "
    viewerCanReact::Bool
    "\n  Check if the viewer is able to change their subscription status for the repository.\n  "
    viewerCanSubscribe::Bool
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  Reasons why the current viewer can not update this comment.\n  "
    viewerCannotUpdateReasons::Vector{CommentCannotUpdateReason.T}
    "\n  Did the viewer author this comment.\n  "
    viewerDidAuthor::Bool
    "\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  "
    viewerSubscription::Union{SubscriptionState.T, Missing, Nothing}
end
function TeamDiscussion(; author = nothing, authorAssociation, body, bodyHTML, bodyText, bodyVersion, comments, commentsResourcePath, commentsUrl, createdAt, createdViaEmail, databaseId = nothing, editor = nothing, id, includesCreatedEdit, isPinned, isPrivate, lastEditedAt = nothing, number, publishedAt = nothing, reactionGroups = nothing, reactions, resourcePath, team, title, updatedAt, url, userContentEdits = nothing, viewerCanDelete, viewerCanPin, viewerCanReact, viewerCanSubscribe, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor, viewerSubscription = nothing)
    TeamDiscussion(author, authorAssociation, body, bodyHTML, bodyText, bodyVersion, comments, commentsResourcePath, commentsUrl, createdAt, createdViaEmail, databaseId, editor, id, includesCreatedEdit, isPinned, isPrivate, lastEditedAt, number, publishedAt, reactionGroups, reactions, resourcePath, team, title, updatedAt, url, userContentEdits, viewerCanDelete, viewerCanPin, viewerCanReact, viewerCanSubscribe, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor, viewerSubscription)
end
function Base.getproperty(t::TeamDiscussion, sym::Symbol)
    if sym === Symbol("reactionGroups")
        getfield(t, Symbol("reactionGroups"))::Union{Vector{ReactionGroup}, Missing, Nothing}
    elseif sym === Symbol("team")
        getfield(t, Symbol("team"))::Team
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamDiscussion, sym::Symbol, val::Any)
    if sym === Symbol("reactionGroups")
        setfield!(t, Symbol("reactionGroups"), val::Union{Vector{ReactionGroup}, Missing, Nothing})
    elseif sym === Symbol("team")
        setfield!(t, Symbol("team"), val::Team)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct TeamDiscussionEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{TeamDiscussion, Missing, Nothing}
end
function TeamDiscussionEdge(; cursor, node = nothing)
    TeamDiscussionEdge(cursor, node)
end

"""
The connection type for TeamDiscussion.
"""
mutable struct TeamDiscussionConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{TeamDiscussionEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{TeamDiscussion, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function TeamDiscussionConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    TeamDiscussionConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct ProjectV2Edge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
end
function ProjectV2Edge(; cursor, node = nothing)
    ProjectV2Edge(cursor, node)
end
function Base.getproperty(t::ProjectV2Edge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{ProjectV2, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2Edge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{ProjectV2, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for ProjectV2.
"""
mutable struct ProjectV2Connection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectV2Edge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectV2Connection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectV2Connection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::ProjectV2Connection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{ProjectV2, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2Connection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{ProjectV2, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a user who is a member of a team.
"""
mutable struct TeamMemberEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The HTTP path to the organization's member access page.\n  "
    memberAccessResourcePath::URI
    "\n  The HTTP URL to the organization's member access page.\n  "
    memberAccessUrl::URI
    node
    "\n  The role the member has on the team.\n  "
    role::TeamMemberRole.T
end
function TeamMemberEdge(; cursor, memberAccessResourcePath, memberAccessUrl, node, role)
    TeamMemberEdge(cursor, memberAccessResourcePath, memberAccessUrl, node, role)
end
function Base.getproperty(t::TeamMemberEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamMemberEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for User.
"""
mutable struct TeamMemberConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{TeamMemberEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function TeamMemberConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    TeamMemberConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::TeamMemberConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamMemberConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A team of users in an organization.
"""
mutable struct Team <: OfficialGithubSchema
    "\n  A list of teams that are ancestors of this team.\n  "
    ancestors::TeamConnection
    "\n  A URL pointing to the team's avatar.\n  "
    avatarUrl::Union{URI, Missing, Nothing}
    "\n  List of child teams belonging to this team\n  "
    childTeams::TeamConnection
    "\n  The slug corresponding to the organization and team.\n  "
    combinedSlug::String
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The description of the team.\n  "
    description::Union{String, Missing, Nothing}
    "\n  Find a team discussion by its number.\n  "
    discussion::Union{TeamDiscussion, Missing, Nothing}
    "\n  A list of team discussions.\n  "
    discussions::TeamDiscussionConnection
    "\n  The HTTP path for team discussions\n  "
    discussionsResourcePath::URI
    "\n  The HTTP URL for team discussions\n  "
    discussionsUrl::URI
    "\n  The HTTP path for editing this team\n  "
    editTeamResourcePath::URI
    "\n  The HTTP URL for editing this team\n  "
    editTeamUrl::URI
    id::String
    "\n  A list of pending invitations for users to this team\n  "
    invitations::Union{OrganizationInvitationConnection, Missing, Nothing}
    "\n  Get the status messages members of this entity have set that are either public or visible only to the organization.\n  "
    memberStatuses::UserStatusConnection
    "\n  A list of users who are members of this team.\n  "
    members::TeamMemberConnection
    "\n  The HTTP path for the team' members\n  "
    membersResourcePath::URI
    "\n  The HTTP URL for the team' members\n  "
    membersUrl::URI
    "\n  The name of the team.\n  "
    name::String
    "\n  The HTTP path creating a new team\n  "
    newTeamResourcePath::URI
    "\n  The HTTP URL creating a new team\n  "
    newTeamUrl::URI
    organization
    "\n  The parent team of the team.\n  "
    parentTeam::Union{Team, Missing, Nothing}
    "\n  The level of privacy the team has.\n  "
    privacy::TeamPrivacy.T
    projectV2
    "\n  List of projects this team has collaborator access to.\n  "
    projectsV2::ProjectV2Connection
    "\n  A list of repositories this team has access to.\n  "
    repositories::TeamRepositoryConnection
    "\n  The HTTP path for this team's repositories\n  "
    repositoriesResourcePath::URI
    "\n  The HTTP URL for this team's repositories\n  "
    repositoriesUrl::URI
    "\n  The HTTP path for this team\n  "
    resourcePath::URI
    "\n  What algorithm is used for review assignment for this team\n  "
    reviewRequestDelegationAlgorithm::Union{TeamReviewAssignmentAlgorithm.T, Missing, Nothing}
    "\n  True if review assignment is enabled for this team\n  "
    reviewRequestDelegationEnabled::Bool
    "\n  How many team members are required for review assignment for this team\n  "
    reviewRequestDelegationMemberCount::Union{Int, Missing, Nothing}
    "\n  When assigning team members via delegation, whether the entire team should be notified as well.\n  "
    reviewRequestDelegationNotifyTeam::Bool
    "\n  The slug corresponding to the team.\n  "
    slug::String
    "\n  The HTTP path for this team's teams\n  "
    teamsResourcePath::URI
    "\n  The HTTP URL for this team's teams\n  "
    teamsUrl::URI
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this team\n  "
    url::URI
    "\n  Team is adminable by the viewer.\n  "
    viewerCanAdminister::Bool
    "\n  Check if the viewer is able to change their subscription status for the repository.\n  "
    viewerCanSubscribe::Bool
    "\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  "
    viewerSubscription::Union{SubscriptionState.T, Missing, Nothing}
end
function Team(; ancestors, avatarUrl = nothing, childTeams, combinedSlug, createdAt, databaseId = nothing, description = nothing, discussion = nothing, discussions, discussionsResourcePath, discussionsUrl, editTeamResourcePath, editTeamUrl, id, invitations = nothing, memberStatuses, members, membersResourcePath, membersUrl, name, newTeamResourcePath, newTeamUrl, organization, parentTeam = nothing, privacy, projectV2 = nothing, projectsV2, repositories, repositoriesResourcePath, repositoriesUrl, resourcePath, reviewRequestDelegationAlgorithm = nothing, reviewRequestDelegationEnabled, reviewRequestDelegationMemberCount = nothing, reviewRequestDelegationNotifyTeam, slug, teamsResourcePath, teamsUrl, updatedAt, url, viewerCanAdminister, viewerCanSubscribe, viewerSubscription = nothing)
    Team(ancestors, avatarUrl, childTeams, combinedSlug, createdAt, databaseId, description, discussion, discussions, discussionsResourcePath, discussionsUrl, editTeamResourcePath, editTeamUrl, id, invitations, memberStatuses, members, membersResourcePath, membersUrl, name, newTeamResourcePath, newTeamUrl, organization, parentTeam, privacy, projectV2, projectsV2, repositories, repositoriesResourcePath, repositoriesUrl, resourcePath, reviewRequestDelegationAlgorithm, reviewRequestDelegationEnabled, reviewRequestDelegationMemberCount, reviewRequestDelegationNotifyTeam, slug, teamsResourcePath, teamsUrl, updatedAt, url, viewerCanAdminister, viewerCanSubscribe, viewerSubscription)
end
function Base.getproperty(t::Team, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Organization
    elseif sym === Symbol("projectV2")
        getfield(t, Symbol("projectV2"))::Union{ProjectV2, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Team, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Organization)
    elseif sym === Symbol("projectV2")
        setfield!(t, Symbol("projectV2"), val::Union{ProjectV2, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Users and teams." const DeploymentReviewer = Union{Team, User}

"""
An edge in a connection.
"""
mutable struct DeploymentReviewerEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{DeploymentReviewer, Missing, Nothing}
end
function DeploymentReviewerEdge(; cursor, node = nothing)
    DeploymentReviewerEdge(cursor, node)
end

"""
The connection type for DeploymentReviewer.
"""
mutable struct DeploymentReviewerConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DeploymentReviewerEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{DeploymentReviewer, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DeploymentReviewerConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DeploymentReviewerConnection(edges, nodes, pageInfo, totalCount)
end

"""
A protection rule.
"""
mutable struct DeploymentProtectionRule <: OfficialGithubSchema
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The teams or users that can review the deployment\n  "
    reviewers::DeploymentReviewerConnection
    "\n  The timeout in minutes for this protection rule.\n  "
    timeout::Int
    "\n  The type of protection rule.\n  "
    type::DeploymentProtectionRuleType.T
end
function DeploymentProtectionRule(; databaseId = nothing, reviewers, timeout, type)
    DeploymentProtectionRule(databaseId, reviewers, timeout, type)
end

"""
An edge in a connection.
"""
mutable struct DeploymentProtectionRuleEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{DeploymentProtectionRule, Missing, Nothing}
end
function DeploymentProtectionRuleEdge(; cursor, node = nothing)
    DeploymentProtectionRuleEdge(cursor, node)
end

"""
The connection type for DeploymentProtectionRule.
"""
mutable struct DeploymentProtectionRuleConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DeploymentProtectionRuleEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{DeploymentProtectionRule, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DeploymentProtectionRuleConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DeploymentProtectionRuleConnection(edges, nodes, pageInfo, totalCount)
end

"""
An environment.
"""
mutable struct Environment <: OfficialGithubSchema
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The name of the environment\n  "
    name::String
    "\n  The protection rules defined for this environment\n  "
    protectionRules::DeploymentProtectionRuleConnection
end
function Environment(; databaseId = nothing, id, name, protectionRules)
    Environment(databaseId, id, name, protectionRules)
end

"""
A request to deploy a workflow run to an environment.
"""
mutable struct DeploymentRequest <: OfficialGithubSchema
    "\n  Whether or not the current user can approve the deployment\n  "
    currentUserCanApprove::Bool
    "\n  The target environment of the deployment\n  "
    environment::Environment
    "\n  The teams or users that can review the deployment\n  "
    reviewers::DeploymentReviewerConnection
    "\n  The wait timer in minutes configured in the environment\n  "
    waitTimer::Int
    "\n  The wait timer in minutes configured in the environment\n  "
    waitTimerStartedAt::Union{DateTime, Missing, Nothing}
end
function DeploymentRequest(; currentUserCanApprove, environment, reviewers, waitTimer, waitTimerStartedAt = nothing)
    DeploymentRequest(currentUserCanApprove, environment, reviewers, waitTimer, waitTimerStartedAt)
end

"""
An edge in a connection.
"""
mutable struct DeploymentRequestEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{DeploymentRequest, Missing, Nothing}
end
function DeploymentRequestEdge(; cursor, node = nothing)
    DeploymentRequestEdge(cursor, node)
end

"""
The connection type for DeploymentRequest.
"""
mutable struct DeploymentRequestConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DeploymentRequestEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{DeploymentRequest, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DeploymentRequestConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DeploymentRequestConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct EnvironmentEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Environment, Missing, Nothing}
end
function EnvironmentEdge(; cursor, node = nothing)
    EnvironmentEdge(cursor, node)
end

"""
The connection type for Environment.
"""
mutable struct EnvironmentConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{EnvironmentEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Environment, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function EnvironmentConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    EnvironmentConnection(edges, nodes, pageInfo, totalCount)
end

"""
A deployment review.
"""
mutable struct DeploymentReview <: OfficialGithubSchema
    "\n  The comment the user left.\n  "
    comment::String
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The environments approved or rejected\n  "
    environments::EnvironmentConnection
    id::String
    "\n  The decision of the user.\n  "
    state::DeploymentReviewState.T
    user
end
function DeploymentReview(; comment, databaseId = nothing, environments, id, state, user)
    DeploymentReview(comment, databaseId, environments, id, state, user)
end
function Base.getproperty(t::DeploymentReview, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DeploymentReview, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct DeploymentReviewEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{DeploymentReview, Missing, Nothing}
end
function DeploymentReviewEdge(; cursor, node = nothing)
    DeploymentReviewEdge(cursor, node)
end

"""
The connection type for DeploymentReview.
"""
mutable struct DeploymentReviewConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DeploymentReviewEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{DeploymentReview, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DeploymentReviewConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DeploymentReviewConnection(edges, nodes, pageInfo, totalCount)
end

"""
A workflow run.
"""
mutable struct WorkflowRun <: OfficialGithubSchema
    checkSuite
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The log of deployment reviews\n  "
    deploymentReviews::DeploymentReviewConnection
    id::String
    "\n  The pending deployment requests of all check runs in this workflow run\n  "
    pendingDeploymentRequests::DeploymentRequestConnection
    "\n  The HTTP path for this workflow run\n  "
    resourcePath::URI
    "\n  A number that uniquely identifies this workflow run in its parent workflow.\n  "
    runNumber::Int
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this workflow run\n  "
    url::URI
    "\n  The workflow executed in this workflow run.\n  "
    workflow::Workflow
end
function WorkflowRun(; checkSuite, createdAt, databaseId = nothing, deploymentReviews, id, pendingDeploymentRequests, resourcePath, runNumber, updatedAt, url, workflow)
    WorkflowRun(checkSuite, createdAt, databaseId, deploymentReviews, id, pendingDeploymentRequests, resourcePath, runNumber, updatedAt, url, workflow)
end
function Base.getproperty(t::WorkflowRun, sym::Symbol)
    if sym === Symbol("checkSuite")
        getfield(t, Symbol("checkSuite"))::CheckSuite
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::WorkflowRun, sym::Symbol, val::Any)
    if sym === Symbol("checkSuite")
        setfield!(t, Symbol("checkSuite"), val::CheckSuite)
    else
        setfield!(t, sym, val)
    end
end

"""
A Git push.
"""
mutable struct Push <: OfficialGithubSchema
    id::String
    "\n  The SHA after the push\n  "
    nextSha::Union{GitObjectID, Missing, Nothing}
    "\n  The permalink for this push.\n  "
    permalink::URI
    "\n  The SHA before the push\n  "
    previousSha::Union{GitObjectID, Missing, Nothing}
    "\n  The actor who pushed\n  "
    pusher::Actor
    repository
end
function Push(; id, nextSha = nothing, permalink, previousSha = nothing, pusher, repository)
    Push(id, nextSha, permalink, previousSha, pusher, repository)
end
function Base.getproperty(t::Push, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Push, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
A check suite.
"""
mutable struct CheckSuite <: OfficialGithubSchema
    "\n  The GitHub App which created this check suite.\n  "
    app::Union{App, Missing, Nothing}
    branch
    "\n  The check runs associated with a check suite.\n  "
    checkRuns::Union{CheckRunConnection, Missing, Nothing}
    commit
    "\n  The conclusion of this check suite.\n  "
    conclusion::Union{CheckConclusionState.T, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    creator
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    matchingPullRequests
    "\n  The push that triggered this check suite.\n  "
    push::Union{Push, Missing, Nothing}
    repository
    "\n  The HTTP path for this check suite\n  "
    resourcePath::URI
    "\n  The status of this check suite.\n  "
    status::CheckStatusState.T
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this check suite\n  "
    url::URI
    "\n  The workflow run associated with this check suite.\n  "
    workflowRun::Union{WorkflowRun, Missing, Nothing}
end
function CheckSuite(; app = nothing, branch = nothing, checkRuns = nothing, commit, conclusion = nothing, createdAt, creator = nothing, databaseId = nothing, id, matchingPullRequests = nothing, push = nothing, repository, resourcePath, status, updatedAt, url, workflowRun = nothing)
    CheckSuite(app, branch, checkRuns, commit, conclusion, createdAt, creator, databaseId, id, matchingPullRequests, push, repository, resourcePath, status, updatedAt, url, workflowRun)
end
function Base.getproperty(t::CheckSuite, sym::Symbol)
    if sym === Symbol("branch")
        getfield(t, Symbol("branch"))::Union{Ref, Missing, Nothing}
    elseif sym === Symbol("commit")
        getfield(t, Symbol("commit"))::Commit
    elseif sym === Symbol("creator")
        getfield(t, Symbol("creator"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("matchingPullRequests")
        getfield(t, Symbol("matchingPullRequests"))::Union{PullRequestConnection, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CheckSuite, sym::Symbol, val::Any)
    if sym === Symbol("branch")
        setfield!(t, Symbol("branch"), val::Union{Ref, Missing, Nothing})
    elseif sym === Symbol("commit")
        setfield!(t, Symbol("commit"), val::Commit)
    elseif sym === Symbol("creator")
        setfield!(t, Symbol("creator"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("matchingPullRequests")
        setfield!(t, Symbol("matchingPullRequests"), val::Union{PullRequestConnection, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
A character position in a check annotation.
"""
mutable struct CheckAnnotationPosition <: OfficialGithubSchema
    "\n  Column number (1 indexed).\n  "
    column::Union{Int, Missing, Nothing}
    "\n  Line number (1 indexed).\n  "
    line::Int
end
function CheckAnnotationPosition(; column = nothing, line)
    CheckAnnotationPosition(column, line)
end

"""
An inclusive pair of positions for a check annotation.
"""
mutable struct CheckAnnotationSpan <: OfficialGithubSchema
    "\n  End position (inclusive).\n  "
    end::CheckAnnotationPosition
    "\n  Start position (inclusive).\n  "
    start::CheckAnnotationPosition
end
function CheckAnnotationSpan(; end, start)
    CheckAnnotationSpan(end, start)
end

"""
A single check annotation.
"""
mutable struct CheckAnnotation <: OfficialGithubSchema
    "\n  The annotation's severity level.\n  "
    annotationLevel::Union{CheckAnnotationLevel.T, Missing, Nothing}
    "\n  The path to the file that this annotation was made on.\n  "
    blobUrl::URI
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The position of this annotation.\n  "
    location::CheckAnnotationSpan
    "\n  The annotation's message.\n  "
    message::String
    "\n  The path that this annotation was made on.\n  "
    path::String
    "\n  Additional information about the annotation.\n  "
    rawDetails::Union{String, Missing, Nothing}
    "\n  The annotation's title\n  "
    title::Union{String, Missing, Nothing}
end
function CheckAnnotation(; annotationLevel = nothing, blobUrl, databaseId = nothing, location, message, path, rawDetails = nothing, title = nothing)
    CheckAnnotation(annotationLevel, blobUrl, databaseId, location, message, path, rawDetails, title)
end

"""
An edge in a connection.
"""
mutable struct CheckAnnotationEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{CheckAnnotation, Missing, Nothing}
end
function CheckAnnotationEdge(; cursor, node = nothing)
    CheckAnnotationEdge(cursor, node)
end

"""
The connection type for CheckAnnotation.
"""
mutable struct CheckAnnotationConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CheckAnnotationEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{CheckAnnotation, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function CheckAnnotationConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CheckAnnotationConnection(edges, nodes, pageInfo, totalCount)
end

"""
A single check step.
"""
mutable struct CheckStep <: OfficialGithubSchema
    "\n  Identifies the date and time when the check step was completed.\n  "
    completedAt::Union{DateTime, Missing, Nothing}
    "\n  The conclusion of the check step.\n  "
    conclusion::Union{CheckConclusionState.T, Missing, Nothing}
    "\n  A reference for the check step on the integrator's system.\n  "
    externalId::Union{String, Missing, Nothing}
    "\n  The step's name.\n  "
    name::String
    "\n  The index of the step in the list of steps of the parent check run.\n  "
    number::Int
    "\n  Number of seconds to completion.\n  "
    secondsToCompletion::Union{Int, Missing, Nothing}
    "\n  Identifies the date and time when the check step was started.\n  "
    startedAt::Union{DateTime, Missing, Nothing}
    "\n  The current status of the check step.\n  "
    status::CheckStatusState.T
end
function CheckStep(; completedAt = nothing, conclusion = nothing, externalId = nothing, name, number, secondsToCompletion = nothing, startedAt = nothing, status)
    CheckStep(completedAt, conclusion, externalId, name, number, secondsToCompletion, startedAt, status)
end

"""
An edge in a connection.
"""
mutable struct CheckStepEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{CheckStep, Missing, Nothing}
end
function CheckStepEdge(; cursor, node = nothing)
    CheckStepEdge(cursor, node)
end

"""
The connection type for CheckStep.
"""
mutable struct CheckStepConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CheckStepEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{CheckStep, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function CheckStepConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CheckStepConnection(edges, nodes, pageInfo, totalCount)
end

"""
A check run.
"""
mutable struct CheckRun <: OfficialGithubSchema
    "\n  The check run's annotations\n  "
    annotations::Union{CheckAnnotationConnection, Missing, Nothing}
    "\n  The check suite that this run is a part of.\n  "
    checkSuite::CheckSuite
    "\n  Identifies the date and time when the check run was completed.\n  "
    completedAt::Union{DateTime, Missing, Nothing}
    "\n  The conclusion of the check run.\n  "
    conclusion::Union{CheckConclusionState.T, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The corresponding deployment for this job, if any\n  "
    deployment::Union{Deployment, Missing, Nothing}
    "\n  The URL from which to find full details of the check run on the integrator's site.\n  "
    detailsUrl::Union{URI, Missing, Nothing}
    "\n  A reference for the check run on the integrator's system.\n  "
    externalId::Union{String, Missing, Nothing}
    id::String
    "\n  Whether this is required to pass before merging for a specific pull request.\n  "
    isRequired::Bool
    "\n  The name of the check for this check run.\n  "
    name::String
    "\n  Information about a pending deployment, if any, in this check run\n  "
    pendingDeploymentRequest::Union{DeploymentRequest, Missing, Nothing}
    "\n  The permalink to the check run summary.\n  "
    permalink::URI
    repository
    "\n  The HTTP path for this check run.\n  "
    resourcePath::URI
    "\n  Identifies the date and time when the check run was started.\n  "
    startedAt::Union{DateTime, Missing, Nothing}
    "\n  The current status of the check run.\n  "
    status::CheckStatusState.T
    "\n  The check run's steps\n  "
    steps::Union{CheckStepConnection, Missing, Nothing}
    "\n  A string representing the check run's summary\n  "
    summary::Union{String, Missing, Nothing}
    "\n  A string representing the check run's text\n  "
    text::Union{String, Missing, Nothing}
    "\n  A string representing the check run\n  "
    title::Union{String, Missing, Nothing}
    "\n  The HTTP URL for this check run.\n  "
    url::URI
end
function CheckRun(; annotations = nothing, checkSuite, completedAt = nothing, conclusion = nothing, databaseId = nothing, deployment = nothing, detailsUrl = nothing, externalId = nothing, id, isRequired, name, pendingDeploymentRequest = nothing, permalink, repository, resourcePath, startedAt = nothing, status, steps = nothing, summary = nothing, text = nothing, title = nothing, url)
    CheckRun(annotations, checkSuite, completedAt, conclusion, databaseId, deployment, detailsUrl, externalId, id, isRequired, name, pendingDeploymentRequest, permalink, repository, resourcePath, startedAt, status, steps, summary, text, title, url)
end
function Base.getproperty(t::CheckRun, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CheckRun, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Types that can be inside a StatusCheckRollup context." const StatusCheckRollupContext = Union{CheckRun, StatusContext}

"""
An edge in a connection.
"""
mutable struct StatusCheckRollupContextEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{StatusCheckRollupContext, Missing, Nothing}
end
function StatusCheckRollupContextEdge(; cursor, node = nothing)
    StatusCheckRollupContextEdge(cursor, node)
end

"""
The connection type for StatusCheckRollupContext.
"""
mutable struct StatusCheckRollupContextConnection <: OfficialGithubSchema
    "\n  The number of check runs in this rollup.\n  "
    checkRunCount::Int
    "\n  Counts of check runs by state.\n  "
    checkRunCountsByState::Union{Vector{CheckRunStateCount}, Missing, Nothing}
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{StatusCheckRollupContextEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{StatusCheckRollupContext, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  The number of status contexts in this rollup.\n  "
    statusContextCount::Int
    "\n  Counts of status contexts by state.\n  "
    statusContextCountsByState::Union{Vector{StatusContextStateCount}, Missing, Nothing}
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function StatusCheckRollupContextConnection(; checkRunCount, checkRunCountsByState = nothing, edges = nothing, nodes = nothing, pageInfo, statusContextCount, statusContextCountsByState = nothing, totalCount)
    StatusCheckRollupContextConnection(checkRunCount, checkRunCountsByState, edges, nodes, pageInfo, statusContextCount, statusContextCountsByState, totalCount)
end

"""
Represents a commit status.
"""
mutable struct Status <: OfficialGithubSchema
    "\n  A list of status contexts and check runs for this commit.\n  "
    combinedContexts::StatusCheckRollupContextConnection
    commit
    "\n  Looks up an individual status context by context name.\n  "
    context::Union{StatusContext, Missing, Nothing}
    "\n  The individual status contexts for this commit.\n  "
    contexts::Vector{StatusContext}
    id::String
    "\n  The combined commit status.\n  "
    state::StatusState.T
end
function Status(; combinedContexts, commit = nothing, context = nothing, contexts, id, state)
    Status(combinedContexts, commit, context, contexts, id, state)
end
function Base.getproperty(t::Status, sym::Symbol)
    if sym === Symbol("commit")
        getfield(t, Symbol("commit"))::Union{Commit, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Status, sym::Symbol, val::Any)
    if sym === Symbol("commit")
        setfield!(t, Symbol("commit"), val::Union{Commit, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct CommitEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
end
function CommitEdge(; cursor, node = nothing)
    CommitEdge(cursor, node)
end
function Base.getproperty(t::CommitEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{Commit, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CommitEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{Commit, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for Commit.
"""
mutable struct CommitHistoryConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CommitEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function CommitHistoryConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CommitHistoryConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::CommitHistoryConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{Commit, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CommitHistoryConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{Commit, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A pointer to a repository at a specific revision embedded inside another repository.
"""
mutable struct Submodule <: OfficialGithubSchema
    "\n  The branch of the upstream submodule for tracking updates\n  "
    branch::Union{String, Missing, Nothing}
    "\n  The git URL of the submodule repository\n  "
    gitUrl::URI
    "\n  The name of the submodule in .gitmodules\n  "
    name::String
    "\n  The name of the submodule in .gitmodules (Base64-encoded)\n  "
    nameRaw::Base64String
    "\n  The path in the superproject that this submodule is located in\n  "
    path::String
    "\n  The path in the superproject that this submodule is located in (Base64-encoded)\n  "
    pathRaw::Base64String
    "\n  The commit revision of the subproject repository being tracked by the submodule\n  "
    subprojectCommitOid::Union{GitObjectID, Missing, Nothing}
end
function Submodule(; branch = nothing, gitUrl, name, nameRaw, path, pathRaw, subprojectCommitOid = nothing)
    Submodule(branch, gitUrl, name, nameRaw, path, pathRaw, subprojectCommitOid)
end

"""
Represents a Git tree entry.
"""
mutable struct TreeEntry <: OfficialGithubSchema
    "\n  The extension of the file\n  "
    extension::Union{String, Missing, Nothing}
    "\n  Whether or not this tree entry is generated\n  "
    isGenerated::Bool
    "\n  The programming language this file is written in.\n  "
    language::Union{Language, Missing, Nothing}
    "\n  Number of lines in the file.\n  "
    lineCount::Union{Int, Missing, Nothing}
    "\n  Entry file mode.\n  "
    mode::Int
    "\n  Entry file name.\n  "
    name::String
    "\n  Entry file name. (Base64-encoded)\n  "
    nameRaw::Base64String
    "\n  Entry file object.\n  "
    object::Union{GitObject, Missing, Nothing}
    "\n  Entry file Git object ID.\n  "
    oid::GitObjectID
    "\n  The full path of the file.\n  "
    path::Union{String, Missing, Nothing}
    "\n  The full path of the file. (Base64-encoded)\n  "
    pathRaw::Union{Base64String, Missing, Nothing}
    repository
    "\n  Entry byte size\n  "
    size::Int
    "\n  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule\n  "
    submodule::Union{Submodule, Missing, Nothing}
    "\n  Entry file type.\n  "
    type::String
end
function TreeEntry(; extension = nothing, isGenerated, language = nothing, lineCount = nothing, mode, name, nameRaw, object = nothing, oid, path = nothing, pathRaw = nothing, repository, size, submodule = nothing, type)
    TreeEntry(extension, isGenerated, language, lineCount, mode, name, nameRaw, object, oid, path, pathRaw, repository, size, submodule, type)
end
function Base.getproperty(t::TreeEntry, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TreeEntry, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents an actor in a Git commit (ie. an author or committer).
"""
mutable struct GitActor <: OfficialGithubSchema
    "\n  A URL pointing to the author's public avatar.\n  "
    avatarUrl::URI
    "\n  The timestamp of the Git action (authoring or committing).\n  "
    date::Union{GitTimestamp, Missing, Nothing}
    "\n  The email in the Git commit.\n  "
    email::Union{String, Missing, Nothing}
    "\n  The name in the Git commit.\n  "
    name::Union{String, Missing, Nothing}
    user
end
function GitActor(; avatarUrl, date = nothing, email = nothing, name = nothing, user = nothing)
    GitActor(avatarUrl, date, email, name, user)
end
function Base.getproperty(t::GitActor, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::GitActor, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct GitActorEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{GitActor, Missing, Nothing}
end
function GitActorEdge(; cursor, node = nothing)
    GitActorEdge(cursor, node)
end

"""
The connection type for GitActor.
"""
mutable struct GitActorConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{GitActorEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{GitActor, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function GitActorConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    GitActorConnection(edges, nodes, pageInfo, totalCount)
end

"""
The connection type for Commit.
"""
mutable struct CommitConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CommitEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function CommitConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CommitConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::CommitConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{Commit, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CommitConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{Commit, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct CheckSuiteEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{CheckSuite, Missing, Nothing}
end
function CheckSuiteEdge(; cursor, node = nothing)
    CheckSuiteEdge(cursor, node)
end

"""
The connection type for CheckSuite.
"""
mutable struct CheckSuiteConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CheckSuiteEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{CheckSuite, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function CheckSuiteConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CheckSuiteConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a comment on a given Commit.
"""
mutable struct CommitComment <: OfficialGithubSchema
    "\n  The actor who authored the comment.\n  "
    author::Union{Actor, Missing, Nothing}
    "\n  Author's association with the subject of the comment.\n  "
    authorAssociation::CommentAuthorAssociation.T
    "\n  Identifies the comment body.\n  "
    body::String
    "\n  The body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  The body rendered to text.\n  "
    bodyText::String
    commit
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Check if this comment was created via an email reply.\n  "
    createdViaEmail::Bool
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The actor who edited the comment.\n  "
    editor::Union{Actor, Missing, Nothing}
    id::String
    "\n  Check if this comment was edited and includes an edit with the creation data\n  "
    includesCreatedEdit::Bool
    "\n  Returns whether or not a comment has been minimized.\n  "
    isMinimized::Bool
    "\n  The moment the editor made the last edit\n  "
    lastEditedAt::Union{DateTime, Missing, Nothing}
    "\n  Returns why the comment was minimized. One of `abuse`, `off-topic`,\n  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\n  formatting of these values differs from the inputs to the `MinimizeComment` mutation.\n  "
    minimizedReason::Union{String, Missing, Nothing}
    "\n  Identifies the file path associated with the comment.\n  "
    path::Union{String, Missing, Nothing}
    "\n  Identifies the line position associated with the comment.\n  "
    position::Union{Int, Missing, Nothing}
    "\n  Identifies when the comment was published at.\n  "
    publishedAt::Union{DateTime, Missing, Nothing}
    reactionGroups
    "\n  A list of Reactions left on the Issue.\n  "
    reactions::ReactionConnection
    repository
    "\n  The HTTP path permalink for this commit comment.\n  "
    resourcePath::URI
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL permalink for this commit comment.\n  "
    url::URI
    "\n  A list of edits to this content.\n  "
    userContentEdits::Union{UserContentEditConnection, Missing, Nothing}
    "\n  Check if the current viewer can delete this object.\n  "
    viewerCanDelete::Bool
    "\n  Check if the current viewer can minimize this object.\n  "
    viewerCanMinimize::Bool
    "\n  Can user react to this subject\n  "
    viewerCanReact::Bool
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  Reasons why the current viewer can not update this comment.\n  "
    viewerCannotUpdateReasons::Vector{CommentCannotUpdateReason.T}
    "\n  Did the viewer author this comment.\n  "
    viewerDidAuthor::Bool
end
function CommitComment(; author = nothing, authorAssociation, body, bodyHTML, bodyText, commit = nothing, createdAt, createdViaEmail, databaseId = nothing, editor = nothing, id, includesCreatedEdit, isMinimized, lastEditedAt = nothing, minimizedReason = nothing, path = nothing, position = nothing, publishedAt = nothing, reactionGroups = nothing, reactions, repository, resourcePath, updatedAt, url, userContentEdits = nothing, viewerCanDelete, viewerCanMinimize, viewerCanReact, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor)
    CommitComment(author, authorAssociation, body, bodyHTML, bodyText, commit, createdAt, createdViaEmail, databaseId, editor, id, includesCreatedEdit, isMinimized, lastEditedAt, minimizedReason, path, position, publishedAt, reactionGroups, reactions, repository, resourcePath, updatedAt, url, userContentEdits, viewerCanDelete, viewerCanMinimize, viewerCanReact, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor)
end
function Base.getproperty(t::CommitComment, sym::Symbol)
    if sym === Symbol("commit")
        getfield(t, Symbol("commit"))::Union{Commit, Missing, Nothing}
    elseif sym === Symbol("reactionGroups")
        getfield(t, Symbol("reactionGroups"))::Union{Vector{ReactionGroup}, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CommitComment, sym::Symbol, val::Any)
    if sym === Symbol("commit")
        setfield!(t, Symbol("commit"), val::Union{Commit, Missing, Nothing})
    elseif sym === Symbol("reactionGroups")
        setfield!(t, Symbol("reactionGroups"), val::Union{Vector{ReactionGroup}, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct CommitCommentEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{CommitComment, Missing, Nothing}
end
function CommitCommentEdge(; cursor, node = nothing)
    CommitCommentEdge(cursor, node)
end

"""
The connection type for CommitComment.
"""
mutable struct CommitCommentConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CommitCommentEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{CommitComment, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function CommitCommentConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CommitCommentConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents the rollup for both the check runs and status for a commit.
"""
mutable struct StatusCheckRollup <: OfficialGithubSchema
    commit
    "\n  A list of status contexts and check runs for this commit.\n  "
    contexts::StatusCheckRollupContextConnection
    id::String
    "\n  The combined status for the commit.\n  "
    state::StatusState.T
end
function StatusCheckRollup(; commit = nothing, contexts, id, state)
    StatusCheckRollup(commit, contexts, id, state)
end
function Base.getproperty(t::StatusCheckRollup, sym::Symbol)
    if sym === Symbol("commit")
        getfield(t, Symbol("commit"))::Union{Commit, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::StatusCheckRollup, sym::Symbol, val::Any)
    if sym === Symbol("commit")
        setfield!(t, Symbol("commit"), val::Union{Commit, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct SubmoduleEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Submodule, Missing, Nothing}
end
function SubmoduleEdge(; cursor, node = nothing)
    SubmoduleEdge(cursor, node)
end

"""
The connection type for Submodule.
"""
mutable struct SubmoduleConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{SubmoduleEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Submodule, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function SubmoduleConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    SubmoduleConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a range of information from a Git blame.
"""
mutable struct BlameRange <: OfficialGithubSchema
    "\n  Identifies the recency of the change, from 1 (new) to 10 (old). This is\n  calculated as a 2-quantile and determines the length of distance between the\n  median age of all the changes in the file and the recency of the current\n  range's change.\n  "
    age::Int
    commit
    "\n  The ending line for the range\n  "
    endingLine::Int
    "\n  The starting line for the range\n  "
    startingLine::Int
end
function BlameRange(; age, commit, endingLine, startingLine)
    BlameRange(age, commit, endingLine, startingLine)
end
function Base.getproperty(t::BlameRange, sym::Symbol)
    if sym === Symbol("commit")
        getfield(t, Symbol("commit"))::Commit
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::BlameRange, sym::Symbol, val::Any)
    if sym === Symbol("commit")
        setfield!(t, Symbol("commit"), val::Commit)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a Git blame.
"""
mutable struct Blame <: OfficialGithubSchema
    "\n  The list of ranges from a Git blame.\n  "
    ranges::Vector{BlameRange}
end
function Blame(; ranges)
    Blame(ranges)
end

"""
Represents a Git tree.
"""
mutable struct Tree <: OfficialGithubSchema
    "\n  An abbreviated version of the Git object ID\n  "
    abbreviatedOid::String
    "\n  The HTTP path for this Git object\n  "
    commitResourcePath::URI
    "\n  The HTTP URL for this Git object\n  "
    commitUrl::URI
    "\n  A list of tree entries.\n  "
    entries::Union{Vector{TreeEntry}, Missing, Nothing}
    id::String
    "\n  The Git object ID\n  "
    oid::GitObjectID
    repository
end
function Tree(; abbreviatedOid, commitResourcePath, commitUrl, entries = nothing, id, oid, repository)
    Tree(abbreviatedOid, commitResourcePath, commitUrl, entries, id, oid, repository)
end
function Base.getproperty(t::Tree, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Tree, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a Git commit.
"""
mutable struct Commit <: OfficialGithubSchema
    "\n  An abbreviated version of the Git object ID\n  "
    abbreviatedOid::String
    "\n  The number of additions in this commit.\n  "
    additions::Int
    associatedPullRequests
    "\n  Authorship details of the commit.\n  "
    author::Union{GitActor, Missing, Nothing}
    "\n  Check if the committer and the author match.\n  "
    authoredByCommitter::Bool
    "\n  The datetime when this commit was authored.\n  "
    authoredDate::DateTime
    "\n  The list of authors for this commit based on the git author and the Co-authored-by\n  message trailer. The git author will always be first.\n  "
    authors::GitActorConnection
    "\n  Fetches `git blame` information.\n  "
    blame::Blame
    "\n  We recommend using the `changedFielsIfAvailable` field instead of\n  `changedFiles`, as `changedFiles` will cause your request to return an error\n  if GitHub is unable to calculate the number of changed files.\n  "
    changedFiles::Int
    "\n  The number of changed files in this commit. If GitHub is unable to calculate\n  the number of changed files (for example due to a timeout), this will return\n  `null`. We recommend using this field instead of `changedFiles`.\n  "
    changedFilesIfAvailable::Union{Int, Missing, Nothing}
    "\n  The check suites associated with a commit.\n  "
    checkSuites::Union{CheckSuiteConnection, Missing, Nothing}
    "\n  Comments made on the commit.\n  "
    comments::CommitCommentConnection
    "\n  The HTTP path for this Git object\n  "
    commitResourcePath::URI
    "\n  The HTTP URL for this Git object\n  "
    commitUrl::URI
    "\n  The datetime when this commit was committed.\n  "
    committedDate::DateTime
    "\n  Check if committed via GitHub web UI.\n  "
    committedViaWeb::Bool
    "\n  Committer details of the commit.\n  "
    committer::Union{GitActor, Missing, Nothing}
    "\n  The number of deletions in this commit.\n  "
    deletions::Int
    "\n  The deployments associated with a commit.\n  "
    deployments::Union{DeploymentConnection, Missing, Nothing}
    "\n  The tree entry representing the file located at the given path.\n  "
    file::Union{TreeEntry, Missing, Nothing}
    "\n  The linear commit history starting from (and including) this commit, in the same order as `git log`.\n  "
    history::CommitHistoryConnection
    id::String
    "\n  The Git commit message\n  "
    message::String
    "\n  The Git commit message body\n  "
    messageBody::String
    "\n  The commit message body rendered to HTML.\n  "
    messageBodyHTML::HTML
    "\n  The Git commit message headline\n  "
    messageHeadline::String
    "\n  The commit message headline rendered to HTML.\n  "
    messageHeadlineHTML::HTML
    "\n  The Git object ID\n  "
    oid::GitObjectID
    onBehalfOf
    "\n  The parents of a commit.\n  "
    parents::CommitConnection
    "\n  The datetime when this commit was pushed.\n  "
    pushedDate::Union{DateTime, Missing, Nothing}
    repository
    "\n  The HTTP path for this commit\n  "
    resourcePath::URI
    "\n  Commit signing information, if present.\n  "
    signature::Union{GitSignature, Missing, Nothing}
    "\n  Status information for this commit\n  "
    status::Union{Status, Missing, Nothing}
    "\n  Check and Status rollup information for this commit.\n  "
    statusCheckRollup::Union{StatusCheckRollup, Missing, Nothing}
    "\n  Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.\n  "
    submodules::SubmoduleConnection
    "\n  Returns a URL to download a tarball archive for a repository.\n  Note: For private repositories, these links are temporary and expire after five minutes.\n  "
    tarballUrl::URI
    "\n  Commit's root Tree\n  "
    tree::Tree
    "\n  The HTTP path for the tree of this commit\n  "
    treeResourcePath::URI
    "\n  The HTTP URL for the tree of this commit\n  "
    treeUrl::URI
    "\n  The HTTP URL for this commit\n  "
    url::URI
    "\n  Check if the viewer is able to change their subscription status for the repository.\n  "
    viewerCanSubscribe::Bool
    "\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  "
    viewerSubscription::Union{SubscriptionState.T, Missing, Nothing}
    "\n  Returns a URL to download a zipball archive for a repository.\n  Note: For private repositories, these links are temporary and expire after five minutes.\n  "
    zipballUrl::URI
end
function Commit(; abbreviatedOid, additions, associatedPullRequests = nothing, author = nothing, authoredByCommitter, authoredDate, authors, blame, changedFiles, changedFilesIfAvailable = nothing, checkSuites = nothing, comments, commitResourcePath, commitUrl, committedDate, committedViaWeb, committer = nothing, deletions, deployments = nothing, file = nothing, history, id, message, messageBody, messageBodyHTML, messageHeadline, messageHeadlineHTML, oid, onBehalfOf = nothing, parents, pushedDate = nothing, repository, resourcePath, signature = nothing, status = nothing, statusCheckRollup = nothing, submodules, tarballUrl, tree, treeResourcePath, treeUrl, url, viewerCanSubscribe, viewerSubscription = nothing, zipballUrl)
    Commit(abbreviatedOid, additions, associatedPullRequests, author, authoredByCommitter, authoredDate, authors, blame, changedFiles, changedFilesIfAvailable, checkSuites, comments, commitResourcePath, commitUrl, committedDate, committedViaWeb, committer, deletions, deployments, file, history, id, message, messageBody, messageBodyHTML, messageHeadline, messageHeadlineHTML, oid, onBehalfOf, parents, pushedDate, repository, resourcePath, signature, status, statusCheckRollup, submodules, tarballUrl, tree, treeResourcePath, treeUrl, url, viewerCanSubscribe, viewerSubscription, zipballUrl)
end
function Base.getproperty(t::Commit, sym::Symbol)
    if sym === Symbol("associatedPullRequests")
        getfield(t, Symbol("associatedPullRequests"))::Union{PullRequestConnection, Missing, Nothing}
    elseif sym === Symbol("onBehalfOf")
        getfield(t, Symbol("onBehalfOf"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Commit, sym::Symbol, val::Any)
    if sym === Symbol("associatedPullRequests")
        setfield!(t, Symbol("associatedPullRequests"), val::Union{PullRequestConnection, Missing, Nothing})
    elseif sym === Symbol("onBehalfOf")
        setfield!(t, Symbol("onBehalfOf"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
A review comment associated with a given repository pull request.
"""
mutable struct PullRequestReviewComment <: OfficialGithubSchema
    "\n  The actor who authored the comment.\n  "
    author::Union{Actor, Missing, Nothing}
    "\n  Author's association with the subject of the comment.\n  "
    authorAssociation::CommentAuthorAssociation.T
    "\n  The comment body of this review comment.\n  "
    body::String
    "\n  The body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  The comment body of this review comment rendered as plain text.\n  "
    bodyText::String
    "\n  Identifies the commit associated with the comment.\n  "
    commit::Union{Commit, Missing, Nothing}
    "\n  Identifies when the comment was created.\n  "
    createdAt::DateTime
    "\n  Check if this comment was created via an email reply.\n  "
    createdViaEmail::Bool
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The diff hunk to which the comment applies.\n  "
    diffHunk::String
    "\n  Identifies when the comment was created in a draft state.\n  "
    draftedAt::DateTime
    "\n  The actor who edited the comment.\n  "
    editor::Union{Actor, Missing, Nothing}
    id::String
    "\n  Check if this comment was edited and includes an edit with the creation data\n  "
    includesCreatedEdit::Bool
    "\n  Returns whether or not a comment has been minimized.\n  "
    isMinimized::Bool
    "\n  The moment the editor made the last edit\n  "
    lastEditedAt::Union{DateTime, Missing, Nothing}
    "\n  Returns why the comment was minimized. One of `abuse`, `off-topic`,\n  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\n  formatting of these values differs from the inputs to the `MinimizeComment` mutation.\n  "
    minimizedReason::Union{String, Missing, Nothing}
    "\n  Identifies the original commit associated with the comment.\n  "
    originalCommit::Union{Commit, Missing, Nothing}
    "\n  The original line index in the diff to which the comment applies.\n  "
    originalPosition::Int
    "\n  Identifies when the comment body is outdated\n  "
    outdated::Bool
    "\n  The path to which the comment applies.\n  "
    path::String
    "\n  The line index in the diff to which the comment applies.\n  "
    position::Union{Int, Missing, Nothing}
    "\n  Identifies when the comment was published at.\n  "
    publishedAt::Union{DateTime, Missing, Nothing}
    pullRequest
    pullRequestReview
    reactionGroups
    "\n  A list of Reactions left on the Issue.\n  "
    reactions::ReactionConnection
    "\n  The comment this is a reply to.\n  "
    replyTo::Union{PullRequestReviewComment, Missing, Nothing}
    repository
    "\n  The HTTP path permalink for this review comment.\n  "
    resourcePath::URI
    "\n  Identifies the state of the comment.\n  "
    state::PullRequestReviewCommentState.T
    "\n  Identifies when the comment was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL permalink for this review comment.\n  "
    url::URI
    "\n  A list of edits to this content.\n  "
    userContentEdits::Union{UserContentEditConnection, Missing, Nothing}
    "\n  Check if the current viewer can delete this object.\n  "
    viewerCanDelete::Bool
    "\n  Check if the current viewer can minimize this object.\n  "
    viewerCanMinimize::Bool
    "\n  Can user react to this subject\n  "
    viewerCanReact::Bool
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  Reasons why the current viewer can not update this comment.\n  "
    viewerCannotUpdateReasons::Vector{CommentCannotUpdateReason.T}
    "\n  Did the viewer author this comment.\n  "
    viewerDidAuthor::Bool
end
function PullRequestReviewComment(; author = nothing, authorAssociation, body, bodyHTML, bodyText, commit = nothing, createdAt, createdViaEmail, databaseId = nothing, diffHunk, draftedAt, editor = nothing, id, includesCreatedEdit, isMinimized, lastEditedAt = nothing, minimizedReason = nothing, originalCommit = nothing, originalPosition, outdated, path, position = nothing, publishedAt = nothing, pullRequest, pullRequestReview = nothing, reactionGroups = nothing, reactions, replyTo = nothing, repository, resourcePath, state, updatedAt, url, userContentEdits = nothing, viewerCanDelete, viewerCanMinimize, viewerCanReact, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor)
    PullRequestReviewComment(author, authorAssociation, body, bodyHTML, bodyText, commit, createdAt, createdViaEmail, databaseId, diffHunk, draftedAt, editor, id, includesCreatedEdit, isMinimized, lastEditedAt, minimizedReason, originalCommit, originalPosition, outdated, path, position, publishedAt, pullRequest, pullRequestReview, reactionGroups, reactions, replyTo, repository, resourcePath, state, updatedAt, url, userContentEdits, viewerCanDelete, viewerCanMinimize, viewerCanReact, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor)
end
function Base.getproperty(t::PullRequestReviewComment, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    elseif sym === Symbol("pullRequestReview")
        getfield(t, Symbol("pullRequestReview"))::Union{PullRequestReview, Missing, Nothing}
    elseif sym === Symbol("reactionGroups")
        getfield(t, Symbol("reactionGroups"))::Union{Vector{ReactionGroup}, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PullRequestReviewComment, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    elseif sym === Symbol("pullRequestReview")
        setfield!(t, Symbol("pullRequestReview"), val::Union{PullRequestReview, Missing, Nothing})
    elseif sym === Symbol("reactionGroups")
        setfield!(t, Symbol("reactionGroups"), val::Union{Vector{ReactionGroup}, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct PullRequestReviewCommentEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PullRequestReviewComment, Missing, Nothing}
end
function PullRequestReviewCommentEdge(; cursor, node = nothing)
    PullRequestReviewCommentEdge(cursor, node)
end

"""
The connection type for PullRequestReviewComment.
"""
mutable struct PullRequestReviewCommentConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PullRequestReviewCommentEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PullRequestReviewComment, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PullRequestReviewCommentConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PullRequestReviewCommentConnection(edges, nodes, pageInfo, totalCount)
end

"""
A review object for a given pull request.
"""
mutable struct PullRequestReview <: OfficialGithubSchema
    "\n  The actor who authored the comment.\n  "
    author::Union{Actor, Missing, Nothing}
    "\n  Author's association with the subject of the comment.\n  "
    authorAssociation::CommentAuthorAssociation.T
    "\n  Indicates whether the author of this review has push access to the repository.\n  "
    authorCanPushToRepository::Bool
    "\n  Identifies the pull request review body.\n  "
    body::String
    "\n  The body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  The body of this review rendered as plain text.\n  "
    bodyText::String
    "\n  A list of review comments for the current pull request review.\n  "
    comments::PullRequestReviewCommentConnection
    "\n  Identifies the commit associated with this pull request review.\n  "
    commit::Union{Commit, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Check if this comment was created via an email reply.\n  "
    createdViaEmail::Bool
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The actor who edited the comment.\n  "
    editor::Union{Actor, Missing, Nothing}
    id::String
    "\n  Check if this comment was edited and includes an edit with the creation data\n  "
    includesCreatedEdit::Bool
    "\n  The moment the editor made the last edit\n  "
    lastEditedAt::Union{DateTime, Missing, Nothing}
    "\n  A list of teams that this review was made on behalf of.\n  "
    onBehalfOf::TeamConnection
    "\n  Identifies when the comment was published at.\n  "
    publishedAt::Union{DateTime, Missing, Nothing}
    pullRequest
    reactionGroups
    "\n  A list of Reactions left on the Issue.\n  "
    reactions::ReactionConnection
    repository
    "\n  The HTTP path permalink for this PullRequestReview.\n  "
    resourcePath::URI
    "\n  Identifies the current state of the pull request review.\n  "
    state::PullRequestReviewState.T
    "\n  Identifies when the Pull Request Review was submitted\n  "
    submittedAt::Union{DateTime, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL permalink for this PullRequestReview.\n  "
    url::URI
    "\n  A list of edits to this content.\n  "
    userContentEdits::Union{UserContentEditConnection, Missing, Nothing}
    "\n  Check if the current viewer can delete this object.\n  "
    viewerCanDelete::Bool
    "\n  Can user react to this subject\n  "
    viewerCanReact::Bool
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  Reasons why the current viewer can not update this comment.\n  "
    viewerCannotUpdateReasons::Vector{CommentCannotUpdateReason.T}
    "\n  Did the viewer author this comment.\n  "
    viewerDidAuthor::Bool
end
function PullRequestReview(; author = nothing, authorAssociation, authorCanPushToRepository, body, bodyHTML, bodyText, comments, commit = nothing, createdAt, createdViaEmail, databaseId = nothing, editor = nothing, id, includesCreatedEdit, lastEditedAt = nothing, onBehalfOf, publishedAt = nothing, pullRequest, reactionGroups = nothing, reactions, repository, resourcePath, state, submittedAt = nothing, updatedAt, url, userContentEdits = nothing, viewerCanDelete, viewerCanReact, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor)
    PullRequestReview(author, authorAssociation, authorCanPushToRepository, body, bodyHTML, bodyText, comments, commit, createdAt, createdViaEmail, databaseId, editor, id, includesCreatedEdit, lastEditedAt, onBehalfOf, publishedAt, pullRequest, reactionGroups, reactions, repository, resourcePath, state, submittedAt, updatedAt, url, userContentEdits, viewerCanDelete, viewerCanReact, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor)
end
function Base.getproperty(t::PullRequestReview, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    elseif sym === Symbol("reactionGroups")
        getfield(t, Symbol("reactionGroups"))::Union{Vector{ReactionGroup}, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PullRequestReview, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    elseif sym === Symbol("reactionGroups")
        setfield!(t, Symbol("reactionGroups"), val::Union{Vector{ReactionGroup}, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct PullRequestReviewEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PullRequestReview, Missing, Nothing}
end
function PullRequestReviewEdge(; cursor, node = nothing)
    PullRequestReviewEdge(cursor, node)
end

"""
The connection type for PullRequestReview.
"""
mutable struct PullRequestReviewConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PullRequestReviewEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PullRequestReview, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PullRequestReviewConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PullRequestReviewConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct IssueEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
end
function IssueEdge(; cursor, node = nothing)
    IssueEdge(cursor, node)
end
function Base.getproperty(t::IssueEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{Issue, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::IssueEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{Issue, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for Issue.
"""
mutable struct IssueConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{IssueEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function IssueConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    IssueConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::IssueConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{Issue, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::IssueConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{Issue, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
"""
mutable struct Label <: OfficialGithubSchema
    "\n  Identifies the label color.\n  "
    color::String
    "\n  Identifies the date and time when the label was created.\n  "
    createdAt::Union{DateTime, Missing, Nothing}
    "\n  A brief description of this label.\n  "
    description::Union{String, Missing, Nothing}
    id::String
    "\n  Indicates whether or not this is a default label.\n  "
    isDefault::Bool
    "\n  A list of issues associated with this label.\n  "
    issues::IssueConnection
    "\n  Identifies the label name.\n  "
    name::String
    pullRequests
    repository
    "\n  The HTTP path for this label.\n  "
    resourcePath::URI
    "\n  Identifies the date and time when the label was last updated.\n  "
    updatedAt::Union{DateTime, Missing, Nothing}
    "\n  The HTTP URL for this label.\n  "
    url::URI
end
function Label(; color, createdAt = nothing, description = nothing, id, isDefault, issues, name, pullRequests, repository, resourcePath, updatedAt = nothing, url)
    Label(color, createdAt, description, id, isDefault, issues, name, pullRequests, repository, resourcePath, updatedAt, url)
end
function Base.getproperty(t::Label, sym::Symbol)
    if sym === Symbol("pullRequests")
        getfield(t, Symbol("pullRequests"))::PullRequestConnection
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Label, sym::Symbol, val::Any)
    if sym === Symbol("pullRequests")
        setfield!(t, Symbol("pullRequests"), val::PullRequestConnection)
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct LabelEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Label, Missing, Nothing}
end
function LabelEdge(; cursor, node = nothing)
    LabelEdge(cursor, node)
end

"""
The connection type for Label.
"""
mutable struct LabelConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{LabelEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Label, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function LabelConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    LabelConnection(edges, nodes, pageInfo, totalCount)
end

Core.@doc "Any referencable object" const ReferencedSubject = Union{Issue, PullRequest}

"""
Represents a 'referenced' event on a given `ReferencedSubject`.
"""
mutable struct ReferencedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the commit associated with the 'referenced' event.\n  "
    commit::Union{Commit, Missing, Nothing}
    commitRepository
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Reference originated in a different repository.\n  "
    isCrossRepository::Bool
    "\n  Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.\n  "
    isDirectReference::Bool
    "\n  Object referenced by event.\n  "
    subject::ReferencedSubject
end
function ReferencedEvent(; actor = nothing, commit = nothing, commitRepository, createdAt, id, isCrossRepository, isDirectReference, subject)
    ReferencedEvent(actor, commit, commitRepository, createdAt, id, isCrossRepository, isDirectReference, subject)
end
function Base.getproperty(t::ReferencedEvent, sym::Symbol)
    if sym === Symbol("commitRepository")
        getfield(t, Symbol("commitRepository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ReferencedEvent, sym::Symbol, val::Any)
    if sym === Symbol("commitRepository")
        setfield!(t, Symbol("commitRepository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents an 'unlabeled' event on a given issue or pull request.
"""
mutable struct UnlabeledEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Identifies the label associated with the 'unlabeled' event.\n  "
    label::Label
    "\n  Identifies the `Labelable` associated with the event.\n  "
    labelable::Labelable
end
function UnlabeledEvent(; actor = nothing, createdAt, id, label, labelable)
    UnlabeledEvent(actor, createdAt, id, label, labelable)
end

"""
Represents a 'deployment_environment_changed' event on a given pull request.
"""
mutable struct DeploymentEnvironmentChangedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The deployment status that updated the deployment environment.\n  "
    deploymentStatus::DeploymentStatus
    id::String
    pullRequest
end
function DeploymentEnvironmentChangedEvent(; actor = nothing, createdAt, deploymentStatus, id, pullRequest)
    DeploymentEnvironmentChangedEvent(actor, createdAt, deploymentStatus, id, pullRequest)
end
function Base.getproperty(t::DeploymentEnvironmentChangedEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DeploymentEnvironmentChangedEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Types that can be requested reviewers." const RequestedReviewer = Union{Mannequin, Team, User}

"""
Represents an 'review_request_removed' event on a given pull request.
"""
mutable struct ReviewRequestRemovedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    pullRequest
    "\n  Identifies the reviewer whose review request was removed.\n  "
    requestedReviewer::Union{RequestedReviewer, Missing, Nothing}
end
function ReviewRequestRemovedEvent(; actor = nothing, createdAt, id, pullRequest, requestedReviewer = nothing)
    ReviewRequestRemovedEvent(actor, createdAt, id, pullRequest, requestedReviewer)
end
function Base.getproperty(t::ReviewRequestRemovedEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ReviewRequestRemovedEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Types that can be inside a Milestone." const MilestoneItem = Union{Issue, PullRequest}

"""
Represents a 'demilestoned' event on a given issue or pull request.
"""
mutable struct DemilestonedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Identifies the milestone title associated with the 'demilestoned' event.\n  "
    milestoneTitle::String
    "\n  Object referenced by event.\n  "
    subject::MilestoneItem
end
function DemilestonedEvent(; actor = nothing, createdAt, id, milestoneTitle, subject)
    DemilestonedEvent(actor, createdAt, id, milestoneTitle, subject)
end

"""
Represents a 'reopened' event on any `Closable`.
"""
mutable struct ReopenedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Object that was reopened.\n  "
    closable::Closable
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  The reason the issue state was changed to open.\n  "
    stateReason::Union{IssueStateReason.T, Missing, Nothing}
end
function ReopenedEvent(; actor = nothing, closable, createdAt, id, stateReason = nothing)
    ReopenedEvent(actor, closable, createdAt, id, stateReason)
end

Core.@doc "An object which has a renamable title" const RenamedTitleSubject = Union{Issue, PullRequest}

"""
Represents a 'renamed' event on a given issue or pull request
"""
mutable struct RenamedTitleEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the current title of the issue or pull request.\n  "
    currentTitle::String
    id::String
    "\n  Identifies the previous title of the issue or pull request.\n  "
    previousTitle::String
    "\n  Subject that was renamed.\n  "
    subject::RenamedTitleSubject
end
function RenamedTitleEvent(; actor = nothing, createdAt, currentTitle, id, previousTitle, subject)
    RenamedTitleEvent(actor, createdAt, currentTitle, id, previousTitle, subject)
end

"""
Represents a Git commit part of a pull request.
"""
mutable struct PullRequestCommit <: OfficialGithubSchema
    "\n  The Git commit object\n  "
    commit::Commit
    id::String
    pullRequest
    "\n  The HTTP path for this pull request commit\n  "
    resourcePath::URI
    "\n  The HTTP URL for this pull request commit\n  "
    url::URI
end
function PullRequestCommit(; commit, id, pullRequest, resourcePath, url)
    PullRequestCommit(commit, id, pullRequest, resourcePath, url)
end
function Base.getproperty(t::PullRequestCommit, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PullRequestCommit, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
mutable struct ReviewDismissedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  Identifies the optional message associated with the 'review_dismissed' event.\n  "
    dismissalMessage::Union{String, Missing, Nothing}
    "\n  Identifies the optional message associated with the event, rendered to HTML.\n  "
    dismissalMessageHTML::Union{String, Missing, Nothing}
    id::String
    "\n  Identifies the previous state of the review with the 'review_dismissed' event.\n  "
    previousReviewState::PullRequestReviewState.T
    pullRequest
    "\n  Identifies the commit which caused the review to become stale.\n  "
    pullRequestCommit::Union{PullRequestCommit, Missing, Nothing}
    "\n  The HTTP path for this review dismissed event.\n  "
    resourcePath::URI
    "\n  Identifies the review associated with the 'review_dismissed' event.\n  "
    review::Union{PullRequestReview, Missing, Nothing}
    "\n  The HTTP URL for this review dismissed event.\n  "
    url::URI
end
function ReviewDismissedEvent(; actor = nothing, createdAt, databaseId = nothing, dismissalMessage = nothing, dismissalMessageHTML = nothing, id, previousReviewState, pullRequest, pullRequestCommit = nothing, resourcePath, review = nothing, url)
    ReviewDismissedEvent(actor, createdAt, databaseId, dismissalMessage, dismissalMessageHTML, id, previousReviewState, pullRequest, pullRequestCommit, resourcePath, review, url)
end
function Base.getproperty(t::ReviewDismissedEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ReviewDismissedEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'labeled' event on a given issue or pull request.
"""
mutable struct LabeledEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Identifies the label associated with the 'labeled' event.\n  "
    label::Label
    "\n  Identifies the `Labelable` associated with the event.\n  "
    labelable::Labelable
end
function LabeledEvent(; actor = nothing, createdAt, id, label, labelable)
    LabeledEvent(actor, createdAt, id, label, labelable)
end

Core.@doc "The object which triggered a `ClosedEvent`." const Closer = Union{Commit, PullRequest}

"""
Represents a 'closed' event on any `Closable`.
"""
mutable struct ClosedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Object that was closed.\n  "
    closable::Closable
    "\n  Object which triggered the creation of this event.\n  "
    closer::Union{Closer, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  The HTTP path for this closed event.\n  "
    resourcePath::URI
    "\n  The reason the issue state was changed to closed.\n  "
    stateReason::Union{IssueStateReason.T, Missing, Nothing}
    "\n  The HTTP URL for this closed event.\n  "
    url::URI
end
function ClosedEvent(; actor = nothing, closable, closer = nothing, createdAt, id, resourcePath, stateReason = nothing, url)
    ClosedEvent(actor, closable, closer, createdAt, id, resourcePath, stateReason, url)
end

"""
Represents a 'deployed' event on a given pull request.
"""
mutable struct DeployedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The deployment associated with the 'deployed' event.\n  "
    deployment::Deployment
    id::String
    pullRequest
    ref
end
function DeployedEvent(; actor = nothing, createdAt, databaseId = nothing, deployment, id, pullRequest, ref = nothing)
    DeployedEvent(actor, createdAt, databaseId, deployment, id, pullRequest, ref)
end
function Base.getproperty(t::DeployedEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    elseif sym === Symbol("ref")
        getfield(t, Symbol("ref"))::Union{Ref, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DeployedEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    elseif sym === Symbol("ref")
        setfield!(t, Symbol("ref"), val::Union{Ref, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A thread of comments on a commit.
"""
mutable struct CommitCommentThread <: OfficialGithubSchema
    "\n  The comments that exist in this thread.\n  "
    comments::CommitCommentConnection
    "\n  The commit the comments were made on.\n  "
    commit::Union{Commit, Missing, Nothing}
    id::String
    "\n  The file the comments were made on.\n  "
    path::Union{String, Missing, Nothing}
    "\n  The position in the diff for the commit that the comment was made on.\n  "
    position::Union{Int, Missing, Nothing}
    repository
end
function CommitCommentThread(; comments, commit = nothing, id, path = nothing, position = nothing, repository)
    CommitCommentThread(comments, commit, id, path, position, repository)
end
function Base.getproperty(t::CommitCommentThread, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CommitCommentThread, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'subscribed' event on a given `Subscribable`.
"""
mutable struct SubscribedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Object referenced by event.\n  "
    subscribable::Subscribable
end
function SubscribedEvent(; actor = nothing, createdAt, id, subscribable)
    SubscribedEvent(actor, createdAt, id, subscribable)
end

"""
Represents an 'unsubscribed' event on a given `Subscribable`.
"""
mutable struct UnsubscribedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Object referenced by event.\n  "
    subscribable::Subscribable
end
function UnsubscribedEvent(; actor = nothing, createdAt, id, subscribable)
    UnsubscribedEvent(actor, createdAt, id, subscribable)
end

"""
A threaded list of comments for a given pull request.
"""
mutable struct PullRequestReviewThread <: OfficialGithubSchema
    "\n  A list of pull request comments associated with the thread.\n  "
    comments::PullRequestReviewCommentConnection
    "\n  The side of the diff on which this thread was placed.\n  "
    diffSide::DiffSide.T
    id::String
    "\n  Whether or not the thread has been collapsed (resolved)\n  "
    isCollapsed::Bool
    "\n  Indicates whether this thread was outdated by newer changes.\n  "
    isOutdated::Bool
    "\n  Whether this thread has been resolved\n  "
    isResolved::Bool
    "\n  The line in the file to which this thread refers\n  "
    line::Union{Int, Missing, Nothing}
    "\n  The original line in the file to which this thread refers.\n  "
    originalLine::Union{Int, Missing, Nothing}
    "\n  The original start line in the file to which this thread refers (multi-line only).\n  "
    originalStartLine::Union{Int, Missing, Nothing}
    "\n  Identifies the file path of this thread.\n  "
    path::String
    pullRequest
    repository
    resolvedBy
    "\n  The side of the diff that the first line of the thread starts on (multi-line only)\n  "
    startDiffSide::Union{DiffSide.T, Missing, Nothing}
    "\n  The start line in the file to which this thread refers (multi-line only)\n  "
    startLine::Union{Int, Missing, Nothing}
    "\n  Indicates whether the current viewer can reply to this thread.\n  "
    viewerCanReply::Bool
    "\n  Whether or not the viewer can resolve this thread\n  "
    viewerCanResolve::Bool
    "\n  Whether or not the viewer can unresolve this thread\n  "
    viewerCanUnresolve::Bool
end
function PullRequestReviewThread(; comments, diffSide, id, isCollapsed, isOutdated, isResolved, line = nothing, originalLine = nothing, originalStartLine = nothing, path, pullRequest, repository, resolvedBy = nothing, startDiffSide = nothing, startLine = nothing, viewerCanReply, viewerCanResolve, viewerCanUnresolve)
    PullRequestReviewThread(comments, diffSide, id, isCollapsed, isOutdated, isResolved, line, originalLine, originalStartLine, path, pullRequest, repository, resolvedBy, startDiffSide, startLine, viewerCanReply, viewerCanResolve, viewerCanUnresolve)
end
function Base.getproperty(t::PullRequestReviewThread, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    elseif sym === Symbol("resolvedBy")
        getfield(t, Symbol("resolvedBy"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PullRequestReviewThread, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    elseif sym === Symbol("resolvedBy")
        setfield!(t, Symbol("resolvedBy"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'head_ref_force_pushed' event on a given pull request.
"""
mutable struct HeadRefForcePushedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the after commit SHA for the 'head_ref_force_pushed' event.\n  "
    afterCommit::Union{Commit, Missing, Nothing}
    "\n  Identifies the before commit SHA for the 'head_ref_force_pushed' event.\n  "
    beforeCommit::Union{Commit, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    pullRequest
    ref
end
function HeadRefForcePushedEvent(; actor = nothing, afterCommit = nothing, beforeCommit = nothing, createdAt, id, pullRequest, ref = nothing)
    HeadRefForcePushedEvent(actor, afterCommit, beforeCommit, createdAt, id, pullRequest, ref)
end
function Base.getproperty(t::HeadRefForcePushedEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    elseif sym === Symbol("ref")
        getfield(t, Symbol("ref"))::Union{Ref, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::HeadRefForcePushedEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    elseif sym === Symbol("ref")
        setfield!(t, Symbol("ref"), val::Union{Ref, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'milestoned' event on a given issue or pull request.
"""
mutable struct MilestonedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Identifies the milestone title associated with the 'milestoned' event.\n  "
    milestoneTitle::String
    "\n  Object referenced by event.\n  "
    subject::MilestoneItem
end
function MilestonedEvent(; actor = nothing, createdAt, id, milestoneTitle, subject)
    MilestonedEvent(actor, createdAt, id, milestoneTitle, subject)
end

"""
Represents an 'unlocked' event on a given issue or pull request.
"""
mutable struct UnlockedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Object that was unlocked.\n  "
    lockable::Lockable
end
function UnlockedEvent(; actor = nothing, createdAt, id, lockable)
    UnlockedEvent(actor, createdAt, id, lockable)
end

"""
Represents a 'locked' event on a given issue or pull request.
"""
mutable struct LockedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Reason that the conversation was locked (optional).\n  "
    lockReason::Union{LockReason.T, Missing, Nothing}
    "\n  Object that was locked.\n  "
    lockable::Lockable
end
function LockedEvent(; actor = nothing, createdAt, id, lockReason = nothing, lockable)
    LockedEvent(actor, createdAt, id, lockReason, lockable)
end

"""
Represents a 'base_ref_force_pushed' event on a given pull request.
"""
mutable struct BaseRefForcePushedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the after commit SHA for the 'base_ref_force_pushed' event.\n  "
    afterCommit::Union{Commit, Missing, Nothing}
    "\n  Identifies the before commit SHA for the 'base_ref_force_pushed' event.\n  "
    beforeCommit::Union{Commit, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    pullRequest
    ref
end
function BaseRefForcePushedEvent(; actor = nothing, afterCommit = nothing, beforeCommit = nothing, createdAt, id, pullRequest, ref = nothing)
    BaseRefForcePushedEvent(actor, afterCommit, beforeCommit, createdAt, id, pullRequest, ref)
end
function Base.getproperty(t::BaseRefForcePushedEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    elseif sym === Symbol("ref")
        getfield(t, Symbol("ref"))::Union{Ref, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::BaseRefForcePushedEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    elseif sym === Symbol("ref")
        setfield!(t, Symbol("ref"), val::Union{Ref, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Types that can be assigned to issues." const Assignee = Union{Bot, Mannequin, Organization, User}

"""
Represents an 'assigned' event on any assignable object.
"""
mutable struct AssignedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the assignable associated with the event.\n  "
    assignable::Assignable
    "\n  Identifies the user or mannequin that was assigned.\n  "
    assignee::Union{Assignee, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    user
end
function AssignedEvent(; actor = nothing, assignable, assignee = nothing, createdAt, id, user = nothing)
    AssignedEvent(actor, assignable, assignee, createdAt, id, user)
end
function Base.getproperty(t::AssignedEvent, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::AssignedEvent, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a mention made by one issue or pull request to another.
"""
mutable struct CrossReferencedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Reference originated in a different repository.\n  "
    isCrossRepository::Bool
    "\n  Identifies when the reference was made.\n  "
    referencedAt::DateTime
    "\n  The HTTP path for this pull request.\n  "
    resourcePath::URI
    "\n  Issue or pull request that made the reference.\n  "
    source::ReferencedSubject
    "\n  Issue or pull request to which the reference was made.\n  "
    target::ReferencedSubject
    "\n  The HTTP URL for this pull request.\n  "
    url::URI
    "\n  Checks if the target will be closed when the source is merged.\n  "
    willCloseTarget::Bool
end
function CrossReferencedEvent(; actor = nothing, createdAt, id, isCrossRepository, referencedAt, resourcePath, source, target, url, willCloseTarget)
    CrossReferencedEvent(actor, createdAt, id, isCrossRepository, referencedAt, resourcePath, source, target, url, willCloseTarget)
end

"""
Represents a 'user_blocked' event on a given user.
"""
mutable struct UserBlockedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Number of days that the user was blocked for.\n  "
    blockDuration::UserBlockDuration.T
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    subject
end
function UserBlockedEvent(; actor = nothing, blockDuration, createdAt, id, subject = nothing)
    UserBlockedEvent(actor, blockDuration, createdAt, id, subject)
end
function Base.getproperty(t::UserBlockedEvent, sym::Symbol)
    if sym === Symbol("subject")
        getfield(t, Symbol("subject"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::UserBlockedEvent, sym::Symbol, val::Any)
    if sym === Symbol("subject")
        setfield!(t, Symbol("subject"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents an 'review_requested' event on a given pull request.
"""
mutable struct ReviewRequestedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    pullRequest
    "\n  Identifies the reviewer whose review was requested.\n  "
    requestedReviewer::Union{RequestedReviewer, Missing, Nothing}
end
function ReviewRequestedEvent(; actor = nothing, createdAt, id, pullRequest, requestedReviewer = nothing)
    ReviewRequestedEvent(actor, createdAt, id, pullRequest, requestedReviewer)
end
function Base.getproperty(t::ReviewRequestedEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ReviewRequestedEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'merged' event on a given pull request.
"""
mutable struct MergedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the commit associated with the `merge` event.\n  "
    commit::Union{Commit, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    mergeRef
    "\n  Identifies the name of the Ref associated with the `merge` event.\n  "
    mergeRefName::String
    pullRequest
    "\n  The HTTP path for this merged event.\n  "
    resourcePath::URI
    "\n  The HTTP URL for this merged event.\n  "
    url::URI
end
function MergedEvent(; actor = nothing, commit = nothing, createdAt, id, mergeRef = nothing, mergeRefName, pullRequest, resourcePath, url)
    MergedEvent(actor, commit, createdAt, id, mergeRef, mergeRefName, pullRequest, resourcePath, url)
end
function Base.getproperty(t::MergedEvent, sym::Symbol)
    if sym === Symbol("mergeRef")
        getfield(t, Symbol("mergeRef"))::Union{Ref, Missing, Nothing}
    elseif sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::MergedEvent, sym::Symbol, val::Any)
    if sym === Symbol("mergeRef")
        setfield!(t, Symbol("mergeRef"), val::Union{Ref, Missing, Nothing})
    elseif sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a comment on an Issue.
"""
mutable struct IssueComment <: OfficialGithubSchema
    "\n  The actor who authored the comment.\n  "
    author::Union{Actor, Missing, Nothing}
    "\n  Author's association with the subject of the comment.\n  "
    authorAssociation::CommentAuthorAssociation.T
    "\n  The body as Markdown.\n  "
    body::String
    "\n  The body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  The body rendered to text.\n  "
    bodyText::String
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Check if this comment was created via an email reply.\n  "
    createdViaEmail::Bool
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The actor who edited the comment.\n  "
    editor::Union{Actor, Missing, Nothing}
    id::String
    "\n  Check if this comment was edited and includes an edit with the creation data\n  "
    includesCreatedEdit::Bool
    "\n  Returns whether or not a comment has been minimized.\n  "
    isMinimized::Bool
    issue
    "\n  The moment the editor made the last edit\n  "
    lastEditedAt::Union{DateTime, Missing, Nothing}
    "\n  Returns why the comment was minimized. One of `abuse`, `off-topic`,\n  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\n  formatting of these values differs from the inputs to the `MinimizeComment` mutation.\n  "
    minimizedReason::Union{String, Missing, Nothing}
    "\n  Identifies when the comment was published at.\n  "
    publishedAt::Union{DateTime, Missing, Nothing}
    pullRequest
    reactionGroups
    "\n  A list of Reactions left on the Issue.\n  "
    reactions::ReactionConnection
    repository
    "\n  The HTTP path for this issue comment\n  "
    resourcePath::URI
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this issue comment\n  "
    url::URI
    "\n  A list of edits to this content.\n  "
    userContentEdits::Union{UserContentEditConnection, Missing, Nothing}
    "\n  Check if the current viewer can delete this object.\n  "
    viewerCanDelete::Bool
    "\n  Check if the current viewer can minimize this object.\n  "
    viewerCanMinimize::Bool
    "\n  Can user react to this subject\n  "
    viewerCanReact::Bool
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  Reasons why the current viewer can not update this comment.\n  "
    viewerCannotUpdateReasons::Vector{CommentCannotUpdateReason.T}
    "\n  Did the viewer author this comment.\n  "
    viewerDidAuthor::Bool
end
function IssueComment(; author = nothing, authorAssociation, body, bodyHTML, bodyText, createdAt, createdViaEmail, databaseId = nothing, editor = nothing, id, includesCreatedEdit, isMinimized, issue, lastEditedAt = nothing, minimizedReason = nothing, publishedAt = nothing, pullRequest = nothing, reactionGroups = nothing, reactions, repository, resourcePath, updatedAt, url, userContentEdits = nothing, viewerCanDelete, viewerCanMinimize, viewerCanReact, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor)
    IssueComment(author, authorAssociation, body, bodyHTML, bodyText, createdAt, createdViaEmail, databaseId, editor, id, includesCreatedEdit, isMinimized, issue, lastEditedAt, minimizedReason, publishedAt, pullRequest, reactionGroups, reactions, repository, resourcePath, updatedAt, url, userContentEdits, viewerCanDelete, viewerCanMinimize, viewerCanReact, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor)
end
function Base.getproperty(t::IssueComment, sym::Symbol)
    if sym === Symbol("issue")
        getfield(t, Symbol("issue"))::Issue
    elseif sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::Union{PullRequest, Missing, Nothing}
    elseif sym === Symbol("reactionGroups")
        getfield(t, Symbol("reactionGroups"))::Union{Vector{ReactionGroup}, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::IssueComment, sym::Symbol, val::Any)
    if sym === Symbol("issue")
        setfield!(t, Symbol("issue"), val::Issue)
    elseif sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::Union{PullRequest, Missing, Nothing})
    elseif sym === Symbol("reactionGroups")
        setfield!(t, Symbol("reactionGroups"), val::Union{Vector{ReactionGroup}, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'base_ref_deleted' event on a given pull request.
"""
mutable struct BaseRefDeletedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the name of the Ref associated with the `base_ref_deleted` event.\n  "
    baseRefName::Union{String, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    pullRequest
end
function BaseRefDeletedEvent(; actor = nothing, baseRefName = nothing, createdAt, id, pullRequest = nothing)
    BaseRefDeletedEvent(actor, baseRefName, createdAt, id, pullRequest)
end
function Base.getproperty(t::BaseRefDeletedEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::Union{PullRequest, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::BaseRefDeletedEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::Union{PullRequest, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'head_ref_deleted' event on a given pull request.
"""
mutable struct HeadRefDeletedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    headRef
    "\n  Identifies the name of the Ref associated with the `head_ref_deleted` event.\n  "
    headRefName::String
    id::String
    pullRequest
end
function HeadRefDeletedEvent(; actor = nothing, createdAt, headRef = nothing, headRefName, id, pullRequest)
    HeadRefDeletedEvent(actor, createdAt, headRef, headRefName, id, pullRequest)
end
function Base.getproperty(t::HeadRefDeletedEvent, sym::Symbol)
    if sym === Symbol("headRef")
        getfield(t, Symbol("headRef"))::Union{Ref, Missing, Nothing}
    elseif sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::HeadRefDeletedEvent, sym::Symbol, val::Any)
    if sym === Symbol("headRef")
        setfield!(t, Symbol("headRef"), val::Union{Ref, Missing, Nothing})
    elseif sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'head_ref_restored' event on a given pull request.
"""
mutable struct HeadRefRestoredEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    pullRequest
end
function HeadRefRestoredEvent(; actor = nothing, createdAt, id, pullRequest)
    HeadRefRestoredEvent(actor, createdAt, id, pullRequest)
end
function Base.getproperty(t::HeadRefRestoredEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::HeadRefRestoredEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents an 'unassigned' event on any assignable object.
"""
mutable struct UnassignedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the assignable associated with the event.\n  "
    assignable::Assignable
    "\n  Identifies the user or mannequin that was unassigned.\n  "
    assignee::Union{Assignee, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    user
end
function UnassignedEvent(; actor = nothing, assignable, assignee = nothing, createdAt, id, user = nothing)
    UnassignedEvent(actor, assignable, assignee, createdAt, id, user)
end
function Base.getproperty(t::UnassignedEvent, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::UnassignedEvent, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "An item in a pull request timeline" const PullRequestTimelineItem = Union{AssignedEvent, BaseRefDeletedEvent, BaseRefForcePushedEvent, ClosedEvent, Commit, CommitCommentThread, CrossReferencedEvent, DemilestonedEvent, DeployedEvent, DeploymentEnvironmentChangedEvent, HeadRefDeletedEvent, HeadRefForcePushedEvent, HeadRefRestoredEvent, IssueComment, LabeledEvent, LockedEvent, MergedEvent, MilestonedEvent, PullRequestReview, PullRequestReviewComment, PullRequestReviewThread, ReferencedEvent, RenamedTitleEvent, ReopenedEvent, ReviewDismissedEvent, ReviewRequestRemovedEvent, ReviewRequestedEvent, SubscribedEvent, UnassignedEvent, UnlabeledEvent, UnlockedEvent, UnsubscribedEvent, UserBlockedEvent}

"""
An edge in a connection.
"""
mutable struct PullRequestTimelineItemEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PullRequestTimelineItem, Missing, Nothing}
end
function PullRequestTimelineItemEdge(; cursor, node = nothing)
    PullRequestTimelineItemEdge(cursor, node)
end

"""
The connection type for PullRequestTimelineItem.
"""
mutable struct PullRequestTimelineConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PullRequestTimelineItemEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PullRequestTimelineItem, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PullRequestTimelineConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PullRequestTimelineConnection(edges, nodes, pageInfo, totalCount)
end

"""
A request for a user to review a pull request.
"""
mutable struct ReviewRequest <: OfficialGithubSchema
    "\n  Whether this request was created for a code owner\n  "
    asCodeOwner::Bool
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    pullRequest
    "\n  The reviewer that is requested.\n  "
    requestedReviewer::Union{RequestedReviewer, Missing, Nothing}
end
function ReviewRequest(; asCodeOwner, databaseId = nothing, id, pullRequest, requestedReviewer = nothing)
    ReviewRequest(asCodeOwner, databaseId, id, pullRequest, requestedReviewer)
end
function Base.getproperty(t::ReviewRequest, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ReviewRequest, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a Milestone object on a given repository.
"""
mutable struct Milestone <: OfficialGithubSchema
    "\n  `true` if the object is closed (definition of closed may depend on type)\n  "
    closed::Bool
    "\n  Identifies the date and time when the object was closed.\n  "
    closedAt::Union{DateTime, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the actor who created the milestone.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the description of the milestone.\n  "
    description::Union{String, Missing, Nothing}
    "\n  Identifies the due date of the milestone.\n  "
    dueOn::Union{DateTime, Missing, Nothing}
    id::String
    "\n  A list of issues associated with the milestone.\n  "
    issues::IssueConnection
    "\n  Identifies the number of the milestone.\n  "
    number::Int
    "\n  Identifies the percentage complete for the milestone\n  "
    progressPercentage::Float64
    pullRequests
    repository
    "\n  The HTTP path for this milestone\n  "
    resourcePath::URI
    "\n  Identifies the state of the milestone.\n  "
    state::MilestoneState.T
    "\n  Identifies the title of the milestone.\n  "
    title::String
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this milestone\n  "
    url::URI
end
function Milestone(; closed, closedAt = nothing, createdAt, creator = nothing, description = nothing, dueOn = nothing, id, issues, number, progressPercentage, pullRequests, repository, resourcePath, state, title, updatedAt, url)
    Milestone(closed, closedAt, createdAt, creator, description, dueOn, id, issues, number, progressPercentage, pullRequests, repository, resourcePath, state, title, updatedAt, url)
end
function Base.getproperty(t::Milestone, sym::Symbol)
    if sym === Symbol("pullRequests")
        getfield(t, Symbol("pullRequests"))::PullRequestConnection
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Milestone, sym::Symbol, val::Any)
    if sym === Symbol("pullRequests")
        setfield!(t, Symbol("pullRequests"), val::PullRequestConnection)
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
Detail needed to display a hovercard for a user
"""
mutable struct Hovercard <: OfficialGithubSchema
    "\n  Each of the contexts for this hovercard\n  "
    contexts::Vector{HovercardContext}
end
function Hovercard(; contexts)
    Hovercard(contexts)
end

"""
The value of a repository field in a Project item.
"""
mutable struct ProjectV2ItemFieldRepositoryValue <: OfficialGithubSchema
    "\n  The field that contains this value.\n  "
    field::ProjectV2FieldConfiguration
    repository
end
function ProjectV2ItemFieldRepositoryValue(; field, repository = nothing)
    ProjectV2ItemFieldRepositoryValue(field, repository)
end
function Base.getproperty(t::ProjectV2ItemFieldRepositoryValue, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2ItemFieldRepositoryValue, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The value of the labels field in a Project item.
"""
mutable struct ProjectV2ItemFieldLabelValue <: OfficialGithubSchema
    "\n  The field that contains this value.\n  "
    field::ProjectV2FieldConfiguration
    "\n  Labels value of a field\n  "
    labels::Union{LabelConnection, Missing, Nothing}
end
function ProjectV2ItemFieldLabelValue(; field, labels = nothing)
    ProjectV2ItemFieldLabelValue(field, labels)
end

"""
An edge in a connection.
"""
mutable struct RequestedReviewerEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{RequestedReviewer, Missing, Nothing}
end
function RequestedReviewerEdge(; cursor, node = nothing)
    RequestedReviewerEdge(cursor, node)
end

"""
The connection type for RequestedReviewer.
"""
mutable struct RequestedReviewerConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{RequestedReviewerEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{RequestedReviewer, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function RequestedReviewerConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    RequestedReviewerConnection(edges, nodes, pageInfo, totalCount)
end

"""
The value of a reviewers field in a Project item.
"""
mutable struct ProjectV2ItemFieldReviewerValue <: OfficialGithubSchema
    "\n  The field that contains this value.\n  "
    field::ProjectV2FieldConfiguration
    "\n  The reviewers for this field.\n  "
    reviewers::Union{RequestedReviewerConnection, Missing, Nothing}
end
function ProjectV2ItemFieldReviewerValue(; field, reviewers = nothing)
    ProjectV2ItemFieldReviewerValue(field, reviewers)
end

"""
The value of a milestone field in a Project item.
"""
mutable struct ProjectV2ItemFieldMilestoneValue <: OfficialGithubSchema
    "\n  The field that contains this value.\n  "
    field::ProjectV2FieldConfiguration
    "\n  Milestone value of a field\n  "
    milestone::Union{Milestone, Missing, Nothing}
end
function ProjectV2ItemFieldMilestoneValue(; field, milestone = nothing)
    ProjectV2ItemFieldMilestoneValue(field, milestone)
end

"""
The value of a number field in a Project item.
"""
mutable struct ProjectV2ItemFieldNumberValue <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who created the item.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The project field that contains this value.\n  "
    field::ProjectV2FieldConfiguration
    id::String
    item
    "\n  Number as a float(8)\n  "
    number::Union{Float64, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function ProjectV2ItemFieldNumberValue(; createdAt, creator = nothing, databaseId = nothing, field, id, item, number = nothing, updatedAt)
    ProjectV2ItemFieldNumberValue(createdAt, creator, databaseId, field, id, item, number, updatedAt)
end
function Base.getproperty(t::ProjectV2ItemFieldNumberValue, sym::Symbol)
    if sym === Symbol("item")
        getfield(t, Symbol("item"))::ProjectV2Item
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2ItemFieldNumberValue, sym::Symbol, val::Any)
    if sym === Symbol("item")
        setfield!(t, Symbol("item"), val::ProjectV2Item)
    else
        setfield!(t, sym, val)
    end
end

"""
The value of a single select field in a Project item.
"""
mutable struct ProjectV2ItemFieldSingleSelectValue <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who created the item.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The project field that contains this value.\n  "
    field::ProjectV2FieldConfiguration
    id::String
    item
    "\n  The name of the selected single select option.\n  "
    name::Union{String, Missing, Nothing}
    "\n  The html name of the selected single select option.\n  "
    nameHTML::Union{String, Missing, Nothing}
    "\n  The id of the selected single select option.\n  "
    optionId::Union{String, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function ProjectV2ItemFieldSingleSelectValue(; createdAt, creator = nothing, databaseId = nothing, field, id, item, name = nothing, nameHTML = nothing, optionId = nothing, updatedAt)
    ProjectV2ItemFieldSingleSelectValue(createdAt, creator, databaseId, field, id, item, name, nameHTML, optionId, updatedAt)
end
function Base.getproperty(t::ProjectV2ItemFieldSingleSelectValue, sym::Symbol)
    if sym === Symbol("item")
        getfield(t, Symbol("item"))::ProjectV2Item
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2ItemFieldSingleSelectValue, sym::Symbol, val::Any)
    if sym === Symbol("item")
        setfield!(t, Symbol("item"), val::ProjectV2Item)
    else
        setfield!(t, sym, val)
    end
end

"""
The value of a text field in a Project item.
"""
mutable struct ProjectV2ItemFieldTextValue <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who created the item.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The project field that contains this value.\n  "
    field::ProjectV2FieldConfiguration
    id::String
    item
    "\n  Text value of a field\n  "
    text::Union{String, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function ProjectV2ItemFieldTextValue(; createdAt, creator = nothing, databaseId = nothing, field, id, item, text = nothing, updatedAt)
    ProjectV2ItemFieldTextValue(createdAt, creator, databaseId, field, id, item, text, updatedAt)
end
function Base.getproperty(t::ProjectV2ItemFieldTextValue, sym::Symbol)
    if sym === Symbol("item")
        getfield(t, Symbol("item"))::ProjectV2Item
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2ItemFieldTextValue, sym::Symbol, val::Any)
    if sym === Symbol("item")
        setfield!(t, Symbol("item"), val::ProjectV2Item)
    else
        setfield!(t, sym, val)
    end
end

"""
The value of a pull request field in a Project item.
"""
mutable struct ProjectV2ItemFieldPullRequestValue <: OfficialGithubSchema
    "\n  The field that contains this value.\n  "
    field::ProjectV2FieldConfiguration
    pullRequests
end
function ProjectV2ItemFieldPullRequestValue(; field, pullRequests = nothing)
    ProjectV2ItemFieldPullRequestValue(field, pullRequests)
end
function Base.getproperty(t::ProjectV2ItemFieldPullRequestValue, sym::Symbol)
    if sym === Symbol("pullRequests")
        getfield(t, Symbol("pullRequests"))::Union{PullRequestConnection, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2ItemFieldPullRequestValue, sym::Symbol, val::Any)
    if sym === Symbol("pullRequests")
        setfield!(t, Symbol("pullRequests"), val::Union{PullRequestConnection, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The value of a date field in a Project item.
"""
mutable struct ProjectV2ItemFieldDateValue <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who created the item.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  Date value for the field\n  "
    date::Union{Date, Missing, Nothing}
    "\n  The project field that contains this value.\n  "
    field::ProjectV2FieldConfiguration
    id::String
    item
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function ProjectV2ItemFieldDateValue(; createdAt, creator = nothing, databaseId = nothing, date = nothing, field, id, item, updatedAt)
    ProjectV2ItemFieldDateValue(createdAt, creator, databaseId, date, field, id, item, updatedAt)
end
function Base.getproperty(t::ProjectV2ItemFieldDateValue, sym::Symbol)
    if sym === Symbol("item")
        getfield(t, Symbol("item"))::ProjectV2Item
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2ItemFieldDateValue, sym::Symbol, val::Any)
    if sym === Symbol("item")
        setfield!(t, Symbol("item"), val::ProjectV2Item)
    else
        setfield!(t, sym, val)
    end
end

"""
The value of an iteration field in a Project item.
"""
mutable struct ProjectV2ItemFieldIterationValue <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who created the item.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The duration of the iteration in days.\n  "
    duration::Int
    "\n  The project field that contains this value.\n  "
    field::ProjectV2FieldConfiguration
    id::String
    item
    "\n  The ID of the iteration.\n  "
    iterationId::String
    "\n  The start date of the iteration.\n  "
    startDate::Date
    "\n  The title of the iteration.\n  "
    title::String
    "\n  The title of the iteration, with HTML.\n  "
    titleHTML::String
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function ProjectV2ItemFieldIterationValue(; createdAt, creator = nothing, databaseId = nothing, duration, field, id, item, iterationId, startDate, title, titleHTML, updatedAt)
    ProjectV2ItemFieldIterationValue(createdAt, creator, databaseId, duration, field, id, item, iterationId, startDate, title, titleHTML, updatedAt)
end
function Base.getproperty(t::ProjectV2ItemFieldIterationValue, sym::Symbol)
    if sym === Symbol("item")
        getfield(t, Symbol("item"))::ProjectV2Item
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2ItemFieldIterationValue, sym::Symbol, val::Any)
    if sym === Symbol("item")
        setfield!(t, Symbol("item"), val::ProjectV2Item)
    else
        setfield!(t, sym, val)
    end
end

"""
The value of a user field in a Project item.
"""
mutable struct ProjectV2ItemFieldUserValue <: OfficialGithubSchema
    "\n  The field that contains this value.\n  "
    field::ProjectV2FieldConfiguration
    "\n  The users for this field\n  "
    users::Union{UserConnection, Missing, Nothing}
end
function ProjectV2ItemFieldUserValue(; field, users = nothing)
    ProjectV2ItemFieldUserValue(field, users)
end

Core.@doc "Project field values" const ProjectV2ItemFieldValue = Union{ProjectV2ItemFieldDateValue, ProjectV2ItemFieldIterationValue, ProjectV2ItemFieldLabelValue, ProjectV2ItemFieldMilestoneValue, ProjectV2ItemFieldNumberValue, ProjectV2ItemFieldPullRequestValue, ProjectV2ItemFieldRepositoryValue, ProjectV2ItemFieldReviewerValue, ProjectV2ItemFieldSingleSelectValue, ProjectV2ItemFieldTextValue, ProjectV2ItemFieldUserValue}

"""
An edge in a connection.
"""
mutable struct ProjectV2ItemFieldValueEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectV2ItemFieldValue, Missing, Nothing}
end
function ProjectV2ItemFieldValueEdge(; cursor, node = nothing)
    ProjectV2ItemFieldValueEdge(cursor, node)
end

"""
The connection type for ProjectV2ItemFieldValue.
"""
mutable struct ProjectV2ItemFieldValueConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectV2ItemFieldValueEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectV2ItemFieldValue, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectV2ItemFieldValueConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectV2ItemFieldValueConnection(edges, nodes, pageInfo, totalCount)
end

"""
A draft issue within a project.
"""
mutable struct DraftIssue <: OfficialGithubSchema
    "\n  A list of users to assigned to this draft issue.\n  "
    assignees::UserConnection
    "\n  The body of the draft issue.\n  "
    body::String
    "\n  The body of the draft issue rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  The body of the draft issue rendered to text.\n  "
    bodyText::String
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who created this draft issue.\n  "
    creator::Union{Actor, Missing, Nothing}
    id::String
    project
    projectItem
    projectV2Items
    "\n  Projects that link to this draft issue (currently draft issue can be linked to only one project).\n  "
    projectsV2::ProjectV2Connection
    "\n  The title of the draft issue\n  "
    title::String
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function DraftIssue(; assignees, body, bodyHTML, bodyText, createdAt, creator = nothing, id, project, projectItem, projectV2Items, projectsV2, title, updatedAt)
    DraftIssue(assignees, body, bodyHTML, bodyText, createdAt, creator, id, project, projectItem, projectV2Items, projectsV2, title, updatedAt)
end
function Base.getproperty(t::DraftIssue, sym::Symbol)
    if sym === Symbol("project")
        getfield(t, Symbol("project"))::ProjectNext
    elseif sym === Symbol("projectItem")
        getfield(t, Symbol("projectItem"))::ProjectNextItem
    elseif sym === Symbol("projectV2Items")
        getfield(t, Symbol("projectV2Items"))::ProjectV2ItemConnection
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DraftIssue, sym::Symbol, val::Any)
    if sym === Symbol("project")
        setfield!(t, Symbol("project"), val::ProjectNext)
    elseif sym === Symbol("projectItem")
        setfield!(t, Symbol("projectItem"), val::ProjectNextItem)
    elseif sym === Symbol("projectV2Items")
        setfield!(t, Symbol("projectV2Items"), val::ProjectV2ItemConnection)
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Types that can be inside Project Items." const ProjectV2ItemContent = Union{DraftIssue, Issue, PullRequest}

"""
An item within a Project.
"""
mutable struct ProjectV2Item <: OfficialGithubSchema
    "\n  The content of the referenced draft issue, issue, or pull request\n  "
    content::Union{ProjectV2ItemContent, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who created the item.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  A specific field value given a field name\n  "
    fieldValueByName::Union{ProjectV2ItemFieldValue, Missing, Nothing}
    "\n  List of field values\n  "
    fieldValues::ProjectV2ItemFieldValueConnection
    id::String
    "\n  Whether the item is archived.\n  "
    isArchived::Bool
    project
    "\n  The type of the item.\n  "
    type::ProjectV2ItemType.T
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function ProjectV2Item(; content = nothing, createdAt, creator = nothing, databaseId = nothing, fieldValueByName = nothing, fieldValues, id, isArchived, project, type, updatedAt)
    ProjectV2Item(content, createdAt, creator, databaseId, fieldValueByName, fieldValues, id, isArchived, project, type, updatedAt)
end
function Base.getproperty(t::ProjectV2Item, sym::Symbol)
    if sym === Symbol("project")
        getfield(t, Symbol("project"))::ProjectV2
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectV2Item, sym::Symbol, val::Any)
    if sym === Symbol("project")
        setfield!(t, Symbol("project"), val::ProjectV2)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct ProjectV2ItemEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectV2Item, Missing, Nothing}
end
function ProjectV2ItemEdge(; cursor, node = nothing)
    ProjectV2ItemEdge(cursor, node)
end

"""
The connection type for ProjectV2Item.
"""
mutable struct ProjectV2ItemConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectV2ItemEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectV2Item, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectV2ItemConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectV2ItemConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct ReviewRequestEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ReviewRequest, Missing, Nothing}
end
function ReviewRequestEdge(; cursor, node = nothing)
    ReviewRequestEdge(cursor, node)
end

"""
The connection type for ReviewRequest.
"""
mutable struct ReviewRequestConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ReviewRequestEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ReviewRequest, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ReviewRequestConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ReviewRequestConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct PullRequestReviewThreadEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PullRequestReviewThread, Missing, Nothing}
end
function PullRequestReviewThreadEdge(; cursor, node = nothing)
    PullRequestReviewThreadEdge(cursor, node)
end

"""
Review comment threads for a pull request review.
"""
mutable struct PullRequestReviewThreadConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PullRequestReviewThreadEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PullRequestReviewThread, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PullRequestReviewThreadConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PullRequestReviewThreadConnection(edges, nodes, pageInfo, totalCount)
end

"""
Project progress stats.
"""
mutable struct ProjectProgress <: OfficialGithubSchema
    "\n  The number of done cards.\n  "
    doneCount::Int
    "\n  The percentage of done cards.\n  "
    donePercentage::Float64
    "\n  Whether progress tracking is enabled and cards with purpose exist for this project\n  "
    enabled::Bool
    "\n  The number of in-progress cards.\n  "
    inProgressCount::Int
    "\n  The percentage of in-progress cards.\n  "
    inProgressPercentage::Float64
    "\n  The number of to do cards.\n  "
    todoCount::Int
    "\n  The percentage of to do cards.\n  "
    todoPercentage::Float64
end
function ProjectProgress(; doneCount, donePercentage, enabled, inProgressCount, inProgressPercentage, todoCount, todoPercentage)
    ProjectProgress(doneCount, donePercentage, enabled, inProgressCount, inProgressPercentage, todoCount, todoPercentage)
end

"""
A column inside a project.
"""
mutable struct ProjectColumn <: OfficialGithubSchema
    cards
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The project column's name.\n  "
    name::String
    project
    "\n  The semantic purpose of the column\n  "
    purpose::Union{ProjectColumnPurpose.T, Missing, Nothing}
    "\n  The HTTP path for this project column\n  "
    resourcePath::URI
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this project column\n  "
    url::URI
end
function ProjectColumn(; cards, createdAt, databaseId = nothing, id, name, project, purpose = nothing, resourcePath, updatedAt, url)
    ProjectColumn(cards, createdAt, databaseId, id, name, project, purpose, resourcePath, updatedAt, url)
end
function Base.getproperty(t::ProjectColumn, sym::Symbol)
    if sym === Symbol("cards")
        getfield(t, Symbol("cards"))::ProjectCardConnection
    elseif sym === Symbol("project")
        getfield(t, Symbol("project"))::Project
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectColumn, sym::Symbol, val::Any)
    if sym === Symbol("cards")
        setfield!(t, Symbol("cards"), val::ProjectCardConnection)
    elseif sym === Symbol("project")
        setfield!(t, Symbol("project"), val::Project)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct ProjectColumnEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectColumn, Missing, Nothing}
end
function ProjectColumnEdge(; cursor, node = nothing)
    ProjectColumnEdge(cursor, node)
end

"""
The connection type for ProjectColumn.
"""
mutable struct ProjectColumnConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectColumnEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectColumn, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectColumnConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectColumnConnection(edges, nodes, pageInfo, totalCount)
end

"""
Projects manage issues, pull requests and notes within a project owner.
"""
mutable struct Project <: OfficialGithubSchema
    "\n  The project's description body.\n  "
    body::Union{String, Missing, Nothing}
    "\n  The projects description body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  `true` if the object is closed (definition of closed may depend on type)\n  "
    closed::Bool
    "\n  Identifies the date and time when the object was closed.\n  "
    closedAt::Union{DateTime, Missing, Nothing}
    "\n  List of columns in the project\n  "
    columns::ProjectColumnConnection
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who originally created the project.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The project's name.\n  "
    name::String
    "\n  The project's number.\n  "
    number::Int
    "\n  The project's owner. Currently limited to repositories, organizations, and users.\n  "
    owner::ProjectOwner
    pendingCards
    "\n  Project progress details.\n  "
    progress::ProjectProgress
    "\n  The HTTP path for this project\n  "
    resourcePath::URI
    "\n  Whether the project is open or closed.\n  "
    state::ProjectState.T
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this project\n  "
    url::URI
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
end
function Project(; body = nothing, bodyHTML, closed, closedAt = nothing, columns, createdAt, creator = nothing, databaseId = nothing, id, name, number, owner, pendingCards, progress, resourcePath, state, updatedAt, url, viewerCanUpdate)
    Project(body, bodyHTML, closed, closedAt, columns, createdAt, creator, databaseId, id, name, number, owner, pendingCards, progress, resourcePath, state, updatedAt, url, viewerCanUpdate)
end
function Base.getproperty(t::Project, sym::Symbol)
    if sym === Symbol("pendingCards")
        getfield(t, Symbol("pendingCards"))::ProjectCardConnection
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Project, sym::Symbol, val::Any)
    if sym === Symbol("pendingCards")
        setfield!(t, Symbol("pendingCards"), val::ProjectCardConnection)
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Types that can be inside Project Cards." const ProjectCardItem = Union{Issue, PullRequest}

"""
A card in a project.
"""
mutable struct ProjectCard <: OfficialGithubSchema
    "\n  The project column this card is associated under. A card may only belong to one\n  project column at a time. The column field will be null if the card is created\n  in a pending state and has yet to be associated with a column. Once cards are\n  associated with a column, they will not become pending in the future.\n  "
    column::Union{ProjectColumn, Missing, Nothing}
    "\n  The card content item\n  "
    content::Union{ProjectCardItem, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who created this card\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  Whether the card is archived\n  "
    isArchived::Bool
    "\n  The card note\n  "
    note::Union{String, Missing, Nothing}
    "\n  The project that contains this card.\n  "
    project::Project
    "\n  The HTTP path for this card\n  "
    resourcePath::URI
    "\n  The state of ProjectCard\n  "
    state::Union{ProjectCardState.T, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this card\n  "
    url::URI
end
function ProjectCard(; column = nothing, content = nothing, createdAt, creator = nothing, databaseId = nothing, id, isArchived, note = nothing, project, resourcePath, state = nothing, updatedAt, url)
    ProjectCard(column, content, createdAt, creator, databaseId, id, isArchived, note, project, resourcePath, state, updatedAt, url)
end

"""
An edge in a connection.
"""
mutable struct ProjectCardEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectCard, Missing, Nothing}
end
function ProjectCardEdge(; cursor, node = nothing)
    ProjectCardEdge(cursor, node)
end

"""
The connection type for ProjectCard.
"""
mutable struct ProjectCardConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectCardEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectCard, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectCardConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectCardConnection(edges, nodes, pageInfo, totalCount)
end

"""
A suggestion to review a pull request based on a user's commit history and review comments.
"""
mutable struct SuggestedReviewer <: OfficialGithubSchema
    "\n  Is this suggestion based on past commits?\n  "
    isAuthor::Bool
    "\n  Is this suggestion based on past review comments?\n  "
    isCommenter::Bool
    reviewer
end
function SuggestedReviewer(; isAuthor, isCommenter, reviewer)
    SuggestedReviewer(isAuthor, isCommenter, reviewer)
end
function Base.getproperty(t::SuggestedReviewer, sym::Symbol)
    if sym === Symbol("reviewer")
        getfield(t, Symbol("reviewer"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::SuggestedReviewer, sym::Symbol, val::Any)
    if sym === Symbol("reviewer")
        setfield!(t, Symbol("reviewer"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct PullRequestCommitEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PullRequestCommit, Missing, Nothing}
end
function PullRequestCommitEdge(; cursor, node = nothing)
    PullRequestCommitEdge(cursor, node)
end

"""
The connection type for PullRequestCommit.
"""
mutable struct PullRequestCommitConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PullRequestCommitEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PullRequestCommit, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PullRequestCommitConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PullRequestCommitConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct IssueCommentEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{IssueComment, Missing, Nothing}
end
function IssueCommentEdge(; cursor, node = nothing)
    IssueCommentEdge(cursor, node)
end

"""
The connection type for IssueComment.
"""
mutable struct IssueCommentConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{IssueCommentEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{IssueComment, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function IssueCommentConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    IssueCommentConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a 'ready_for_review' event on a given pull request.
"""
mutable struct ReadyForReviewEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    pullRequest
    "\n  The HTTP path for this ready for review event.\n  "
    resourcePath::URI
    "\n  The HTTP URL for this ready for review event.\n  "
    url::URI
end
function ReadyForReviewEvent(; actor = nothing, createdAt, id, pullRequest, resourcePath, url)
    ReadyForReviewEvent(actor, createdAt, id, pullRequest, resourcePath, url)
end
function Base.getproperty(t::ReadyForReviewEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ReadyForReviewEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'converted_to_discussion' event on a given issue.
"""
mutable struct ConvertedToDiscussionEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    discussion
    id::String
end
function ConvertedToDiscussionEvent(; actor = nothing, createdAt, discussion = nothing, id)
    ConvertedToDiscussionEvent(actor, createdAt, discussion, id)
end
function Base.getproperty(t::ConvertedToDiscussionEvent, sym::Symbol)
    if sym === Symbol("discussion")
        getfield(t, Symbol("discussion"))::Union{Discussion, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ConvertedToDiscussionEvent, sym::Symbol, val::Any)
    if sym === Symbol("discussion")
        setfield!(t, Symbol("discussion"), val::Union{Discussion, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'moved_columns_in_project' event on a given issue or pull request.
"""
mutable struct MovedColumnsInProjectEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  Column name the issue or pull request was moved from.\n  "
    previousProjectColumnName::String
    "\n  Project referenced by event.\n  "
    project::Union{Project, Missing, Nothing}
    "\n  Project card referenced by this project event.\n  "
    projectCard::Union{ProjectCard, Missing, Nothing}
    "\n  Column name the issue or pull request was moved to.\n  "
    projectColumnName::String
end
function MovedColumnsInProjectEvent(; actor = nothing, createdAt, databaseId = nothing, id, previousProjectColumnName, project = nothing, projectCard = nothing, projectColumnName)
    MovedColumnsInProjectEvent(actor, createdAt, databaseId, id, previousProjectColumnName, project, projectCard, projectColumnName)
end

"""
Represents a 'disconnected' event on a given issue or pull request.
"""
mutable struct DisconnectedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Reference originated in a different repository.\n  "
    isCrossRepository::Bool
    "\n  Issue or pull request from which the issue was disconnected.\n  "
    source::ReferencedSubject
    "\n  Issue or pull request which was disconnected.\n  "
    subject::ReferencedSubject
end
function DisconnectedEvent(; actor = nothing, createdAt, id, isCrossRepository, source, subject)
    DisconnectedEvent(actor, createdAt, id, isCrossRepository, source, subject)
end

"""
Represents a 'transferred' event on a given issue or pull request.
"""
mutable struct TransferredEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    fromRepository
    id::String
    issue
end
function TransferredEvent(; actor = nothing, createdAt, fromRepository = nothing, id, issue)
    TransferredEvent(actor, createdAt, fromRepository, id, issue)
end
function Base.getproperty(t::TransferredEvent, sym::Symbol)
    if sym === Symbol("fromRepository")
        getfield(t, Symbol("fromRepository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("issue")
        getfield(t, Symbol("issue"))::Issue
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TransferredEvent, sym::Symbol, val::Any)
    if sym === Symbol("fromRepository")
        setfield!(t, Symbol("fromRepository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("issue")
        setfield!(t, Symbol("issue"), val::Issue)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'auto_merge_enabled' event on a given pull request.
"""
mutable struct AutoMergeEnabledEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    enabler
    id::String
    pullRequest
end
function AutoMergeEnabledEvent(; actor = nothing, createdAt, enabler = nothing, id, pullRequest = nothing)
    AutoMergeEnabledEvent(actor, createdAt, enabler, id, pullRequest)
end
function Base.getproperty(t::AutoMergeEnabledEvent, sym::Symbol)
    if sym === Symbol("enabler")
        getfield(t, Symbol("enabler"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::Union{PullRequest, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::AutoMergeEnabledEvent, sym::Symbol, val::Any)
    if sym === Symbol("enabler")
        setfield!(t, Symbol("enabler"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::Union{PullRequest, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'base_ref_changed' event on a given issue or pull request.
"""
mutable struct BaseRefChangedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the name of the base ref for the pull request after it was changed.\n  "
    currentRefName::String
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  Identifies the name of the base ref for the pull request before it was changed.\n  "
    previousRefName::String
    pullRequest
end
function BaseRefChangedEvent(; actor = nothing, createdAt, currentRefName, databaseId = nothing, id, previousRefName, pullRequest)
    BaseRefChangedEvent(actor, createdAt, currentRefName, databaseId, id, previousRefName, pullRequest)
end
function Base.getproperty(t::BaseRefChangedEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::BaseRefChangedEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'auto_merge_disabled' event on a given pull request.
"""
mutable struct AutoMergeDisabledEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    disabler
    id::String
    pullRequest
    "\n  The reason auto-merge was disabled\n  "
    reason::Union{String, Missing, Nothing}
    "\n  The reason_code relating to why auto-merge was disabled\n  "
    reasonCode::Union{String, Missing, Nothing}
end
function AutoMergeDisabledEvent(; actor = nothing, createdAt, disabler = nothing, id, pullRequest = nothing, reason = nothing, reasonCode = nothing)
    AutoMergeDisabledEvent(actor, createdAt, disabler, id, pullRequest, reason, reasonCode)
end
function Base.getproperty(t::AutoMergeDisabledEvent, sym::Symbol)
    if sym === Symbol("disabler")
        getfield(t, Symbol("disabler"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::Union{PullRequest, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::AutoMergeDisabledEvent, sym::Symbol, val::Any)
    if sym === Symbol("disabler")
        setfield!(t, Symbol("disabler"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::Union{PullRequest, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'comment_deleted' event on a given issue or pull request.
"""
mutable struct CommentDeletedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The user who authored the deleted comment.\n  "
    deletedCommentAuthor::Union{Actor, Missing, Nothing}
    id::String
end
function CommentDeletedEvent(; actor = nothing, createdAt, databaseId = nothing, deletedCommentAuthor = nothing, id)
    CommentDeletedEvent(actor, createdAt, databaseId, deletedCommentAuthor, id)
end

Core.@doc "Used for return value of Repository.issueOrPullRequest." const IssueOrPullRequest = Union{Issue, PullRequest}

"""
Represents a 'marked_as_duplicate' event on a given issue or pull request.
"""
mutable struct MarkedAsDuplicateEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  The authoritative issue or pull request which has been duplicated by another.\n  "
    canonical::Union{IssueOrPullRequest, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The issue or pull request which has been marked as a duplicate of another.\n  "
    duplicate::Union{IssueOrPullRequest, Missing, Nothing}
    id::String
    "\n  Canonical and duplicate belong to different repositories.\n  "
    isCrossRepository::Bool
end
function MarkedAsDuplicateEvent(; actor = nothing, canonical = nothing, createdAt, duplicate = nothing, id, isCrossRepository)
    MarkedAsDuplicateEvent(actor, canonical, createdAt, duplicate, id, isCrossRepository)
end

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
mutable struct RemovedFromProjectEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  Project referenced by event.\n  "
    project::Union{Project, Missing, Nothing}
    "\n  Column name referenced by this project event.\n  "
    projectColumnName::String
end
function RemovedFromProjectEvent(; actor = nothing, createdAt, databaseId = nothing, id, project = nothing, projectColumnName)
    RemovedFromProjectEvent(actor, createdAt, databaseId, id, project, projectColumnName)
end

"""
Represents a 'automatic_base_change_succeeded' event on a given pull request.
"""
mutable struct AutomaticBaseChangeSucceededEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  The new base for this PR\n  "
    newBase::String
    "\n  The old base for this PR\n  "
    oldBase::String
    pullRequest
end
function AutomaticBaseChangeSucceededEvent(; actor = nothing, createdAt, id, newBase, oldBase, pullRequest)
    AutomaticBaseChangeSucceededEvent(actor, createdAt, id, newBase, oldBase, pullRequest)
end
function Base.getproperty(t::AutomaticBaseChangeSucceededEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::AutomaticBaseChangeSucceededEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'converted_note_to_issue' event on a given issue or pull request.
"""
mutable struct ConvertedNoteToIssueEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  Project referenced by event.\n  "
    project::Union{Project, Missing, Nothing}
    "\n  Project card referenced by this project event.\n  "
    projectCard::Union{ProjectCard, Missing, Nothing}
    "\n  Column name referenced by this project event.\n  "
    projectColumnName::String
end
function ConvertedNoteToIssueEvent(; actor = nothing, createdAt, databaseId = nothing, id, project = nothing, projectCard = nothing, projectColumnName)
    ConvertedNoteToIssueEvent(actor, createdAt, databaseId, id, project, projectCard, projectColumnName)
end

"""
Represents an 'unpinned' event on a given issue or pull request.
"""
mutable struct UnpinnedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    issue
end
function UnpinnedEvent(; actor = nothing, createdAt, id, issue)
    UnpinnedEvent(actor, createdAt, id, issue)
end
function Base.getproperty(t::UnpinnedEvent, sym::Symbol)
    if sym === Symbol("issue")
        getfield(t, Symbol("issue"))::Issue
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::UnpinnedEvent, sym::Symbol, val::Any)
    if sym === Symbol("issue")
        setfield!(t, Symbol("issue"), val::Issue)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'pinned' event on a given issue or pull request.
"""
mutable struct PinnedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    issue
end
function PinnedEvent(; actor = nothing, createdAt, id, issue)
    PinnedEvent(actor, createdAt, id, issue)
end
function Base.getproperty(t::PinnedEvent, sym::Symbol)
    if sym === Symbol("issue")
        getfield(t, Symbol("issue"))::Issue
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PinnedEvent, sym::Symbol, val::Any)
    if sym === Symbol("issue")
        setfield!(t, Symbol("issue"), val::Issue)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'connected' event on a given issue or pull request.
"""
mutable struct ConnectedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Reference originated in a different repository.\n  "
    isCrossRepository::Bool
    "\n  Issue or pull request that made the reference.\n  "
    source::ReferencedSubject
    "\n  Issue or pull request which was connected.\n  "
    subject::ReferencedSubject
end
function ConnectedEvent(; actor = nothing, createdAt, id, isCrossRepository, source, subject)
    ConnectedEvent(actor, createdAt, id, isCrossRepository, source, subject)
end

"""
Represents a 'auto_squash_enabled' event on a given pull request.
"""
mutable struct AutoSquashEnabledEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    enabler
    id::String
    pullRequest
end
function AutoSquashEnabledEvent(; actor = nothing, createdAt, enabler = nothing, id, pullRequest = nothing)
    AutoSquashEnabledEvent(actor, createdAt, enabler, id, pullRequest)
end
function Base.getproperty(t::AutoSquashEnabledEvent, sym::Symbol)
    if sym === Symbol("enabler")
        getfield(t, Symbol("enabler"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::Union{PullRequest, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::AutoSquashEnabledEvent, sym::Symbol, val::Any)
    if sym === Symbol("enabler")
        setfield!(t, Symbol("enabler"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::Union{PullRequest, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a commit comment thread part of a pull request.
"""
mutable struct PullRequestCommitCommentThread <: OfficialGithubSchema
    "\n  The comments that exist in this thread.\n  "
    comments::CommitCommentConnection
    "\n  The commit the comments were made on.\n  "
    commit::Commit
    id::String
    "\n  The file the comments were made on.\n  "
    path::Union{String, Missing, Nothing}
    "\n  The position in the diff for the commit that the comment was made on.\n  "
    position::Union{Int, Missing, Nothing}
    pullRequest
    repository
end
function PullRequestCommitCommentThread(; comments, commit, id, path = nothing, position = nothing, pullRequest, repository)
    PullRequestCommitCommentThread(comments, commit, id, path, position, pullRequest, repository)
end
function Base.getproperty(t::PullRequestCommitCommentThread, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PullRequestCommitCommentThread, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'mentioned' event on a given issue or pull request.
"""
mutable struct MentionedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
end
function MentionedEvent(; actor = nothing, createdAt, databaseId = nothing, id)
    MentionedEvent(actor, createdAt, databaseId, id)
end

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
mutable struct UnmarkedAsDuplicateEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  The authoritative issue or pull request which has been duplicated by another.\n  "
    canonical::Union{IssueOrPullRequest, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The issue or pull request which has been marked as a duplicate of another.\n  "
    duplicate::Union{IssueOrPullRequest, Missing, Nothing}
    id::String
    "\n  Canonical and duplicate belong to different repositories.\n  "
    isCrossRepository::Bool
end
function UnmarkedAsDuplicateEvent(; actor = nothing, canonical = nothing, createdAt, duplicate = nothing, id, isCrossRepository)
    UnmarkedAsDuplicateEvent(actor, canonical, createdAt, duplicate, id, isCrossRepository)
end

"""
Represents a 'added_to_project' event on a given issue or pull request.
"""
mutable struct AddedToProjectEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  Project referenced by event.\n  "
    project::Union{Project, Missing, Nothing}
    "\n  Project card referenced by this project event.\n  "
    projectCard::Union{ProjectCard, Missing, Nothing}
    "\n  Column name referenced by this project event.\n  "
    projectColumnName::String
end
function AddedToProjectEvent(; actor = nothing, createdAt, databaseId = nothing, id, project = nothing, projectCard = nothing, projectColumnName)
    AddedToProjectEvent(actor, createdAt, databaseId, id, project, projectCard, projectColumnName)
end

"""
Represents a 'auto_rebase_enabled' event on a given pull request.
"""
mutable struct AutoRebaseEnabledEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    enabler
    id::String
    pullRequest
end
function AutoRebaseEnabledEvent(; actor = nothing, createdAt, enabler = nothing, id, pullRequest = nothing)
    AutoRebaseEnabledEvent(actor, createdAt, enabler, id, pullRequest)
end
function Base.getproperty(t::AutoRebaseEnabledEvent, sym::Symbol)
    if sym === Symbol("enabler")
        getfield(t, Symbol("enabler"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::Union{PullRequest, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::AutoRebaseEnabledEvent, sym::Symbol, val::Any)
    if sym === Symbol("enabler")
        setfield!(t, Symbol("enabler"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::Union{PullRequest, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'convert_to_draft' event on a given pull request.
"""
mutable struct ConvertToDraftEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    pullRequest
    "\n  The HTTP path for this convert to draft event.\n  "
    resourcePath::URI
    "\n  The HTTP URL for this convert to draft event.\n  "
    url::URI
end
function ConvertToDraftEvent(; actor = nothing, createdAt, id, pullRequest, resourcePath, url)
    ConvertToDraftEvent(actor, createdAt, id, pullRequest, resourcePath, url)
end
function Base.getproperty(t::ConvertToDraftEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ConvertToDraftEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
mutable struct PullRequestRevisionMarker <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The last commit the viewer has seen.\n  "
    lastSeenCommit::Commit
    pullRequest
end
function PullRequestRevisionMarker(; createdAt, lastSeenCommit, pullRequest)
    PullRequestRevisionMarker(createdAt, lastSeenCommit, pullRequest)
end
function Base.getproperty(t::PullRequestRevisionMarker, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PullRequestRevisionMarker, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a 'automatic_base_change_failed' event on a given pull request.
"""
mutable struct AutomaticBaseChangeFailedEvent <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  The new base for this PR\n  "
    newBase::String
    "\n  The old base for this PR\n  "
    oldBase::String
    pullRequest
end
function AutomaticBaseChangeFailedEvent(; actor = nothing, createdAt, id, newBase, oldBase, pullRequest)
    AutomaticBaseChangeFailedEvent(actor, createdAt, id, newBase, oldBase, pullRequest)
end
function Base.getproperty(t::AutomaticBaseChangeFailedEvent, sym::Symbol)
    if sym === Symbol("pullRequest")
        getfield(t, Symbol("pullRequest"))::PullRequest
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::AutomaticBaseChangeFailedEvent, sym::Symbol, val::Any)
    if sym === Symbol("pullRequest")
        setfield!(t, Symbol("pullRequest"), val::PullRequest)
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "An item in a pull request timeline" const PullRequestTimelineItems = Union{AddedToProjectEvent, AssignedEvent, AutoMergeDisabledEvent, AutoMergeEnabledEvent, AutoRebaseEnabledEvent, AutoSquashEnabledEvent, AutomaticBaseChangeFailedEvent, AutomaticBaseChangeSucceededEvent, BaseRefChangedEvent, BaseRefDeletedEvent, BaseRefForcePushedEvent, ClosedEvent, CommentDeletedEvent, ConnectedEvent, ConvertToDraftEvent, ConvertedNoteToIssueEvent, ConvertedToDiscussionEvent, CrossReferencedEvent, DemilestonedEvent, DeployedEvent, DeploymentEnvironmentChangedEvent, DisconnectedEvent, HeadRefDeletedEvent, HeadRefForcePushedEvent, HeadRefRestoredEvent, IssueComment, LabeledEvent, LockedEvent, MarkedAsDuplicateEvent, MentionedEvent, MergedEvent, MilestonedEvent, MovedColumnsInProjectEvent, PinnedEvent, PullRequestCommit, PullRequestCommitCommentThread, PullRequestReview, PullRequestReviewThread, PullRequestRevisionMarker, ReadyForReviewEvent, ReferencedEvent, RemovedFromProjectEvent, RenamedTitleEvent, ReopenedEvent, ReviewDismissedEvent, ReviewRequestRemovedEvent, ReviewRequestedEvent, SubscribedEvent, TransferredEvent, UnassignedEvent, UnlabeledEvent, UnlockedEvent, UnmarkedAsDuplicateEvent, UnpinnedEvent, UnsubscribedEvent, UserBlockedEvent}

"""
An edge in a connection.
"""
mutable struct PullRequestTimelineItemsEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PullRequestTimelineItems, Missing, Nothing}
end
function PullRequestTimelineItemsEdge(; cursor, node = nothing)
    PullRequestTimelineItemsEdge(cursor, node)
end

"""
The connection type for PullRequestTimelineItems.
"""
mutable struct PullRequestTimelineItemsConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PullRequestTimelineItemsEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  Identifies the count of items after applying `before` and `after` filters.\n  "
    filteredCount::Int
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PullRequestTimelineItems, Missing, Nothing}}, Missing, Nothing}
    "\n  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.\n  "
    pageCount::Int
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
    "\n  Identifies the date and time when the timeline was last updated.\n  "
    updatedAt::DateTime
end
function PullRequestTimelineItemsConnection(; edges = nothing, filteredCount, nodes = nothing, pageCount, pageInfo, totalCount, updatedAt)
    PullRequestTimelineItemsConnection(edges, filteredCount, nodes, pageCount, pageInfo, totalCount, updatedAt)
end

"""
A file changed in a pull request.
"""
mutable struct PullRequestChangedFile <: OfficialGithubSchema
    "\n  The number of additions to the file.\n  "
    additions::Int
    "\n  How the file was changed in this PullRequest\n  "
    changeType::PatchStatus.T
    "\n  The number of deletions to the file.\n  "
    deletions::Int
    "\n  The path of the file.\n  "
    path::String
    "\n  The state of the file for the viewer.\n  "
    viewerViewedState::FileViewedState.T
end
function PullRequestChangedFile(; additions, changeType, deletions, path, viewerViewedState)
    PullRequestChangedFile(additions, changeType, deletions, path, viewerViewedState)
end

"""
An edge in a connection.
"""
mutable struct PullRequestChangedFileEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PullRequestChangedFile, Missing, Nothing}
end
function PullRequestChangedFileEdge(; cursor, node = nothing)
    PullRequestChangedFileEdge(cursor, node)
end

"""
The connection type for PullRequestChangedFile.
"""
mutable struct PullRequestChangedFileConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PullRequestChangedFileEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PullRequestChangedFile, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PullRequestChangedFileConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PullRequestChangedFileConnection(edges, nodes, pageInfo, totalCount)
end

"""
A repository pull request.
"""
mutable struct PullRequest <: OfficialGithubSchema
    "\n  Reason that the conversation was locked.\n  "
    activeLockReason::Union{LockReason.T, Missing, Nothing}
    "\n  The number of additions in this pull request.\n  "
    additions::Int
    "\n  A list of Users assigned to this object.\n  "
    assignees::UserConnection
    "\n  The actor who authored the comment.\n  "
    author::Union{Actor, Missing, Nothing}
    "\n  Author's association with the subject of the comment.\n  "
    authorAssociation::CommentAuthorAssociation.T
    "\n  Returns the auto-merge request object if one exists for this pull request.\n  "
    autoMergeRequest::Union{AutoMergeRequest, Missing, Nothing}
    baseRef
    "\n  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.\n  "
    baseRefName::String
    "\n  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.\n  "
    baseRefOid::GitObjectID
    baseRepository
    "\n  The body as Markdown.\n  "
    body::String
    "\n  The body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  The body rendered to text.\n  "
    bodyText::String
    "\n  Whether or not the pull request is rebaseable.\n  "
    canBeRebased::Bool
    "\n  The number of changed files in this pull request.\n  "
    changedFiles::Int
    "\n  The HTTP path for the checks of this pull request.\n  "
    checksResourcePath::URI
    "\n  The HTTP URL for the checks of this pull request.\n  "
    checksUrl::URI
    "\n  `true` if the pull request is closed\n  "
    closed::Bool
    "\n  Identifies the date and time when the object was closed.\n  "
    closedAt::Union{DateTime, Missing, Nothing}
    "\n  List of issues that were may be closed by this pull request\n  "
    closingIssuesReferences::Union{IssueConnection, Missing, Nothing}
    "\n  A list of comments associated with the pull request.\n  "
    comments::IssueCommentConnection
    "\n  A list of commits present in this pull request's head branch not present in the base branch.\n  "
    commits::PullRequestCommitConnection
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Check if this comment was created via an email reply.\n  "
    createdViaEmail::Bool
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The number of deletions in this pull request.\n  "
    deletions::Int
    "\n  The actor who edited this pull request's body.\n  "
    editor::Union{Actor, Missing, Nothing}
    "\n  Lists the files changed within this pull request.\n  "
    files::Union{PullRequestChangedFileConnection, Missing, Nothing}
    headRef
    "\n  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.\n  "
    headRefName::String
    "\n  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.\n  "
    headRefOid::GitObjectID
    headRepository
    "\n  The owner of the repository associated with this pull request's head Ref.\n  "
    headRepositoryOwner::Union{RepositoryOwner, Missing, Nothing}
    "\n  The hovercard information for this issue\n  "
    hovercard::Hovercard
    id::String
    "\n  Check if this comment was edited and includes an edit with the creation data\n  "
    includesCreatedEdit::Bool
    "\n  The head and base repositories are different.\n  "
    isCrossRepository::Bool
    "\n  Identifies if the pull request is a draft.\n  "
    isDraft::Bool
    "\n  Is this pull request read by the viewer\n  "
    isReadByViewer::Union{Bool, Missing, Nothing}
    "\n  A list of labels associated with the object.\n  "
    labels::Union{LabelConnection, Missing, Nothing}
    "\n  The moment the editor made the last edit\n  "
    lastEditedAt::Union{DateTime, Missing, Nothing}
    "\n  A list of latest reviews per user associated with the pull request.\n  "
    latestOpinionatedReviews::Union{PullRequestReviewConnection, Missing, Nothing}
    "\n  A list of latest reviews per user associated with the pull request that are not also pending review.\n  "
    latestReviews::Union{PullRequestReviewConnection, Missing, Nothing}
    "\n  `true` if the pull request is locked\n  "
    locked::Bool
    "\n  Indicates whether maintainers can modify the pull request.\n  "
    maintainerCanModify::Bool
    "\n  The commit that was created when this pull request was merged.\n  "
    mergeCommit::Union{Commit, Missing, Nothing}
    "\n  Detailed information about the current pull request merge state status.\n  "
    mergeStateStatus::MergeStateStatus.T
    "\n  Whether or not the pull request can be merged based on the existence of merge conflicts.\n  "
    mergeable::MergeableState.T
    "\n  Whether or not the pull request was merged.\n  "
    merged::Bool
    "\n  The date and time that the pull request was merged.\n  "
    mergedAt::Union{DateTime, Missing, Nothing}
    "\n  The actor who merged the pull request.\n  "
    mergedBy::Union{Actor, Missing, Nothing}
    "\n  Identifies the milestone associated with the pull request.\n  "
    milestone::Union{Milestone, Missing, Nothing}
    "\n  Identifies the pull request number.\n  "
    number::Int
    "\n  A list of Users that are participating in the Pull Request conversation.\n  "
    participants::UserConnection
    "\n  The permalink to the pull request.\n  "
    permalink::URI
    "\n  The commit that GitHub automatically generated to test if this pull request\n  could be merged. This field will not return a value if the pull request is\n  merged, or if the test merge commit is still being generated. See the\n  `mergeable` field for more details on the mergeability of the pull request.\n  "
    potentialMergeCommit::Union{Commit, Missing, Nothing}
    "\n  List of project cards associated with this pull request.\n  "
    projectCards::ProjectCardConnection
    "\n  List of project items associated with this pull request.\n  "
    projectItems::ProjectV2ItemConnection
    projectNext
    projectNextItems
    projectV2
    projectsNext
    "\n  A list of projects under the owner.\n  "
    projectsV2::ProjectV2Connection
    "\n  Identifies when the comment was published at.\n  "
    publishedAt::Union{DateTime, Missing, Nothing}
    reactionGroups
    "\n  A list of Reactions left on the Issue.\n  "
    reactions::ReactionConnection
    repository
    "\n  The HTTP path for this pull request.\n  "
    resourcePath::URI
    "\n  The HTTP path for reverting this pull request.\n  "
    revertResourcePath::URI
    "\n  The HTTP URL for reverting this pull request.\n  "
    revertUrl::URI
    "\n  The current status of this pull request with respect to code review.\n  "
    reviewDecision::Union{PullRequestReviewDecision.T, Missing, Nothing}
    "\n  A list of review requests associated with the pull request.\n  "
    reviewRequests::Union{ReviewRequestConnection, Missing, Nothing}
    "\n  The list of all review threads for this pull request.\n  "
    reviewThreads::PullRequestReviewThreadConnection
    "\n  A list of reviews associated with the pull request.\n  "
    reviews::Union{PullRequestReviewConnection, Missing, Nothing}
    "\n  Identifies the state of the pull request.\n  "
    state::PullRequestState.T
    "\n  A list of reviewer suggestions based on commit history and past review comments.\n  "
    suggestedReviewers::Vector{Union{SuggestedReviewer, Missing, Nothing}}
    "\n  A list of events, comments, commits, etc. associated with the pull request.\n  "
    timeline::PullRequestTimelineConnection
    "\n  A list of events, comments, commits, etc. associated with the pull request.\n  "
    timelineItems::PullRequestTimelineItemsConnection
    "\n  Identifies the pull request title.\n  "
    title::String
    "\n  Identifies the pull request title rendered to HTML.\n  "
    titleHTML::HTML
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this pull request.\n  "
    url::URI
    "\n  A list of edits to this content.\n  "
    userContentEdits::Union{UserContentEditConnection, Missing, Nothing}
    "\n  Whether or not the viewer can apply suggestion.\n  "
    viewerCanApplySuggestion::Bool
    "\n  Check if the viewer can restore the deleted head ref.\n  "
    viewerCanDeleteHeadRef::Bool
    "\n  Whether or not the viewer can disable auto-merge\n  "
    viewerCanDisableAutoMerge::Bool
    "\n  Can the viewer edit files within this pull request.\n  "
    viewerCanEditFiles::Bool
    "\n  Whether or not the viewer can enable auto-merge\n  "
    viewerCanEnableAutoMerge::Bool
    "\n  Indicates whether the viewer can bypass branch protections and merge the pull request immediately\n  "
    viewerCanMergeAsAdmin::Bool
    "\n  Can user react to this subject\n  "
    viewerCanReact::Bool
    "\n  Check if the viewer is able to change their subscription status for the repository.\n  "
    viewerCanSubscribe::Bool
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  Reasons why the current viewer can not update this comment.\n  "
    viewerCannotUpdateReasons::Vector{CommentCannotUpdateReason.T}
    "\n  Did the viewer author this comment.\n  "
    viewerDidAuthor::Bool
    "\n  The latest review given from the viewer.\n  "
    viewerLatestReview::Union{PullRequestReview, Missing, Nothing}
    "\n  The person who has requested the viewer for review on this pull request.\n  "
    viewerLatestReviewRequest::Union{ReviewRequest, Missing, Nothing}
    "\n  The merge body text for the viewer and method.\n  "
    viewerMergeBodyText::String
    "\n  The merge headline text for the viewer and method.\n  "
    viewerMergeHeadlineText::String
    "\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  "
    viewerSubscription::Union{SubscriptionState.T, Missing, Nothing}
end
function PullRequest(; activeLockReason = nothing, additions, assignees, author = nothing, authorAssociation, autoMergeRequest = nothing, baseRef = nothing, baseRefName, baseRefOid, baseRepository = nothing, body, bodyHTML, bodyText, canBeRebased, changedFiles, checksResourcePath, checksUrl, closed, closedAt = nothing, closingIssuesReferences = nothing, comments, commits, createdAt, createdViaEmail, databaseId = nothing, deletions, editor = nothing, files = nothing, headRef = nothing, headRefName, headRefOid, headRepository = nothing, headRepositoryOwner = nothing, hovercard, id, includesCreatedEdit, isCrossRepository, isDraft, isReadByViewer = nothing, labels = nothing, lastEditedAt = nothing, latestOpinionatedReviews = nothing, latestReviews = nothing, locked, maintainerCanModify, mergeCommit = nothing, mergeStateStatus, mergeable, merged, mergedAt = nothing, mergedBy = nothing, milestone = nothing, number, participants, permalink, potentialMergeCommit = nothing, projectCards, projectItems, projectNext = nothing, projectNextItems, projectV2 = nothing, projectsNext, projectsV2, publishedAt = nothing, reactionGroups = nothing, reactions, repository, resourcePath, revertResourcePath, revertUrl, reviewDecision = nothing, reviewRequests = nothing, reviewThreads, reviews = nothing, state, suggestedReviewers, timeline, timelineItems, title, titleHTML, updatedAt, url, userContentEdits = nothing, viewerCanApplySuggestion, viewerCanDeleteHeadRef, viewerCanDisableAutoMerge, viewerCanEditFiles, viewerCanEnableAutoMerge, viewerCanMergeAsAdmin, viewerCanReact, viewerCanSubscribe, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor, viewerLatestReview = nothing, viewerLatestReviewRequest = nothing, viewerMergeBodyText, viewerMergeHeadlineText, viewerSubscription = nothing)
    PullRequest(activeLockReason, additions, assignees, author, authorAssociation, autoMergeRequest, baseRef, baseRefName, baseRefOid, baseRepository, body, bodyHTML, bodyText, canBeRebased, changedFiles, checksResourcePath, checksUrl, closed, closedAt, closingIssuesReferences, comments, commits, createdAt, createdViaEmail, databaseId, deletions, editor, files, headRef, headRefName, headRefOid, headRepository, headRepositoryOwner, hovercard, id, includesCreatedEdit, isCrossRepository, isDraft, isReadByViewer, labels, lastEditedAt, latestOpinionatedReviews, latestReviews, locked, maintainerCanModify, mergeCommit, mergeStateStatus, mergeable, merged, mergedAt, mergedBy, milestone, number, participants, permalink, potentialMergeCommit, projectCards, projectItems, projectNext, projectNextItems, projectV2, projectsNext, projectsV2, publishedAt, reactionGroups, reactions, repository, resourcePath, revertResourcePath, revertUrl, reviewDecision, reviewRequests, reviewThreads, reviews, state, suggestedReviewers, timeline, timelineItems, title, titleHTML, updatedAt, url, userContentEdits, viewerCanApplySuggestion, viewerCanDeleteHeadRef, viewerCanDisableAutoMerge, viewerCanEditFiles, viewerCanEnableAutoMerge, viewerCanMergeAsAdmin, viewerCanReact, viewerCanSubscribe, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor, viewerLatestReview, viewerLatestReviewRequest, viewerMergeBodyText, viewerMergeHeadlineText, viewerSubscription)
end
function Base.getproperty(t::PullRequest, sym::Symbol)
    if sym === Symbol("baseRef")
        getfield(t, Symbol("baseRef"))::Union{Ref, Missing, Nothing}
    elseif sym === Symbol("baseRepository")
        getfield(t, Symbol("baseRepository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("headRef")
        getfield(t, Symbol("headRef"))::Union{Ref, Missing, Nothing}
    elseif sym === Symbol("headRepository")
        getfield(t, Symbol("headRepository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("projectNext")
        getfield(t, Symbol("projectNext"))::Union{ProjectNext, Missing, Nothing}
    elseif sym === Symbol("projectNextItems")
        getfield(t, Symbol("projectNextItems"))::ProjectNextItemConnection
    elseif sym === Symbol("projectV2")
        getfield(t, Symbol("projectV2"))::Union{ProjectV2, Missing, Nothing}
    elseif sym === Symbol("projectsNext")
        getfield(t, Symbol("projectsNext"))::ProjectNextConnection
    elseif sym === Symbol("reactionGroups")
        getfield(t, Symbol("reactionGroups"))::Union{Vector{ReactionGroup}, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PullRequest, sym::Symbol, val::Any)
    if sym === Symbol("baseRef")
        setfield!(t, Symbol("baseRef"), val::Union{Ref, Missing, Nothing})
    elseif sym === Symbol("baseRepository")
        setfield!(t, Symbol("baseRepository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("headRef")
        setfield!(t, Symbol("headRef"), val::Union{Ref, Missing, Nothing})
    elseif sym === Symbol("headRepository")
        setfield!(t, Symbol("headRepository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("projectNext")
        setfield!(t, Symbol("projectNext"), val::Union{ProjectNext, Missing, Nothing})
    elseif sym === Symbol("projectNextItems")
        setfield!(t, Symbol("projectNextItems"), val::ProjectNextItemConnection)
    elseif sym === Symbol("projectV2")
        setfield!(t, Symbol("projectV2"), val::Union{ProjectV2, Missing, Nothing})
    elseif sym === Symbol("projectsNext")
        setfield!(t, Symbol("projectsNext"), val::ProjectNextConnection)
    elseif sym === Symbol("reactionGroups")
        setfield!(t, Symbol("reactionGroups"), val::Union{Vector{ReactionGroup}, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct PullRequestEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PullRequest, Missing, Nothing}
end
function PullRequestEdge(; cursor, node = nothing)
    PullRequestEdge(cursor, node)
end

"""
The connection type for PullRequest.
"""
mutable struct PullRequestConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PullRequestEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PullRequest, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PullRequestConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PullRequestConnection(edges, nodes, pageInfo, totalCount)
end

"""
The connection type for Commit.
"""
mutable struct ComparisonCommitConnection <: OfficialGithubSchema
    "\n  The total count of authors and co-authors across all commits.\n  "
    authorCount::Int
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CommitEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Commit, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ComparisonCommitConnection(; authorCount, edges = nothing, nodes = nothing, pageInfo, totalCount)
    ComparisonCommitConnection(authorCount, edges, nodes, pageInfo, totalCount)
end

"""
Represents a comparison between two commit revisions.
"""
mutable struct Comparison <: OfficialGithubSchema
    "\n  The number of commits ahead of the base branch.\n  "
    aheadBy::Int
    "\n  The base revision of this comparison.\n  "
    baseTarget::GitObject
    "\n  The number of commits behind the base branch.\n  "
    behindBy::Int
    "\n  The commits which compose this comparison.\n  "
    commits::ComparisonCommitConnection
    "\n  The head revision of this comparison.\n  "
    headTarget::GitObject
    id::String
    "\n  The status of this comparison.\n  "
    status::ComparisonStatus.T
end
function Comparison(; aheadBy, baseTarget, behindBy, commits, headTarget, id, status)
    Comparison(aheadBy, baseTarget, behindBy, commits, headTarget, id, status)
end

"""
A ref update rules for a viewer.
"""
mutable struct RefUpdateRule <: OfficialGithubSchema
    "\n  Can this branch be deleted.\n  "
    allowsDeletions::Bool
    "\n  Are force pushes allowed on this branch.\n  "
    allowsForcePushes::Bool
    "\n  Can matching branches be created.\n  "
    blocksCreations::Bool
    "\n  Identifies the protection rule pattern.\n  "
    pattern::String
    "\n  Number of approving reviews required to update matching branches.\n  "
    requiredApprovingReviewCount::Union{Int, Missing, Nothing}
    "\n  List of required status check contexts that must pass for commits to be accepted to matching branches.\n  "
    requiredStatusCheckContexts::Union{Vector{Union{String, Missing, Nothing}}, Missing, Nothing}
    "\n  Are reviews from code owners required to update matching branches.\n  "
    requiresCodeOwnerReviews::Bool
    "\n  Are conversations required to be resolved before merging.\n  "
    requiresConversationResolution::Bool
    "\n  Are merge commits prohibited from being pushed to this branch.\n  "
    requiresLinearHistory::Bool
    "\n  Are commits required to be signed.\n  "
    requiresSignatures::Bool
    "\n  Is the viewer allowed to dismiss reviews.\n  "
    viewerAllowedToDismissReviews::Bool
    "\n  Can the viewer push to the branch\n  "
    viewerCanPush::Bool
end
function RefUpdateRule(; allowsDeletions, allowsForcePushes, blocksCreations, pattern, requiredApprovingReviewCount = nothing, requiredStatusCheckContexts = nothing, requiresCodeOwnerReviews, requiresConversationResolution, requiresLinearHistory, requiresSignatures, viewerAllowedToDismissReviews, viewerCanPush)
    RefUpdateRule(allowsDeletions, allowsForcePushes, blocksCreations, pattern, requiredApprovingReviewCount, requiredStatusCheckContexts, requiresCodeOwnerReviews, requiresConversationResolution, requiresLinearHistory, requiresSignatures, viewerAllowedToDismissReviews, viewerCanPush)
end

"""
Represents a Git reference.
"""
mutable struct Ref <: OfficialGithubSchema
    "\n  A list of pull requests with this ref as the head ref.\n  "
    associatedPullRequests::PullRequestConnection
    branchProtectionRule
    "\n  Compares the current ref as a base ref to another head ref, if the comparison can be made.\n  "
    compare::Union{Comparison, Missing, Nothing}
    id::String
    "\n  The ref name.\n  "
    name::String
    "\n  The ref's prefix, such as `refs/heads/` or `refs/tags/`.\n  "
    prefix::String
    "\n  Branch protection rules that are viewable by non-admins\n  "
    refUpdateRule::Union{RefUpdateRule, Missing, Nothing}
    repository
    "\n  The object the ref points to. Returns null when object does not exist.\n  "
    target::Union{GitObject, Missing, Nothing}
end
function Ref(; associatedPullRequests, branchProtectionRule = nothing, compare = nothing, id, name, prefix, refUpdateRule = nothing, repository, target = nothing)
    Ref(associatedPullRequests, branchProtectionRule, compare, id, name, prefix, refUpdateRule, repository, target)
end
function Base.getproperty(t::Ref, sym::Symbol)
    if sym === Symbol("branchProtectionRule")
        getfield(t, Symbol("branchProtectionRule"))::Union{BranchProtectionRule, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Ref, sym::Symbol, val::Any)
    if sym === Symbol("branchProtectionRule")
        setfield!(t, Symbol("branchProtectionRule"), val::Union{BranchProtectionRule, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
A branch linked to an issue.
"""
mutable struct LinkedBranch <: OfficialGithubSchema
    id::String
    "\n  The branch's ref.\n  "
    ref::Union{Ref, Missing, Nothing}
end
function LinkedBranch(; id, ref = nothing)
    LinkedBranch(id, ref)
end

"""
An edge in a connection.
"""
mutable struct LinkedBranchEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{LinkedBranch, Missing, Nothing}
end
function LinkedBranchEdge(; cursor, node = nothing)
    LinkedBranchEdge(cursor, node)
end

"""
The connection type for LinkedBranch.
"""
mutable struct LinkedBranchConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{LinkedBranchEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{LinkedBranch, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function LinkedBranchConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    LinkedBranchConnection(edges, nodes, pageInfo, totalCount)
end

Core.@doc "An item in an issue timeline" const IssueTimelineItems = Union{AddedToProjectEvent, AssignedEvent, ClosedEvent, CommentDeletedEvent, ConnectedEvent, ConvertedNoteToIssueEvent, ConvertedToDiscussionEvent, CrossReferencedEvent, DemilestonedEvent, DisconnectedEvent, IssueComment, LabeledEvent, LockedEvent, MarkedAsDuplicateEvent, MentionedEvent, MilestonedEvent, MovedColumnsInProjectEvent, PinnedEvent, ReferencedEvent, RemovedFromProjectEvent, RenamedTitleEvent, ReopenedEvent, SubscribedEvent, TransferredEvent, UnassignedEvent, UnlabeledEvent, UnlockedEvent, UnmarkedAsDuplicateEvent, UnpinnedEvent, UnsubscribedEvent, UserBlockedEvent}

"""
An edge in a connection.
"""
mutable struct IssueTimelineItemsEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{IssueTimelineItems, Missing, Nothing}
end
function IssueTimelineItemsEdge(; cursor, node = nothing)
    IssueTimelineItemsEdge(cursor, node)
end

"""
The connection type for IssueTimelineItems.
"""
mutable struct IssueTimelineItemsConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{IssueTimelineItemsEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  Identifies the count of items after applying `before` and `after` filters.\n  "
    filteredCount::Int
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{IssueTimelineItems, Missing, Nothing}}, Missing, Nothing}
    "\n  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.\n  "
    pageCount::Int
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
    "\n  Identifies the date and time when the timeline was last updated.\n  "
    updatedAt::DateTime
end
function IssueTimelineItemsConnection(; edges = nothing, filteredCount, nodes = nothing, pageCount, pageInfo, totalCount, updatedAt)
    IssueTimelineItemsConnection(edges, filteredCount, nodes, pageCount, pageInfo, totalCount, updatedAt)
end

Core.@doc "An item in an issue timeline" const IssueTimelineItem = Union{AssignedEvent, ClosedEvent, Commit, CrossReferencedEvent, DemilestonedEvent, IssueComment, LabeledEvent, LockedEvent, MilestonedEvent, ReferencedEvent, RenamedTitleEvent, ReopenedEvent, SubscribedEvent, TransferredEvent, UnassignedEvent, UnlabeledEvent, UnlockedEvent, UnsubscribedEvent, UserBlockedEvent}

"""
An edge in a connection.
"""
mutable struct IssueTimelineItemEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{IssueTimelineItem, Missing, Nothing}
end
function IssueTimelineItemEdge(; cursor, node = nothing)
    IssueTimelineItemEdge(cursor, node)
end

"""
The connection type for IssueTimelineItem.
"""
mutable struct IssueTimelineConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{IssueTimelineItemEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{IssueTimelineItem, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function IssueTimelineConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    IssueTimelineConnection(edges, nodes, pageInfo, totalCount)
end

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
mutable struct Issue <: OfficialGithubSchema
    "\n  Reason that the conversation was locked.\n  "
    activeLockReason::Union{LockReason.T, Missing, Nothing}
    "\n  A list of Users assigned to this object.\n  "
    assignees::UserConnection
    "\n  The actor who authored the comment.\n  "
    author::Union{Actor, Missing, Nothing}
    "\n  Author's association with the subject of the comment.\n  "
    authorAssociation::CommentAuthorAssociation.T
    "\n  Identifies the body of the issue.\n  "
    body::String
    "\n  The body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  The http path for this issue body\n  "
    bodyResourcePath::URI
    "\n  Identifies the body of the issue rendered to text.\n  "
    bodyText::String
    "\n  The http URL for this issue body\n  "
    bodyUrl::URI
    "\n  `true` if the object is closed (definition of closed may depend on type)\n  "
    closed::Bool
    "\n  Identifies the date and time when the object was closed.\n  "
    closedAt::Union{DateTime, Missing, Nothing}
    "\n  A list of comments associated with the Issue.\n  "
    comments::IssueCommentConnection
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Check if this comment was created via an email reply.\n  "
    createdViaEmail::Bool
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The actor who edited the comment.\n  "
    editor::Union{Actor, Missing, Nothing}
    "\n  The hovercard information for this issue\n  "
    hovercard::Hovercard
    id::String
    "\n  Check if this comment was edited and includes an edit with the creation data\n  "
    includesCreatedEdit::Bool
    "\n  Indicates whether or not this issue is currently pinned to the repository issues list\n  "
    isPinned::Union{Bool, Missing, Nothing}
    "\n  Is this issue read by the viewer\n  "
    isReadByViewer::Union{Bool, Missing, Nothing}
    "\n  A list of labels associated with the object.\n  "
    labels::Union{LabelConnection, Missing, Nothing}
    "\n  The moment the editor made the last edit\n  "
    lastEditedAt::Union{DateTime, Missing, Nothing}
    "\n  Branches linked to this issue.\n  "
    linkedBranches::LinkedBranchConnection
    "\n  `true` if the object is locked\n  "
    locked::Bool
    "\n  Identifies the milestone associated with the issue.\n  "
    milestone::Union{Milestone, Missing, Nothing}
    "\n  Identifies the issue number.\n  "
    number::Int
    "\n  A list of Users that are participating in the Issue conversation.\n  "
    participants::UserConnection
    "\n  List of project cards associated with this issue.\n  "
    projectCards::ProjectCardConnection
    "\n  List of project items associated with this issue.\n  "
    projectItems::ProjectV2ItemConnection
    projectNext
    projectNextItems
    projectV2
    projectsNext
    "\n  A list of projects under the owner.\n  "
    projectsV2::ProjectV2Connection
    "\n  Identifies when the comment was published at.\n  "
    publishedAt::Union{DateTime, Missing, Nothing}
    reactionGroups
    "\n  A list of Reactions left on the Issue.\n  "
    reactions::ReactionConnection
    repository
    "\n  The HTTP path for this issue\n  "
    resourcePath::URI
    "\n  Identifies the state of the issue.\n  "
    state::IssueState.T
    "\n  Identifies the reason for the issue state.\n  "
    stateReason::Union{IssueStateReason.T, Missing, Nothing}
    "\n  A list of events, comments, commits, etc. associated with the issue.\n  "
    timeline::IssueTimelineConnection
    "\n  A list of events, comments, commits, etc. associated with the issue.\n  "
    timelineItems::IssueTimelineItemsConnection
    "\n  Identifies the issue title.\n  "
    title::String
    "\n  Identifies the issue title rendered to HTML.\n  "
    titleHTML::String
    "\n  A list of issues that track this issue\n  "
    trackedInIssues::IssueConnection
    "\n  A list of issues tracked inside the current issue\n  "
    trackedIssues::IssueConnection
    "\n  The number of tracked issues for this issue\n  "
    trackedIssuesCount::Int
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this issue\n  "
    url::URI
    "\n  A list of edits to this content.\n  "
    userContentEdits::Union{UserContentEditConnection, Missing, Nothing}
    "\n  Can user react to this subject\n  "
    viewerCanReact::Bool
    "\n  Check if the viewer is able to change their subscription status for the repository.\n  "
    viewerCanSubscribe::Bool
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  Reasons why the current viewer can not update this comment.\n  "
    viewerCannotUpdateReasons::Vector{CommentCannotUpdateReason.T}
    "\n  Did the viewer author this comment.\n  "
    viewerDidAuthor::Bool
    "\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  "
    viewerSubscription::Union{SubscriptionState.T, Missing, Nothing}
end
function Issue(; activeLockReason = nothing, assignees, author = nothing, authorAssociation, body, bodyHTML, bodyResourcePath, bodyText, bodyUrl, closed, closedAt = nothing, comments, createdAt, createdViaEmail, databaseId = nothing, editor = nothing, hovercard, id, includesCreatedEdit, isPinned = nothing, isReadByViewer = nothing, labels = nothing, lastEditedAt = nothing, linkedBranches, locked, milestone = nothing, number, participants, projectCards, projectItems, projectNext = nothing, projectNextItems, projectV2 = nothing, projectsNext, projectsV2, publishedAt = nothing, reactionGroups = nothing, reactions, repository, resourcePath, state, stateReason = nothing, timeline, timelineItems, title, titleHTML, trackedInIssues, trackedIssues, trackedIssuesCount, updatedAt, url, userContentEdits = nothing, viewerCanReact, viewerCanSubscribe, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor, viewerSubscription = nothing)
    Issue(activeLockReason, assignees, author, authorAssociation, body, bodyHTML, bodyResourcePath, bodyText, bodyUrl, closed, closedAt, comments, createdAt, createdViaEmail, databaseId, editor, hovercard, id, includesCreatedEdit, isPinned, isReadByViewer, labels, lastEditedAt, linkedBranches, locked, milestone, number, participants, projectCards, projectItems, projectNext, projectNextItems, projectV2, projectsNext, projectsV2, publishedAt, reactionGroups, reactions, repository, resourcePath, state, stateReason, timeline, timelineItems, title, titleHTML, trackedInIssues, trackedIssues, trackedIssuesCount, updatedAt, url, userContentEdits, viewerCanReact, viewerCanSubscribe, viewerCanUpdate, viewerCannotUpdateReasons, viewerDidAuthor, viewerSubscription)
end
function Base.getproperty(t::Issue, sym::Symbol)
    if sym === Symbol("projectNext")
        getfield(t, Symbol("projectNext"))::Union{ProjectNext, Missing, Nothing}
    elseif sym === Symbol("projectNextItems")
        getfield(t, Symbol("projectNextItems"))::ProjectNextItemConnection
    elseif sym === Symbol("projectV2")
        getfield(t, Symbol("projectV2"))::Union{ProjectV2, Missing, Nothing}
    elseif sym === Symbol("projectsNext")
        getfield(t, Symbol("projectsNext"))::ProjectNextConnection
    elseif sym === Symbol("reactionGroups")
        getfield(t, Symbol("reactionGroups"))::Union{Vector{ReactionGroup}, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Issue, sym::Symbol, val::Any)
    if sym === Symbol("projectNext")
        setfield!(t, Symbol("projectNext"), val::Union{ProjectNext, Missing, Nothing})
    elseif sym === Symbol("projectNextItems")
        setfield!(t, Symbol("projectNextItems"), val::ProjectNextItemConnection)
    elseif sym === Symbol("projectV2")
        setfield!(t, Symbol("projectV2"), val::Union{ProjectV2, Missing, Nothing})
    elseif sym === Symbol("projectsNext")
        setfield!(t, Symbol("projectsNext"), val::ProjectNextConnection)
    elseif sym === Symbol("reactionGroups")
        setfield!(t, Symbol("reactionGroups"), val::Union{Vector{ReactionGroup}, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Types that can be inside Project Items." const ProjectNextItemContent = Union{DraftIssue, Issue, PullRequest}

"""
An value of a field in an item of a new Project.
"""
mutable struct ProjectNextItemFieldValue <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who created the item.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The project field that contains this value.\n  "
    projectField::ProjectNextField
    projectItem
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The value of a field\n  "
    value::Union{String, Missing, Nothing}
end
function ProjectNextItemFieldValue(; createdAt, creator = nothing, databaseId = nothing, id, projectField, projectItem, updatedAt, value = nothing)
    ProjectNextItemFieldValue(createdAt, creator, databaseId, id, projectField, projectItem, updatedAt, value)
end
function Base.getproperty(t::ProjectNextItemFieldValue, sym::Symbol)
    if sym === Symbol("projectItem")
        getfield(t, Symbol("projectItem"))::ProjectNextItem
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectNextItemFieldValue, sym::Symbol, val::Any)
    if sym === Symbol("projectItem")
        setfield!(t, Symbol("projectItem"), val::ProjectNextItem)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct ProjectNextItemFieldValueEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectNextItemFieldValue, Missing, Nothing}
end
function ProjectNextItemFieldValueEdge(; cursor, node = nothing)
    ProjectNextItemFieldValueEdge(cursor, node)
end

"""
The connection type for ProjectNextItemFieldValue.
"""
mutable struct ProjectNextItemFieldValueConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectNextItemFieldValueEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectNextItemFieldValue, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectNextItemFieldValueConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectNextItemFieldValueConnection(edges, nodes, pageInfo, totalCount)
end

"""
An item within a new Project.
"""
mutable struct ProjectNextItem <: OfficialGithubSchema
    "\n  The content of the referenced draft issue, issue, or pull request\n  "
    content::Union{ProjectNextItemContent, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who created the item.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  List of field values\n  "
    fieldValues::ProjectNextItemFieldValueConnection
    id::String
    "\n  Whether the item is archived.\n  "
    isArchived::Bool
    project
    "\n  The title of the item\n  "
    title::Union{String, Missing, Nothing}
    "\n  The type of the item.\n  "
    type::ProjectItemType.T
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function ProjectNextItem(; content = nothing, createdAt, creator = nothing, databaseId = nothing, fieldValues, id, isArchived, project, title = nothing, type, updatedAt)
    ProjectNextItem(content, createdAt, creator, databaseId, fieldValues, id, isArchived, project, title, type, updatedAt)
end
function Base.getproperty(t::ProjectNextItem, sym::Symbol)
    if sym === Symbol("project")
        getfield(t, Symbol("project"))::ProjectNext
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectNextItem, sym::Symbol, val::Any)
    if sym === Symbol("project")
        setfield!(t, Symbol("project"), val::ProjectNext)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct ProjectNextItemEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectNextItem, Missing, Nothing}
end
function ProjectNextItemEdge(; cursor, node = nothing)
    ProjectNextItemEdge(cursor, node)
end

"""
The connection type for ProjectNextItem.
"""
mutable struct ProjectNextItemConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectNextItemEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectNextItem, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectNextItemConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectNextItemConnection(edges, nodes, pageInfo, totalCount)
end

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
mutable struct ProjectNext <: OfficialGithubSchema
    "\n  Returns true if the project is closed.\n  "
    closed::Bool
    "\n  Identifies the date and time when the object was closed.\n  "
    closedAt::Union{DateTime, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who originally created the project.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The project's description.\n  "
    description::Union{String, Missing, Nothing}
    "\n  List of fields in the project\n  "
    fields::ProjectNextFieldConnection
    id::String
    "\n  List of items in the project\n  "
    items::ProjectNextItemConnection
    "\n  The project's number.\n  "
    number::Int
    "\n  The project's owner. Currently limited to organizations and users.\n  "
    owner::ProjectNextOwner
    "\n  Returns true if the project is public.\n  "
    public::Bool
    repositories
    "\n  The HTTP path for this project\n  "
    resourcePath::URI
    "\n  The project's short description.\n  "
    shortDescription::Union{String, Missing, Nothing}
    "\n  The project's name.\n  "
    title::Union{String, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this project\n  "
    url::URI
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  List of views in the project\n  "
    views::ProjectViewConnection
end
function ProjectNext(; closed, closedAt = nothing, createdAt, creator = nothing, databaseId = nothing, description = nothing, fields, id, items, number, owner, public, repositories, resourcePath, shortDescription = nothing, title = nothing, updatedAt, url, viewerCanUpdate, views)
    ProjectNext(closed, closedAt, createdAt, creator, databaseId, description, fields, id, items, number, owner, public, repositories, resourcePath, shortDescription, title, updatedAt, url, viewerCanUpdate, views)
end
function Base.getproperty(t::ProjectNext, sym::Symbol)
    if sym === Symbol("repositories")
        getfield(t, Symbol("repositories"))::RepositoryConnection
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ProjectNext, sym::Symbol, val::Any)
    if sym === Symbol("repositories")
        setfield!(t, Symbol("repositories"), val::RepositoryConnection)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct ProjectNextEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ProjectNext, Missing, Nothing}
end
function ProjectNextEdge(; cursor, node = nothing)
    ProjectNextEdge(cursor, node)
end

"""
The connection type for ProjectNext.
"""
mutable struct ProjectNextConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectNextEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ProjectNext, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectNextConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectNextConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct ProjectEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Project, Missing, Nothing}
end
function ProjectEdge(; cursor, node = nothing)
    ProjectEdge(cursor, node)
end

"""
A list of projects associated with the owner.
"""
mutable struct ProjectConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ProjectEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Project, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ProjectConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ProjectConnection(edges, nodes, pageInfo, totalCount)
end

"""
An Identity Provider configured to provision SAML and SCIM identities for Organizations
"""
mutable struct OrganizationIdentityProvider <: OfficialGithubSchema
    "\n  The digest algorithm used to sign SAML requests for the Identity Provider.\n  "
    digestMethod::Union{URI, Missing, Nothing}
    "\n  External Identities provisioned by this Identity Provider\n  "
    externalIdentities::ExternalIdentityConnection
    id::String
    "\n  The x509 certificate used by the Identity Provider to sign assertions and responses.\n  "
    idpCertificate::Union{X509Certificate, Missing, Nothing}
    "\n  The Issuer Entity ID for the SAML Identity Provider\n  "
    issuer::Union{String, Missing, Nothing}
    organization
    "\n  The signature algorithm used to sign SAML requests for the Identity Provider.\n  "
    signatureMethod::Union{URI, Missing, Nothing}
    "\n  The URL endpoint for the Identity Provider's SAML SSO.\n  "
    ssoUrl::Union{URI, Missing, Nothing}
end
function OrganizationIdentityProvider(; digestMethod = nothing, externalIdentities, id, idpCertificate = nothing, issuer = nothing, organization = nothing, signatureMethod = nothing, ssoUrl = nothing)
    OrganizationIdentityProvider(digestMethod, externalIdentities, id, idpCertificate, issuer, organization, signatureMethod, ssoUrl)
end
function Base.getproperty(t::OrganizationIdentityProvider, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrganizationIdentityProvider, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Location information for an actor
"""
mutable struct ActorLocation <: OfficialGithubSchema
    "\n  City\n  "
    city::Union{String, Missing, Nothing}
    "\n  Country name\n  "
    country::Union{String, Missing, Nothing}
    "\n  Country code\n  "
    countryCode::Union{String, Missing, Nothing}
    "\n  Region name\n  "
    region::Union{String, Missing, Nothing}
    "\n  Region or state code\n  "
    regionCode::Union{String, Missing, Nothing}
end
function ActorLocation(; city = nothing, country = nothing, countryCode = nothing, region = nothing, regionCode = nothing)
    ActorLocation(city, country, countryCode, region, regionCode)
end

"""
Metadata for an organization membership for org.restore_member actions
"""
mutable struct OrgRestoreMemberMembershipOrganizationAuditEntryData <: OfficialGithubSchema
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
end
function OrgRestoreMemberMembershipOrganizationAuditEntryData(; organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing)
    OrgRestoreMemberMembershipOrganizationAuditEntryData(organization, organizationName, organizationResourcePath, organizationUrl)
end
function Base.getproperty(t::OrgRestoreMemberMembershipOrganizationAuditEntryData, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgRestoreMemberMembershipOrganizationAuditEntryData, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Metadata for a repository membership for org.restore_member actions
"""
mutable struct OrgRestoreMemberMembershipRepositoryAuditEntryData <: OfficialGithubSchema
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
end
function OrgRestoreMemberMembershipRepositoryAuditEntryData(; repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing)
    OrgRestoreMemberMembershipRepositoryAuditEntryData(repository, repositoryName, repositoryResourcePath, repositoryUrl)
end
function Base.getproperty(t::OrgRestoreMemberMembershipRepositoryAuditEntryData, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgRestoreMemberMembershipRepositoryAuditEntryData, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Metadata for a team membership for org.restore_member actions
"""
mutable struct OrgRestoreMemberMembershipTeamAuditEntryData <: OfficialGithubSchema
    "\n  The team associated with the action\n  "
    team::Union{Team, Missing, Nothing}
    "\n  The name of the team\n  "
    teamName::Union{String, Missing, Nothing}
    "\n  The HTTP path for this team\n  "
    teamResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for this team\n  "
    teamUrl::Union{URI, Missing, Nothing}
end
function OrgRestoreMemberMembershipTeamAuditEntryData(; team = nothing, teamName = nothing, teamResourcePath = nothing, teamUrl = nothing)
    OrgRestoreMemberMembershipTeamAuditEntryData(team, teamName, teamResourcePath, teamUrl)
end

Core.@doc "Types of memberships that can be restored for an Organization member." const OrgRestoreMemberAuditEntryMembership = Union{OrgRestoreMemberMembershipOrganizationAuditEntryData, OrgRestoreMemberMembershipRepositoryAuditEntryData, OrgRestoreMemberMembershipTeamAuditEntryData}

Core.@doc "Types that can initiate an audit log event." const AuditEntryActor = Union{Bot, Organization, User}

"""
Audit log entry for a org.restore_member event.
"""
mutable struct OrgRestoreMemberAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The number of custom email routings for the restored member.\n  "
    restoredCustomEmailRoutingsCount::Union{Int, Missing, Nothing}
    "\n  The number of issue assignments for the restored member.\n  "
    restoredIssueAssignmentsCount::Union{Int, Missing, Nothing}
    "\n  Restored organization membership objects.\n  "
    restoredMemberships::Union{Vector{OrgRestoreMemberAuditEntryMembership}, Missing, Nothing}
    "\n  The number of restored memberships.\n  "
    restoredMembershipsCount::Union{Int, Missing, Nothing}
    "\n  The number of repositories of the restored member.\n  "
    restoredRepositoriesCount::Union{Int, Missing, Nothing}
    "\n  The number of starred repositories for the restored member.\n  "
    restoredRepositoryStarsCount::Union{Int, Missing, Nothing}
    "\n  The number of watched repositories for the restored member.\n  "
    restoredRepositoryWatchesCount::Union{Int, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgRestoreMemberAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, restoredCustomEmailRoutingsCount = nothing, restoredIssueAssignmentsCount = nothing, restoredMemberships = nothing, restoredMembershipsCount = nothing, restoredRepositoriesCount = nothing, restoredRepositoryStarsCount = nothing, restoredRepositoryWatchesCount = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgRestoreMemberAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, restoredCustomEmailRoutingsCount, restoredIssueAssignmentsCount, restoredMemberships, restoredMembershipsCount, restoredRepositoriesCount, restoredRepositoryStarsCount, restoredRepositoryWatchesCount, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgRestoreMemberAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgRestoreMemberAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.oauth_app_access_requested event.
"""
mutable struct OrgOauthAppAccessRequestedAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The name of the OAuth Application.\n  "
    oauthApplicationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the OAuth Application\n  "
    oauthApplicationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the OAuth Application\n  "
    oauthApplicationUrl::Union{URI, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgOauthAppAccessRequestedAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, oauthApplicationName = nothing, oauthApplicationResourcePath = nothing, oauthApplicationUrl = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgOauthAppAccessRequestedAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, oauthApplicationName, oauthApplicationResourcePath, oauthApplicationUrl, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgOauthAppAccessRequestedAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgOauthAppAccessRequestedAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.access event.
"""
mutable struct RepoAccessAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
    "\n  The visibility of the repository\n  "
    visibility::Union{RepoAccessAuditEntryVisibility.T, Missing, Nothing}
end
function RepoAccessAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing, visibility = nothing)
    RepoAccessAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl, visibility)
end
function Base.getproperty(t::RepoAccessAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoAccessAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.create event.
"""
mutable struct RepoCreateAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    "\n  The name of the parent repository for this forked repository.\n  "
    forkParentName::Union{String, Missing, Nothing}
    "\n  The name of the root repository for this network.\n  "
    forkSourceName::Union{String, Missing, Nothing}
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
    "\n  The visibility of the repository\n  "
    visibility::Union{RepoCreateAuditEntryVisibility.T, Missing, Nothing}
end
function RepoCreateAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, forkParentName = nothing, forkSourceName = nothing, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing, visibility = nothing)
    RepoCreateAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, forkParentName, forkSourceName, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl, visibility)
end
function Base.getproperty(t::RepoCreateAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoCreateAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a members_can_delete_repos.enable event.
"""
mutable struct MembersCanDeleteReposEnableAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    "\n  The HTTP path for this enterprise.\n  "
    enterpriseResourcePath::Union{URI, Missing, Nothing}
    "\n  The slug of the enterprise.\n  "
    enterpriseSlug::Union{String, Missing, Nothing}
    "\n  The HTTP URL for this enterprise.\n  "
    enterpriseUrl::Union{URI, Missing, Nothing}
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function MembersCanDeleteReposEnableAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, enterpriseResourcePath = nothing, enterpriseSlug = nothing, enterpriseUrl = nothing, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    MembersCanDeleteReposEnableAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, enterpriseResourcePath, enterpriseSlug, enterpriseUrl, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::MembersCanDeleteReposEnableAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::MembersCanDeleteReposEnableAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A topic aggregates entities that are related to a subject.
"""
mutable struct Topic <: OfficialGithubSchema
    id::String
    "\n  The topic's name.\n  "
    name::String
    "\n  A list of related topics, including aliases of this topic, sorted with the most relevant\n  first. Returns up to 10 Topics.\n  "
    relatedTopics::Vector{Topic}
    repositories
    "\n  Returns a count of how many stargazers there are on this object\n  "
    stargazerCount::Int
    "\n  A list of users who have starred this starrable.\n  "
    stargazers::StargazerConnection
    "\n  Returns a boolean indicating whether the viewing user has starred this starrable.\n  "
    viewerHasStarred::Bool
end
function Topic(; id, name, relatedTopics, repositories, stargazerCount, stargazers, viewerHasStarred)
    Topic(id, name, relatedTopics, repositories, stargazerCount, stargazers, viewerHasStarred)
end
function Base.getproperty(t::Topic, sym::Symbol)
    if sym === Symbol("repositories")
        getfield(t, Symbol("repositories"))::RepositoryConnection
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Topic, sym::Symbol, val::Any)
    if sym === Symbol("repositories")
        setfield!(t, Symbol("repositories"), val::RepositoryConnection)
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.remove_topic event.
"""
mutable struct RepoRemoveTopicAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    "\n  The name of the topic added to the repository\n  "
    topic::Union{Topic, Missing, Nothing}
    "\n  The name of the topic added to the repository\n  "
    topicName::Union{String, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoRemoveTopicAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, topic = nothing, topicName = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoRemoveTopicAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, topic, topicName, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoRemoveTopicAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoRemoveTopicAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
"""
mutable struct RepoConfigDisableSockpuppetDisallowedAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoConfigDisableSockpuppetDisallowedAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoConfigDisableSockpuppetDisallowedAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoConfigDisableSockpuppetDisallowedAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoConfigDisableSockpuppetDisallowedAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.config.enable_collaborators_only event.
"""
mutable struct RepoConfigEnableCollaboratorsOnlyAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoConfigEnableCollaboratorsOnlyAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoConfigEnableCollaboratorsOnlyAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoConfigEnableCollaboratorsOnlyAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoConfigEnableCollaboratorsOnlyAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.add_topic event.
"""
mutable struct RepoAddTopicAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    "\n  The name of the topic added to the repository\n  "
    topic::Union{Topic, Missing, Nothing}
    "\n  The name of the topic added to the repository\n  "
    topicName::Union{String, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoAddTopicAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, topic = nothing, topicName = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoAddTopicAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, topic, topicName, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoAddTopicAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoAddTopicAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repository_visibility_change.disable event.
"""
mutable struct RepositoryVisibilityChangeDisableAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    "\n  The HTTP path for this enterprise.\n  "
    enterpriseResourcePath::Union{URI, Missing, Nothing}
    "\n  The slug of the enterprise.\n  "
    enterpriseSlug::Union{String, Missing, Nothing}
    "\n  The HTTP URL for this enterprise.\n  "
    enterpriseUrl::Union{URI, Missing, Nothing}
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepositoryVisibilityChangeDisableAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, enterpriseResourcePath = nothing, enterpriseSlug = nothing, enterpriseUrl = nothing, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepositoryVisibilityChangeDisableAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, enterpriseResourcePath, enterpriseSlug, enterpriseUrl, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepositoryVisibilityChangeDisableAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepositoryVisibilityChangeDisableAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.oauth_app_access_approved event.
"""
mutable struct OrgOauthAppAccessApprovedAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The name of the OAuth Application.\n  "
    oauthApplicationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the OAuth Application\n  "
    oauthApplicationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the OAuth Application\n  "
    oauthApplicationUrl::Union{URI, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgOauthAppAccessApprovedAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, oauthApplicationName = nothing, oauthApplicationResourcePath = nothing, oauthApplicationUrl = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgOauthAppAccessApprovedAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, oauthApplicationName, oauthApplicationResourcePath, oauthApplicationUrl, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgOauthAppAccessApprovedAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgOauthAppAccessApprovedAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.oauth_app_access_denied event.
"""
mutable struct OrgOauthAppAccessDeniedAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The name of the OAuth Application.\n  "
    oauthApplicationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the OAuth Application\n  "
    oauthApplicationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the OAuth Application\n  "
    oauthApplicationUrl::Union{URI, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgOauthAppAccessDeniedAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, oauthApplicationName = nothing, oauthApplicationResourcePath = nothing, oauthApplicationUrl = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgOauthAppAccessDeniedAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, oauthApplicationName, oauthApplicationResourcePath, oauthApplicationUrl, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgOauthAppAccessDeniedAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgOauthAppAccessDeniedAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.create event.
"""
mutable struct OrgCreateAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The billing plan for the Organization.\n  "
    billingPlan::Union{OrgCreateAuditEntryBillingPlan.T, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgCreateAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, billingPlan = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgCreateAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, billingPlan, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgCreateAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgCreateAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.change_merge_setting event.
"""
mutable struct RepoChangeMergeSettingAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  Whether the change was to enable (true) or disable (false) the merge type\n  "
    isEnabled::Union{Bool, Missing, Nothing}
    "\n  The merge method affected by the change\n  "
    mergeType::Union{RepoChangeMergeSettingAuditEntryMergeType.T, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoChangeMergeSettingAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, isEnabled = nothing, mergeType = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoChangeMergeSettingAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, isEnabled, mergeType, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoChangeMergeSettingAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoChangeMergeSettingAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a team.remove_member event.
"""
mutable struct TeamRemoveMemberAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  Whether the team was mapped to an LDAP Group.\n  "
    isLdapMapped::Union{Bool, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The team associated with the action\n  "
    team::Union{Team, Missing, Nothing}
    "\n  The name of the team\n  "
    teamName::Union{String, Missing, Nothing}
    "\n  The HTTP path for this team\n  "
    teamResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for this team\n  "
    teamUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function TeamRemoveMemberAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, isLdapMapped = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, team = nothing, teamName = nothing, teamResourcePath = nothing, teamUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    TeamRemoveMemberAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, isLdapMapped, operationType, organization, organizationName, organizationResourcePath, organizationUrl, team, teamName, teamResourcePath, teamUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::TeamRemoveMemberAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamRemoveMemberAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a team.add_repository event.
"""
mutable struct TeamAddRepositoryAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  Whether the team was mapped to an LDAP Group.\n  "
    isLdapMapped::Union{Bool, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    "\n  The team associated with the action\n  "
    team::Union{Team, Missing, Nothing}
    "\n  The name of the team\n  "
    teamName::Union{String, Missing, Nothing}
    "\n  The HTTP path for this team\n  "
    teamResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for this team\n  "
    teamUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function TeamAddRepositoryAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, isLdapMapped = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, team = nothing, teamName = nothing, teamResourcePath = nothing, teamUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    TeamAddRepositoryAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, isLdapMapped, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, team, teamName, teamResourcePath, teamUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::TeamAddRepositoryAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamAddRepositoryAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.config.enable_collaborators_only event.
"""
mutable struct OrgConfigEnableCollaboratorsOnlyAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgConfigEnableCollaboratorsOnlyAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgConfigEnableCollaboratorsOnlyAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgConfigEnableCollaboratorsOnlyAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgConfigEnableCollaboratorsOnlyAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.block_user
"""
mutable struct OrgBlockUserAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    blockedUser
    "\n  The username of the blocked user.\n  "
    blockedUserName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the blocked user.\n  "
    blockedUserResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the blocked user.\n  "
    blockedUserUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgBlockUserAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, blockedUser = nothing, blockedUserName = nothing, blockedUserResourcePath = nothing, blockedUserUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgBlockUserAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, blockedUser, blockedUserName, blockedUserResourcePath, blockedUserUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgBlockUserAuditEntry, sym::Symbol)
    if sym === Symbol("blockedUser")
        getfield(t, Symbol("blockedUser"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgBlockUserAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("blockedUser")
        setfield!(t, Symbol("blockedUser"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.config.disable_collaborators_only event.
"""
mutable struct OrgConfigDisableCollaboratorsOnlyAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgConfigDisableCollaboratorsOnlyAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgConfigDisableCollaboratorsOnlyAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgConfigDisableCollaboratorsOnlyAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgConfigDisableCollaboratorsOnlyAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.disable_oauth_app_restrictions event.
"""
mutable struct OrgDisableOauthAppRestrictionsAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgDisableOauthAppRestrictionsAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgDisableOauthAppRestrictionsAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgDisableOauthAppRestrictionsAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgDisableOauthAppRestrictionsAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.invite_member event.
"""
mutable struct OrgInviteMemberAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    "\n  The email address of the organization invitation.\n  "
    email::Union{String, Missing, Nothing}
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The organization invitation.\n  "
    organizationInvitation::Union{OrganizationInvitation, Missing, Nothing}
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgInviteMemberAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, email = nothing, id, operationType = nothing, organization = nothing, organizationInvitation = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgInviteMemberAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, email, id, operationType, organization, organizationInvitation, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgInviteMemberAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgInviteMemberAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.config.disable_contributors_only event.
"""
mutable struct RepoConfigDisableContributorsOnlyAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoConfigDisableContributorsOnlyAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoConfigDisableContributorsOnlyAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoConfigDisableContributorsOnlyAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoConfigDisableContributorsOnlyAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a team.remove_repository event.
"""
mutable struct TeamRemoveRepositoryAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  Whether the team was mapped to an LDAP Group.\n  "
    isLdapMapped::Union{Bool, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    "\n  The team associated with the action\n  "
    team::Union{Team, Missing, Nothing}
    "\n  The name of the team\n  "
    teamName::Union{String, Missing, Nothing}
    "\n  The HTTP path for this team\n  "
    teamResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for this team\n  "
    teamUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function TeamRemoveRepositoryAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, isLdapMapped = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, team = nothing, teamName = nothing, teamResourcePath = nothing, teamUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    TeamRemoveRepositoryAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, isLdapMapped, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, team, teamName, teamResourcePath, teamUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::TeamRemoveRepositoryAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamRemoveRepositoryAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.update_default_repository_permission
"""
mutable struct OrgUpdateDefaultRepositoryPermissionAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The new base repository permission level for the organization.\n  "
    permission::Union{OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.T, Missing, Nothing}
    "\n  The former base repository permission level for the organization.\n  "
    permissionWas::Union{OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.T, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgUpdateDefaultRepositoryPermissionAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, permission = nothing, permissionWas = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgUpdateDefaultRepositoryPermissionAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, permission, permissionWas, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgUpdateDefaultRepositoryPermissionAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgUpdateDefaultRepositoryPermissionAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.config.enable_contributors_only event.
"""
mutable struct RepoConfigEnableContributorsOnlyAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoConfigEnableContributorsOnlyAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoConfigEnableContributorsOnlyAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoConfigEnableContributorsOnlyAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoConfigEnableContributorsOnlyAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a oauth_application.create event.
"""
mutable struct OauthApplicationCreateAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The application URL of the OAuth Application.\n  "
    applicationUrl::Union{URI, Missing, Nothing}
    "\n  The callback URL of the OAuth Application.\n  "
    callbackUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The name of the OAuth Application.\n  "
    oauthApplicationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the OAuth Application\n  "
    oauthApplicationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the OAuth Application\n  "
    oauthApplicationUrl::Union{URI, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The rate limit of the OAuth Application.\n  "
    rateLimit::Union{Int, Missing, Nothing}
    "\n  The state of the OAuth Application.\n  "
    state::Union{OauthApplicationCreateAuditEntryState.T, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OauthApplicationCreateAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, applicationUrl = nothing, callbackUrl = nothing, createdAt, id, oauthApplicationName = nothing, oauthApplicationResourcePath = nothing, oauthApplicationUrl = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, rateLimit = nothing, state = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OauthApplicationCreateAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, applicationUrl, callbackUrl, createdAt, id, oauthApplicationName, oauthApplicationResourcePath, oauthApplicationUrl, operationType, organization, organizationName, organizationResourcePath, organizationUrl, rateLimit, state, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OauthApplicationCreateAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OauthApplicationCreateAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.enable_oauth_app_restrictions event.
"""
mutable struct OrgEnableOauthAppRestrictionsAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgEnableOauthAppRestrictionsAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgEnableOauthAppRestrictionsAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgEnableOauthAppRestrictionsAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgEnableOauthAppRestrictionsAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.add_member
"""
mutable struct OrgAddMemberAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The permission level of the member added to the organization.\n  "
    permission::Union{OrgAddMemberAuditEntryPermission.T, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgAddMemberAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, permission = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgAddMemberAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, permission, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgAddMemberAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgAddMemberAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.config.unlock_anonymous_git_access event.
"""
mutable struct RepoConfigUnlockAnonymousGitAccessAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoConfigUnlockAnonymousGitAccessAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoConfigUnlockAnonymousGitAccessAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoConfigUnlockAnonymousGitAccessAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoConfigUnlockAnonymousGitAccessAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.enable_two_factor_requirement event.
"""
mutable struct OrgEnableTwoFactorRequirementAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgEnableTwoFactorRequirementAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgEnableTwoFactorRequirementAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgEnableTwoFactorRequirementAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgEnableTwoFactorRequirementAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.update_member_repository_invitation_permission event.
"""
mutable struct OrgUpdateMemberRepositoryInvitationPermissionAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  Can outside collaborators be invited to repositories in the organization.\n  "
    canInviteOutsideCollaboratorsToRepositories::Union{Bool, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgUpdateMemberRepositoryInvitationPermissionAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, canInviteOutsideCollaboratorsToRepositories = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgUpdateMemberRepositoryInvitationPermissionAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, canInviteOutsideCollaboratorsToRepositories, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.destroy event.
"""
mutable struct RepoDestroyAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
    "\n  The visibility of the repository\n  "
    visibility::Union{RepoDestroyAuditEntryVisibility.T, Missing, Nothing}
end
function RepoDestroyAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing, visibility = nothing)
    RepoDestroyAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl, visibility)
end
function Base.getproperty(t::RepoDestroyAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoDestroyAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.remove_member event.
"""
mutable struct RepoRemoveMemberAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
    "\n  The visibility of the repository\n  "
    visibility::Union{RepoRemoveMemberAuditEntryVisibility.T, Missing, Nothing}
end
function RepoRemoveMemberAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing, visibility = nothing)
    RepoRemoveMemberAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl, visibility)
end
function Base.getproperty(t::RepoRemoveMemberAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoRemoveMemberAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repository_visibility_change.enable event.
"""
mutable struct RepositoryVisibilityChangeEnableAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    "\n  The HTTP path for this enterprise.\n  "
    enterpriseResourcePath::Union{URI, Missing, Nothing}
    "\n  The slug of the enterprise.\n  "
    enterpriseSlug::Union{String, Missing, Nothing}
    "\n  The HTTP URL for this enterprise.\n  "
    enterpriseUrl::Union{URI, Missing, Nothing}
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepositoryVisibilityChangeEnableAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, enterpriseResourcePath = nothing, enterpriseSlug = nothing, enterpriseUrl = nothing, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepositoryVisibilityChangeEnableAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, enterpriseResourcePath, enterpriseSlug, enterpriseUrl, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepositoryVisibilityChangeEnableAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepositoryVisibilityChangeEnableAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.invite_to_business event.
"""
mutable struct OrgInviteToBusinessAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    "\n  The HTTP path for this enterprise.\n  "
    enterpriseResourcePath::Union{URI, Missing, Nothing}
    "\n  The slug of the enterprise.\n  "
    enterpriseSlug::Union{String, Missing, Nothing}
    "\n  The HTTP URL for this enterprise.\n  "
    enterpriseUrl::Union{URI, Missing, Nothing}
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgInviteToBusinessAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, enterpriseResourcePath = nothing, enterpriseSlug = nothing, enterpriseUrl = nothing, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgInviteToBusinessAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, enterpriseResourcePath, enterpriseSlug, enterpriseUrl, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgInviteToBusinessAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgInviteToBusinessAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.config.disable_collaborators_only event.
"""
mutable struct RepoConfigDisableCollaboratorsOnlyAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoConfigDisableCollaboratorsOnlyAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoConfigDisableCollaboratorsOnlyAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoConfigDisableCollaboratorsOnlyAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoConfigDisableCollaboratorsOnlyAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.disable_two_factor_requirement event.
"""
mutable struct OrgDisableTwoFactorRequirementAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgDisableTwoFactorRequirementAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgDisableTwoFactorRequirementAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgDisableTwoFactorRequirementAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgDisableTwoFactorRequirementAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.add_billing_manager
"""
mutable struct OrgAddBillingManagerAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The email address used to invite a billing manager for the organization.\n  "
    invitationEmail::Union{String, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgAddBillingManagerAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, invitationEmail = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgAddBillingManagerAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, invitationEmail, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgAddBillingManagerAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgAddBillingManagerAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a private_repository_forking.disable event.
"""
mutable struct PrivateRepositoryForkingDisableAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    "\n  The HTTP path for this enterprise.\n  "
    enterpriseResourcePath::Union{URI, Missing, Nothing}
    "\n  The slug of the enterprise.\n  "
    enterpriseSlug::Union{String, Missing, Nothing}
    "\n  The HTTP URL for this enterprise.\n  "
    enterpriseUrl::Union{URI, Missing, Nothing}
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function PrivateRepositoryForkingDisableAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, enterpriseResourcePath = nothing, enterpriseSlug = nothing, enterpriseUrl = nothing, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    PrivateRepositoryForkingDisableAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, enterpriseResourcePath, enterpriseSlug, enterpriseUrl, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::PrivateRepositoryForkingDisableAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PrivateRepositoryForkingDisableAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.archived event.
"""
mutable struct RepoArchivedAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
    "\n  The visibility of the repository\n  "
    visibility::Union{RepoArchivedAuditEntryVisibility.T, Missing, Nothing}
end
function RepoArchivedAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing, visibility = nothing)
    RepoArchivedAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl, visibility)
end
function Base.getproperty(t::RepoArchivedAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoArchivedAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a members_can_delete_repos.disable event.
"""
mutable struct MembersCanDeleteReposDisableAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    "\n  The HTTP path for this enterprise.\n  "
    enterpriseResourcePath::Union{URI, Missing, Nothing}
    "\n  The slug of the enterprise.\n  "
    enterpriseSlug::Union{String, Missing, Nothing}
    "\n  The HTTP URL for this enterprise.\n  "
    enterpriseUrl::Union{URI, Missing, Nothing}
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function MembersCanDeleteReposDisableAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, enterpriseResourcePath = nothing, enterpriseSlug = nothing, enterpriseUrl = nothing, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    MembersCanDeleteReposDisableAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, enterpriseResourcePath, enterpriseSlug, enterpriseUrl, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::MembersCanDeleteReposDisableAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::MembersCanDeleteReposDisableAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.update_member_repository_creation_permission event.
"""
mutable struct OrgUpdateMemberRepositoryCreationPermissionAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  Can members create repositories in the organization.\n  "
    canCreateRepositories::Union{Bool, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
    "\n  The permission for visibility level of repositories for this organization.\n  "
    visibility::Union{OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.T, Missing, Nothing}
end
function OrgUpdateMemberRepositoryCreationPermissionAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, canCreateRepositories = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing, visibility = nothing)
    OrgUpdateMemberRepositoryCreationPermissionAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, canCreateRepositories, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl, visibility)
end
function Base.getproperty(t::OrgUpdateMemberRepositoryCreationPermissionAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgUpdateMemberRepositoryCreationPermissionAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
"""
mutable struct RepoConfigEnableSockpuppetDisallowedAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoConfigEnableSockpuppetDisallowedAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoConfigEnableSockpuppetDisallowedAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoConfigEnableSockpuppetDisallowedAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoConfigEnableSockpuppetDisallowedAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.unblock_user
"""
mutable struct OrgUnblockUserAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    blockedUser
    "\n  The username of the blocked user.\n  "
    blockedUserName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the blocked user.\n  "
    blockedUserResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the blocked user.\n  "
    blockedUserUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgUnblockUserAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, blockedUser = nothing, blockedUserName = nothing, blockedUserResourcePath = nothing, blockedUserUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgUnblockUserAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, blockedUser, blockedUserName, blockedUserResourcePath, blockedUserUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgUnblockUserAuditEntry, sym::Symbol)
    if sym === Symbol("blockedUser")
        getfield(t, Symbol("blockedUser"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgUnblockUserAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("blockedUser")
        setfield!(t, Symbol("blockedUser"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.config.enable_anonymous_git_access event.
"""
mutable struct RepoConfigEnableAnonymousGitAccessAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoConfigEnableAnonymousGitAccessAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoConfigEnableAnonymousGitAccessAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoConfigEnableAnonymousGitAccessAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoConfigEnableAnonymousGitAccessAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.remove_outside_collaborator event.
"""
mutable struct OrgRemoveOutsideCollaboratorAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The types of membership the outside collaborator has with the organization.\n  "
    membershipTypes::Union{Vector{OrgRemoveOutsideCollaboratorAuditEntryMembershipType.T}, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The reason for the outside collaborator being removed from the Organization.\n  "
    reason::Union{OrgRemoveOutsideCollaboratorAuditEntryReason.T, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgRemoveOutsideCollaboratorAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, membershipTypes = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, reason = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgRemoveOutsideCollaboratorAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, membershipTypes, operationType, organization, organizationName, organizationResourcePath, organizationUrl, reason, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgRemoveOutsideCollaboratorAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgRemoveOutsideCollaboratorAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.config.lock_anonymous_git_access event.
"""
mutable struct RepoConfigLockAnonymousGitAccessAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoConfigLockAnonymousGitAccessAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoConfigLockAnonymousGitAccessAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoConfigLockAnonymousGitAccessAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoConfigLockAnonymousGitAccessAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.disable_saml event.
"""
mutable struct OrgDisableSamlAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    "\n  The SAML provider's digest algorithm URL.\n  "
    digestMethodUrl::Union{URI, Missing, Nothing}
    id::String
    "\n  The SAML provider's issuer URL.\n  "
    issuerUrl::Union{URI, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The SAML provider's signature algorithm URL.\n  "
    signatureMethodUrl::Union{URI, Missing, Nothing}
    "\n  The SAML provider's single sign-on URL.\n  "
    singleSignOnUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgDisableSamlAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, digestMethodUrl = nothing, id, issuerUrl = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, signatureMethodUrl = nothing, singleSignOnUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgDisableSamlAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, digestMethodUrl, id, issuerUrl, operationType, organization, organizationName, organizationResourcePath, organizationUrl, signatureMethodUrl, singleSignOnUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgDisableSamlAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgDisableSamlAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a private_repository_forking.enable event.
"""
mutable struct PrivateRepositoryForkingEnableAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    "\n  The HTTP path for this enterprise.\n  "
    enterpriseResourcePath::Union{URI, Missing, Nothing}
    "\n  The slug of the enterprise.\n  "
    enterpriseSlug::Union{String, Missing, Nothing}
    "\n  The HTTP URL for this enterprise.\n  "
    enterpriseUrl::Union{URI, Missing, Nothing}
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function PrivateRepositoryForkingEnableAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, enterpriseResourcePath = nothing, enterpriseSlug = nothing, enterpriseUrl = nothing, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    PrivateRepositoryForkingEnableAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, enterpriseResourcePath, enterpriseSlug, enterpriseUrl, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::PrivateRepositoryForkingEnableAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PrivateRepositoryForkingEnableAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.enable_saml event.
"""
mutable struct OrgEnableSamlAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    "\n  The SAML provider's digest algorithm URL.\n  "
    digestMethodUrl::Union{URI, Missing, Nothing}
    id::String
    "\n  The SAML provider's issuer URL.\n  "
    issuerUrl::Union{URI, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The SAML provider's signature algorithm URL.\n  "
    signatureMethodUrl::Union{URI, Missing, Nothing}
    "\n  The SAML provider's single sign-on URL.\n  "
    singleSignOnUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgEnableSamlAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, digestMethodUrl = nothing, id, issuerUrl = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, signatureMethodUrl = nothing, singleSignOnUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgEnableSamlAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, digestMethodUrl, id, issuerUrl, operationType, organization, organizationName, organizationResourcePath, organizationUrl, signatureMethodUrl, singleSignOnUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgEnableSamlAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgEnableSamlAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a members_can_delete_repos.clear event.
"""
mutable struct MembersCanDeleteReposClearAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    "\n  The HTTP path for this enterprise.\n  "
    enterpriseResourcePath::Union{URI, Missing, Nothing}
    "\n  The slug of the enterprise.\n  "
    enterpriseSlug::Union{String, Missing, Nothing}
    "\n  The HTTP URL for this enterprise.\n  "
    enterpriseUrl::Union{URI, Missing, Nothing}
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function MembersCanDeleteReposClearAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, enterpriseResourcePath = nothing, enterpriseSlug = nothing, enterpriseUrl = nothing, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    MembersCanDeleteReposClearAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, enterpriseResourcePath, enterpriseSlug, enterpriseUrl, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::MembersCanDeleteReposClearAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::MembersCanDeleteReposClearAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a team.add_member event.
"""
mutable struct TeamAddMemberAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  Whether the team was mapped to an LDAP Group.\n  "
    isLdapMapped::Union{Bool, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The team associated with the action\n  "
    team::Union{Team, Missing, Nothing}
    "\n  The name of the team\n  "
    teamName::Union{String, Missing, Nothing}
    "\n  The HTTP path for this team\n  "
    teamResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for this team\n  "
    teamUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function TeamAddMemberAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, isLdapMapped = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, team = nothing, teamName = nothing, teamResourcePath = nothing, teamUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    TeamAddMemberAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, isLdapMapped, operationType, organization, organizationName, organizationResourcePath, organizationUrl, team, teamName, teamResourcePath, teamUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::TeamAddMemberAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamAddMemberAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.config.disable_anonymous_git_access event.
"""
mutable struct RepoConfigDisableAnonymousGitAccessAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function RepoConfigDisableAnonymousGitAccessAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    RepoConfigDisableAnonymousGitAccessAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::RepoConfigDisableAnonymousGitAccessAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoConfigDisableAnonymousGitAccessAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.remove_billing_manager event.
"""
mutable struct OrgRemoveBillingManagerAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The reason for the billing manager being removed.\n  "
    reason::Union{OrgRemoveBillingManagerAuditEntryReason.T, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgRemoveBillingManagerAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, reason = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgRemoveBillingManagerAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, reason, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgRemoveBillingManagerAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgRemoveBillingManagerAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.update_member event.
"""
mutable struct OrgUpdateMemberAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The new member permission level for the organization.\n  "
    permission::Union{OrgUpdateMemberAuditEntryPermission.T, Missing, Nothing}
    "\n  The former member permission level for the organization.\n  "
    permissionWas::Union{OrgUpdateMemberAuditEntryPermission.T, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgUpdateMemberAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, permission = nothing, permissionWas = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgUpdateMemberAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, permission, permissionWas, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgUpdateMemberAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgUpdateMemberAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a repo.add_member event.
"""
mutable struct RepoAddMemberAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    repository
    "\n  The name of the repository\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the repository\n  "
    repositoryResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the repository\n  "
    repositoryUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
    "\n  The visibility of the repository\n  "
    visibility::Union{RepoAddMemberAuditEntryVisibility.T, Missing, Nothing}
end
function RepoAddMemberAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, repository = nothing, repositoryName = nothing, repositoryResourcePath = nothing, repositoryUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing, visibility = nothing)
    RepoAddMemberAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, operationType, organization, organizationName, organizationResourcePath, organizationUrl, repository, repositoryName, repositoryResourcePath, repositoryUrl, user, userLogin, userResourcePath, userUrl, visibility)
end
function Base.getproperty(t::RepoAddMemberAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepoAddMemberAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a org.remove_member event.
"""
mutable struct OrgRemoveMemberAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  The types of membership the member has with the organization.\n  "
    membershipTypes::Union{Vector{OrgRemoveMemberAuditEntryMembershipType.T}, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The reason for the member being removed.\n  "
    reason::Union{OrgRemoveMemberAuditEntryReason.T, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function OrgRemoveMemberAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, membershipTypes = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, reason = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    OrgRemoveMemberAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, membershipTypes, operationType, organization, organizationName, organizationResourcePath, organizationUrl, reason, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::OrgRemoveMemberAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrgRemoveMemberAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Audit log entry for a team.change_parent_team event.
"""
mutable struct TeamChangeParentTeamAuditEntry <: OfficialGithubSchema
    "\n  The action name\n  "
    action::String
    "\n  The user who initiated the action\n  "
    actor::Union{AuditEntryActor, Missing, Nothing}
    "\n  The IP address of the actor\n  "
    actorIp::Union{String, Missing, Nothing}
    "\n  A readable representation of the actor's location\n  "
    actorLocation::Union{ActorLocation, Missing, Nothing}
    "\n  The username of the user who initiated the action\n  "
    actorLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the actor.\n  "
    actorResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the actor.\n  "
    actorUrl::Union{URI, Missing, Nothing}
    "\n  The time the action was initiated\n  "
    createdAt::PreciseDateTime
    id::String
    "\n  Whether the team was mapped to an LDAP Group.\n  "
    isLdapMapped::Union{Bool, Missing, Nothing}
    "\n  The corresponding operation type for the action\n  "
    operationType::Union{OperationType.T, Missing, Nothing}
    organization
    "\n  The name of the Organization.\n  "
    organizationName::Union{String, Missing, Nothing}
    "\n  The HTTP path for the organization\n  "
    organizationResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the organization\n  "
    organizationUrl::Union{URI, Missing, Nothing}
    "\n  The new parent team.\n  "
    parentTeam::Union{Team, Missing, Nothing}
    "\n  The name of the new parent team\n  "
    parentTeamName::Union{String, Missing, Nothing}
    "\n  The name of the former parent team\n  "
    parentTeamNameWas::Union{String, Missing, Nothing}
    "\n  The HTTP path for the parent team\n  "
    parentTeamResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the parent team\n  "
    parentTeamUrl::Union{URI, Missing, Nothing}
    "\n  The former parent team.\n  "
    parentTeamWas::Union{Team, Missing, Nothing}
    "\n  The HTTP path for the previous parent team\n  "
    parentTeamWasResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the previous parent team\n  "
    parentTeamWasUrl::Union{URI, Missing, Nothing}
    "\n  The team associated with the action\n  "
    team::Union{Team, Missing, Nothing}
    "\n  The name of the team\n  "
    teamName::Union{String, Missing, Nothing}
    "\n  The HTTP path for this team\n  "
    teamResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for this team\n  "
    teamUrl::Union{URI, Missing, Nothing}
    user
    "\n  For actions involving two users, the actor is the initiator and the user is the affected user.\n  "
    userLogin::Union{String, Missing, Nothing}
    "\n  The HTTP path for the user.\n  "
    userResourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the user.\n  "
    userUrl::Union{URI, Missing, Nothing}
end
function TeamChangeParentTeamAuditEntry(; action, actor = nothing, actorIp = nothing, actorLocation = nothing, actorLogin = nothing, actorResourcePath = nothing, actorUrl = nothing, createdAt, id, isLdapMapped = nothing, operationType = nothing, organization = nothing, organizationName = nothing, organizationResourcePath = nothing, organizationUrl = nothing, parentTeam = nothing, parentTeamName = nothing, parentTeamNameWas = nothing, parentTeamResourcePath = nothing, parentTeamUrl = nothing, parentTeamWas = nothing, parentTeamWasResourcePath = nothing, parentTeamWasUrl = nothing, team = nothing, teamName = nothing, teamResourcePath = nothing, teamUrl = nothing, user = nothing, userLogin = nothing, userResourcePath = nothing, userUrl = nothing)
    TeamChangeParentTeamAuditEntry(action, actor, actorIp, actorLocation, actorLogin, actorResourcePath, actorUrl, createdAt, id, isLdapMapped, operationType, organization, organizationName, organizationResourcePath, organizationUrl, parentTeam, parentTeamName, parentTeamNameWas, parentTeamResourcePath, parentTeamUrl, parentTeamWas, parentTeamWasResourcePath, parentTeamWasUrl, team, teamName, teamResourcePath, teamUrl, user, userLogin, userResourcePath, userUrl)
end
function Base.getproperty(t::TeamChangeParentTeamAuditEntry, sym::Symbol)
    if sym === Symbol("organization")
        getfield(t, Symbol("organization"))::Union{Organization, Missing, Nothing}
    elseif sym === Symbol("user")
        getfield(t, Symbol("user"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::TeamChangeParentTeamAuditEntry, sym::Symbol, val::Any)
    if sym === Symbol("organization")
        setfield!(t, Symbol("organization"), val::Union{Organization, Missing, Nothing})
    elseif sym === Symbol("user")
        setfield!(t, Symbol("user"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "An audit entry in an organization audit log." const OrganizationAuditEntry = Union{MembersCanDeleteReposClearAuditEntry, MembersCanDeleteReposDisableAuditEntry, MembersCanDeleteReposEnableAuditEntry, OauthApplicationCreateAuditEntry, OrgAddBillingManagerAuditEntry, OrgAddMemberAuditEntry, OrgBlockUserAuditEntry, OrgConfigDisableCollaboratorsOnlyAuditEntry, OrgConfigEnableCollaboratorsOnlyAuditEntry, OrgCreateAuditEntry, OrgDisableOauthAppRestrictionsAuditEntry, OrgDisableSamlAuditEntry, OrgDisableTwoFactorRequirementAuditEntry, OrgEnableOauthAppRestrictionsAuditEntry, OrgEnableSamlAuditEntry, OrgEnableTwoFactorRequirementAuditEntry, OrgInviteMemberAuditEntry, OrgInviteToBusinessAuditEntry, OrgOauthAppAccessApprovedAuditEntry, OrgOauthAppAccessDeniedAuditEntry, OrgOauthAppAccessRequestedAuditEntry, OrgRemoveBillingManagerAuditEntry, OrgRemoveMemberAuditEntry, OrgRemoveOutsideCollaboratorAuditEntry, OrgRestoreMemberAuditEntry, OrgUnblockUserAuditEntry, OrgUpdateDefaultRepositoryPermissionAuditEntry, OrgUpdateMemberAuditEntry, OrgUpdateMemberRepositoryCreationPermissionAuditEntry, OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, PrivateRepositoryForkingDisableAuditEntry, PrivateRepositoryForkingEnableAuditEntry, RepoAccessAuditEntry, RepoAddMemberAuditEntry, RepoAddTopicAuditEntry, RepoArchivedAuditEntry, RepoChangeMergeSettingAuditEntry, RepoConfigDisableAnonymousGitAccessAuditEntry, RepoConfigDisableCollaboratorsOnlyAuditEntry, RepoConfigDisableContributorsOnlyAuditEntry, RepoConfigDisableSockpuppetDisallowedAuditEntry, RepoConfigEnableAnonymousGitAccessAuditEntry, RepoConfigEnableCollaboratorsOnlyAuditEntry, RepoConfigEnableContributorsOnlyAuditEntry, RepoConfigEnableSockpuppetDisallowedAuditEntry, RepoConfigLockAnonymousGitAccessAuditEntry, RepoConfigUnlockAnonymousGitAccessAuditEntry, RepoCreateAuditEntry, RepoDestroyAuditEntry, RepoRemoveMemberAuditEntry, RepoRemoveTopicAuditEntry, RepositoryVisibilityChangeDisableAuditEntry, RepositoryVisibilityChangeEnableAuditEntry, TeamAddMemberAuditEntry, TeamAddRepositoryAuditEntry, TeamChangeParentTeamAuditEntry, TeamRemoveMemberAuditEntry, TeamRemoveRepositoryAuditEntry}

"""
An edge in a connection.
"""
mutable struct OrganizationAuditEntryEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{OrganizationAuditEntry, Missing, Nothing}
end
function OrganizationAuditEntryEdge(; cursor, node = nothing)
    OrganizationAuditEntryEdge(cursor, node)
end

"""
The connection type for OrganizationAuditEntry.
"""
mutable struct OrganizationAuditEntryConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{OrganizationAuditEntryEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{OrganizationAuditEntry, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function OrganizationAuditEntryConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    OrganizationAuditEntryConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a user within an organization.
"""
mutable struct OrganizationMemberEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.\n  "
    hasTwoFactorEnabled::Union{Bool, Missing, Nothing}
    node
    "\n  The role this user has in the organization.\n  "
    role::Union{OrganizationMemberRole.T, Missing, Nothing}
end
function OrganizationMemberEdge(; cursor, hasTwoFactorEnabled = nothing, node = nothing, role = nothing)
    OrganizationMemberEdge(cursor, hasTwoFactorEnabled, node, role)
end
function Base.getproperty(t::OrganizationMemberEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrganizationMemberEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for User.
"""
mutable struct OrganizationMemberConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{OrganizationMemberEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function OrganizationMemberConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    OrganizationMemberConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::OrganizationMemberConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrganizationMemberConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct DiscussionEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
end
function DiscussionEdge(; cursor, node = nothing)
    DiscussionEdge(cursor, node)
end
function Base.getproperty(t::DiscussionEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{Discussion, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DiscussionEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{Discussion, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for Discussion.
"""
mutable struct DiscussionConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DiscussionEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DiscussionConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DiscussionConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::DiscussionConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{Discussion, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DiscussionConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{Discussion, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a user or organization who is sponsoring someone in GitHub Sponsors.
"""
mutable struct SponsorEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Sponsor, Missing, Nothing}
end
function SponsorEdge(; cursor, node = nothing)
    SponsorEdge(cursor, node)
end

"""
The connection type for Sponsor.
"""
mutable struct SponsorConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{SponsorEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Sponsor, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function SponsorConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    SponsorConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a object that contains package version activity statistics such as downloads.
"""
mutable struct PackageVersionStatistics <: OfficialGithubSchema
    "\n  Number of times the package was downloaded since it was created.\n  "
    downloadsTotalCount::Int
end
function PackageVersionStatistics(; downloadsTotalCount)
    PackageVersionStatistics(downloadsTotalCount)
end

"""
A file in a package version.
"""
mutable struct PackageFile <: OfficialGithubSchema
    id::String
    "\n  MD5 hash of the file.\n  "
    md5::Union{String, Missing, Nothing}
    "\n  Name of the file.\n  "
    name::String
    packageVersion
    "\n  SHA1 hash of the file.\n  "
    sha1::Union{String, Missing, Nothing}
    "\n  SHA256 hash of the file.\n  "
    sha256::Union{String, Missing, Nothing}
    "\n  Size of the file in bytes.\n  "
    size::Union{Int, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  URL to download the asset.\n  "
    url::Union{URI, Missing, Nothing}
end
function PackageFile(; id, md5 = nothing, name, packageVersion = nothing, sha1 = nothing, sha256 = nothing, size = nothing, updatedAt, url = nothing)
    PackageFile(id, md5, name, packageVersion, sha1, sha256, size, updatedAt, url)
end
function Base.getproperty(t::PackageFile, sym::Symbol)
    if sym === Symbol("packageVersion")
        getfield(t, Symbol("packageVersion"))::Union{PackageVersion, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PackageFile, sym::Symbol, val::Any)
    if sym === Symbol("packageVersion")
        setfield!(t, Symbol("packageVersion"), val::Union{PackageVersion, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct PackageFileEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PackageFile, Missing, Nothing}
end
function PackageFileEdge(; cursor, node = nothing)
    PackageFileEdge(cursor, node)
end

"""
The connection type for PackageFile.
"""
mutable struct PackageFileConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PackageFileEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PackageFile, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PackageFileConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PackageFileConnection(edges, nodes, pageInfo, totalCount)
end

"""
A release asset contains the content for a release asset.
"""
mutable struct ReleaseAsset <: OfficialGithubSchema
    "\n  The asset's content-type\n  "
    contentType::String
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The number of times this asset was downloaded\n  "
    downloadCount::Int
    "\n  Identifies the URL where you can download the release asset via the browser.\n  "
    downloadUrl::URI
    id::String
    "\n  Identifies the title of the release asset.\n  "
    name::String
    release
    "\n  The size (in bytes) of the asset\n  "
    size::Int
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    uploadedBy
    "\n  Identifies the URL of the release asset.\n  "
    url::URI
end
function ReleaseAsset(; contentType, createdAt, downloadCount, downloadUrl, id, name, release = nothing, size, updatedAt, uploadedBy, url)
    ReleaseAsset(contentType, createdAt, downloadCount, downloadUrl, id, name, release, size, updatedAt, uploadedBy, url)
end
function Base.getproperty(t::ReleaseAsset, sym::Symbol)
    if sym === Symbol("release")
        getfield(t, Symbol("release"))::Union{Release, Missing, Nothing}
    elseif sym === Symbol("uploadedBy")
        getfield(t, Symbol("uploadedBy"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ReleaseAsset, sym::Symbol, val::Any)
    if sym === Symbol("release")
        setfield!(t, Symbol("release"), val::Union{Release, Missing, Nothing})
    elseif sym === Symbol("uploadedBy")
        setfield!(t, Symbol("uploadedBy"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct ReleaseAssetEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ReleaseAsset, Missing, Nothing}
end
function ReleaseAssetEdge(; cursor, node = nothing)
    ReleaseAssetEdge(cursor, node)
end

"""
The connection type for ReleaseAsset.
"""
mutable struct ReleaseAssetConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ReleaseAssetEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ReleaseAsset, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ReleaseAssetConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ReleaseAssetConnection(edges, nodes, pageInfo, totalCount)
end

"""
A release contains the content for a release.
"""
mutable struct Release <: OfficialGithubSchema
    author
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The description of the release.\n  "
    description::Union{String, Missing, Nothing}
    "\n  The description of this release rendered to HTML.\n  "
    descriptionHTML::Union{HTML, Missing, Nothing}
    id::String
    "\n  Whether or not the release is a draft\n  "
    isDraft::Bool
    "\n  Whether or not the release is the latest releast\n  "
    isLatest::Bool
    "\n  Whether or not the release is a prerelease\n  "
    isPrerelease::Bool
    "\n  A list of users mentioned in the release description\n  "
    mentions::Union{UserConnection, Missing, Nothing}
    "\n  The title of the release.\n  "
    name::Union{String, Missing, Nothing}
    "\n  Identifies the date and time when the release was created.\n  "
    publishedAt::Union{DateTime, Missing, Nothing}
    reactionGroups
    "\n  A list of Reactions left on the Issue.\n  "
    reactions::ReactionConnection
    "\n  List of releases assets which are dependent on this release.\n  "
    releaseAssets::ReleaseAssetConnection
    repository
    "\n  The HTTP path for this issue\n  "
    resourcePath::URI
    "\n  A description of the release, rendered to HTML without any links in it.\n  "
    shortDescriptionHTML::Union{HTML, Missing, Nothing}
    "\n  The Git tag the release points to\n  "
    tag::Union{Ref, Missing, Nothing}
    "\n  The tag commit for this release.\n  "
    tagCommit::Union{Commit, Missing, Nothing}
    "\n  The name of the release's Git tag\n  "
    tagName::String
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this issue\n  "
    url::URI
    "\n  Can user react to this subject\n  "
    viewerCanReact::Bool
end
function Release(; author = nothing, createdAt, databaseId = nothing, description = nothing, descriptionHTML = nothing, id, isDraft, isLatest, isPrerelease, mentions = nothing, name = nothing, publishedAt = nothing, reactionGroups = nothing, reactions, releaseAssets, repository, resourcePath, shortDescriptionHTML = nothing, tag = nothing, tagCommit = nothing, tagName, updatedAt, url, viewerCanReact)
    Release(author, createdAt, databaseId, description, descriptionHTML, id, isDraft, isLatest, isPrerelease, mentions, name, publishedAt, reactionGroups, reactions, releaseAssets, repository, resourcePath, shortDescriptionHTML, tag, tagCommit, tagName, updatedAt, url, viewerCanReact)
end
function Base.getproperty(t::Release, sym::Symbol)
    if sym === Symbol("author")
        getfield(t, Symbol("author"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("reactionGroups")
        getfield(t, Symbol("reactionGroups"))::Union{Vector{ReactionGroup}, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Release, sym::Symbol, val::Any)
    if sym === Symbol("author")
        setfield!(t, Symbol("author"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("reactionGroups")
        setfield!(t, Symbol("reactionGroups"), val::Union{Vector{ReactionGroup}, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
Information about a specific package version.
"""
mutable struct PackageVersion <: OfficialGithubSchema
    "\n  List of files associated with this package version\n  "
    files::PackageFileConnection
    id::String
    package
    "\n  The platform this version was built for.\n  "
    platform::Union{String, Missing, Nothing}
    "\n  Whether or not this version is a pre-release.\n  "
    preRelease::Bool
    "\n  The README of this package version.\n  "
    readme::Union{String, Missing, Nothing}
    "\n  The release associated with this package version.\n  "
    release::Union{Release, Missing, Nothing}
    "\n  Statistics about package activity.\n  "
    statistics::Union{PackageVersionStatistics, Missing, Nothing}
    "\n  The package version summary.\n  "
    summary::Union{String, Missing, Nothing}
    "\n  The version string.\n  "
    version::String
end
function PackageVersion(; files, id, package = nothing, platform = nothing, preRelease, readme = nothing, release = nothing, statistics = nothing, summary = nothing, version)
    PackageVersion(files, id, package, platform, preRelease, readme, release, statistics, summary, version)
end
function Base.getproperty(t::PackageVersion, sym::Symbol)
    if sym === Symbol("package")
        getfield(t, Symbol("package"))::Union{Package, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PackageVersion, sym::Symbol, val::Any)
    if sym === Symbol("package")
        setfield!(t, Symbol("package"), val::Union{Package, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a object that contains package activity statistics such as downloads.
"""
mutable struct PackageStatistics <: OfficialGithubSchema
    "\n  Number of times the package was downloaded since it was created.\n  "
    downloadsTotalCount::Int
end
function PackageStatistics(; downloadsTotalCount)
    PackageStatistics(downloadsTotalCount)
end

"""
An edge in a connection.
"""
mutable struct PackageVersionEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PackageVersion, Missing, Nothing}
end
function PackageVersionEdge(; cursor, node = nothing)
    PackageVersionEdge(cursor, node)
end

"""
The connection type for PackageVersion.
"""
mutable struct PackageVersionConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PackageVersionEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PackageVersion, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PackageVersionConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PackageVersionConnection(edges, nodes, pageInfo, totalCount)
end

"""
Information for an uploaded package.
"""
mutable struct Package <: OfficialGithubSchema
    id::String
    "\n  Find the latest version for the package.\n  "
    latestVersion::Union{PackageVersion, Missing, Nothing}
    "\n  Identifies the name of the package.\n  "
    name::String
    "\n  Identifies the type of the package.\n  "
    packageType::PackageType.T
    repository
    "\n  Statistics about package activity.\n  "
    statistics::Union{PackageStatistics, Missing, Nothing}
    "\n  Find package version by version string.\n  "
    version::Union{PackageVersion, Missing, Nothing}
    "\n  list of versions for this package\n  "
    versions::PackageVersionConnection
end
function Package(; id, latestVersion = nothing, name, packageType, repository = nothing, statistics = nothing, version = nothing, versions)
    Package(id, latestVersion, name, packageType, repository, statistics, version, versions)
end
function Base.getproperty(t::Package, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Package, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct PackageEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Package, Missing, Nothing}
end
function PackageEdge(; cursor, node = nothing)
    PackageEdge(cursor, node)
end

"""
The connection type for Package.
"""
mutable struct PackageConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PackageEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Package, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PackageConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PackageConnection(edges, nodes, pageInfo, totalCount)
end

"""
An update sent to sponsors of a user or organization on GitHub Sponsors.
"""
mutable struct SponsorshipNewsletter <: OfficialGithubSchema
    "\n  The contents of the newsletter, the message the sponsorable wanted to give.\n  "
    body::String
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  Indicates if the newsletter has been made available to sponsors.\n  "
    isPublished::Bool
    "\n  The user or organization this newsletter is from.\n  "
    sponsorable::Sponsorable
    "\n  The subject of the newsletter, what it's about.\n  "
    subject::String
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function SponsorshipNewsletter(; body, createdAt, id, isPublished, sponsorable, subject, updatedAt)
    SponsorshipNewsletter(body, createdAt, id, isPublished, sponsorable, subject, updatedAt)
end

"""
An edge in a connection.
"""
mutable struct SponsorshipNewsletterEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{SponsorshipNewsletter, Missing, Nothing}
end
function SponsorshipNewsletterEdge(; cursor, node = nothing)
    SponsorshipNewsletterEdge(cursor, node)
end

"""
The connection type for SponsorshipNewsletter.
"""
mutable struct SponsorshipNewsletterConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{SponsorshipNewsletterEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{SponsorshipNewsletter, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function SponsorshipNewsletterConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    SponsorshipNewsletterConnection(edges, nodes, pageInfo, totalCount)
end

"""
An enterprise owner in the context of an organization that is part of the enterprise.
"""
mutable struct OrganizationEnterpriseOwnerEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
    "\n  The role of the owner with respect to the organization.\n  "
    organizationRole::RoleInOrganization.T
end
function OrganizationEnterpriseOwnerEdge(; cursor, node = nothing, organizationRole)
    OrganizationEnterpriseOwnerEdge(cursor, node, organizationRole)
end
function Base.getproperty(t::OrganizationEnterpriseOwnerEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{User, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrganizationEnterpriseOwnerEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{User, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for User.
"""
mutable struct OrganizationEnterpriseOwnerConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{OrganizationEnterpriseOwnerEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function OrganizationEnterpriseOwnerConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    OrganizationEnterpriseOwnerConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::OrganizationEnterpriseOwnerConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::OrganizationEnterpriseOwnerConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An event related to sponsorship activity.
"""
mutable struct SponsorsActivity <: OfficialGithubSchema
    "\n  What action this activity indicates took place.\n  "
    action::SponsorsActivityAction.T
    id::String
    "\n  The tier that the sponsorship used to use, for tier change events.\n  "
    previousSponsorsTier::Union{SponsorsTier, Missing, Nothing}
    "\n  The user or organization who triggered this activity and was/is sponsoring the sponsorable.\n  "
    sponsor::Union{Sponsor, Missing, Nothing}
    "\n  The user or organization that is being sponsored, the maintainer.\n  "
    sponsorable::Sponsorable
    "\n  The associated sponsorship tier.\n  "
    sponsorsTier::Union{SponsorsTier, Missing, Nothing}
    "\n  The timestamp of this event.\n  "
    timestamp::Union{DateTime, Missing, Nothing}
end
function SponsorsActivity(; action, id, previousSponsorsTier = nothing, sponsor = nothing, sponsorable, sponsorsTier = nothing, timestamp = nothing)
    SponsorsActivity(action, id, previousSponsorsTier, sponsor, sponsorable, sponsorsTier, timestamp)
end

"""
An edge in a connection.
"""
mutable struct SponsorsActivityEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{SponsorsActivity, Missing, Nothing}
end
function SponsorsActivityEdge(; cursor, node = nothing)
    SponsorsActivityEdge(cursor, node)
end

"""
The connection type for SponsorsActivity.
"""
mutable struct SponsorsActivityConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{SponsorsActivityEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{SponsorsActivity, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function SponsorsActivityConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    SponsorsActivityConnection(edges, nodes, pageInfo, totalCount)
end

"""
An account on GitHub, with one or more owners, that has repositories, members and teams.
"""
mutable struct Organization <: OfficialGithubSchema
    "\n  Determine if this repository owner has any items that can be pinned to their profile.\n  "
    anyPinnableItems::Bool
    "\n  Audit log entries of the organization\n  "
    auditLog::OrganizationAuditEntryConnection
    "\n  A URL pointing to the organization's public avatar.\n  "
    avatarUrl::URI
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The organization's public profile description.\n  "
    description::Union{String, Missing, Nothing}
    "\n  The organization's public profile description rendered to HTML.\n  "
    descriptionHTML::Union{String, Missing, Nothing}
    "\n  A list of domains owned by the organization.\n  "
    domains::Union{VerifiableDomainConnection, Missing, Nothing}
    "\n  The organization's public email.\n  "
    email::Union{String, Missing, Nothing}
    "\n  A list of owners of the organization's enterprise account.\n  "
    enterpriseOwners::OrganizationEnterpriseOwnerConnection
    "\n  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).\n  "
    estimatedNextSponsorsPayoutInCents::Int
    "\n  True if this user/organization has a GitHub Sponsors listing.\n  "
    hasSponsorsListing::Bool
    id::String
    "\n  The interaction ability settings for this organization.\n  "
    interactionAbility::Union{RepositoryInteractionAbility, Missing, Nothing}
    "\n  The setting value for whether the organization has an IP allow list enabled.\n  "
    ipAllowListEnabledSetting::IpAllowListEnabledSettingValue.T
    "\n  The IP addresses that are allowed to access resources owned by the organization.\n  "
    ipAllowListEntries::IpAllowListEntryConnection
    "\n  The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.\n  "
    ipAllowListForInstalledAppsEnabledSetting::IpAllowListForInstalledAppsEnabledSettingValue.T
    "\n  Check if the given account is sponsoring this user/organization.\n  "
    isSponsoredBy::Bool
    "\n  True if the viewer is sponsored by this user/organization.\n  "
    isSponsoringViewer::Bool
    "\n  Whether the organization has verified its profile email and website.\n  "
    isVerified::Bool
    "\n  Showcases a selection of repositories and gists that the profile owner has\n  either curated or that have been selected automatically based on popularity.\n  "
    itemShowcase::ProfileItemShowcase
    "\n  The organization's public profile location.\n  "
    location::Union{String, Missing, Nothing}
    "\n  The organization's login name.\n  "
    login::String
    "\n  Get the status messages members of this entity have set that are either public or visible only to the organization.\n  "
    memberStatuses::UserStatusConnection
    "\n  Members can fork private repositories in this organization\n  "
    membersCanForkPrivateRepositories::Bool
    "\n  A list of users who are members of this organization.\n  "
    membersWithRole::OrganizationMemberConnection
    "\n  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).\n  "
    monthlyEstimatedSponsorsIncomeInCents::Int
    "\n  The organization's public profile name.\n  "
    name::Union{String, Missing, Nothing}
    "\n  The HTTP path creating a new team\n  "
    newTeamResourcePath::URI
    "\n  The HTTP URL creating a new team\n  "
    newTeamUrl::URI
    "\n  Indicates if email notification delivery for this organization is restricted to verified or approved domains.\n  "
    notificationDeliveryRestrictionEnabledSetting::NotificationRestrictionSettingValue.T
    "\n  The billing email for the organization.\n  "
    organizationBillingEmail::Union{String, Missing, Nothing}
    "\n  A list of packages under the owner.\n  "
    packages::PackageConnection
    "\n  A list of users who have been invited to join this organization.\n  "
    pendingMembers::UserConnection
    "\n  A list of repositories and gists this profile owner can pin to their profile.\n  "
    pinnableItems::PinnableItemConnection
    "\n  A list of repositories and gists this profile owner has pinned to their profile\n  "
    pinnedItems::PinnableItemConnection
    "\n  Returns how many more items this profile owner can pin to their profile.\n  "
    pinnedItemsRemaining::Int
    "\n  Find project by number.\n  "
    project::Union{Project, Missing, Nothing}
    "\n  Find a project by project (beta) number.\n  "
    projectNext::Union{ProjectNext, Missing, Nothing}
    projectV2
    "\n  A list of projects under the owner.\n  "
    projects::ProjectConnection
    "\n  A list of projects (beta) under the owner.\n  "
    projectsNext::ProjectNextConnection
    "\n  The HTTP path listing organization's projects\n  "
    projectsResourcePath::URI
    "\n  The HTTP URL listing organization's projects\n  "
    projectsUrl::URI
    "\n  A list of projects under the owner.\n  "
    projectsV2::ProjectV2Connection
    "\n  Recent projects that this user has modified in the context of the owner.\n  "
    recentProjects::ProjectV2Connection
    repositories
    repository
    "\n  Discussion comments this user has authored.\n  "
    repositoryDiscussionComments::DiscussionCommentConnection
    "\n  Discussions this user has started.\n  "
    repositoryDiscussions::DiscussionConnection
    "\n  A list of all repository migrations for this organization.\n  "
    repositoryMigrations::RepositoryMigrationConnection
    "\n  When true the organization requires all members, billing managers, and outside\n  collaborators to enable two-factor authentication.\n  "
    requiresTwoFactorAuthentication::Union{Bool, Missing, Nothing}
    "\n  The HTTP path for this organization.\n  "
    resourcePath::URI
    "\n  The Organization's SAML identity providers\n  "
    samlIdentityProvider::Union{OrganizationIdentityProvider, Missing, Nothing}
    "\n  List of users and organizations this entity is sponsoring.\n  "
    sponsoring::SponsorConnection
    "\n  List of sponsors for this user or organization.\n  "
    sponsors::SponsorConnection
    "\n  Events involving this sponsorable, such as new sponsorships.\n  "
    sponsorsActivities::SponsorsActivityConnection
    "\n  The GitHub Sponsors listing for this user or organization.\n  "
    sponsorsListing::Union{SponsorsListing, Missing, Nothing}
    "\n  The sponsorship from the viewer to this user/organization; that is, the\n  sponsorship where you're the sponsor. Only returns a sponsorship if it is active.\n  "
    sponsorshipForViewerAsSponsor::Union{Sponsorship, Missing, Nothing}
    "\n  The sponsorship from this user/organization to the viewer; that is, the\n  sponsorship you're receiving. Only returns a sponsorship if it is active.\n  "
    sponsorshipForViewerAsSponsorable::Union{Sponsorship, Missing, Nothing}
    "\n  List of sponsorship updates sent from this sponsorable to sponsors.\n  "
    sponsorshipNewsletters::SponsorshipNewsletterConnection
    "\n  This object's sponsorships as the maintainer.\n  "
    sponsorshipsAsMaintainer::SponsorshipConnection
    "\n  This object's sponsorships as the sponsor.\n  "
    sponsorshipsAsSponsor::SponsorshipConnection
    "\n  Find an organization's team by its slug.\n  "
    team::Union{Team, Missing, Nothing}
    "\n  A list of teams in this organization.\n  "
    teams::TeamConnection
    "\n  The HTTP path listing organization's teams\n  "
    teamsResourcePath::URI
    "\n  The HTTP URL listing organization's teams\n  "
    teamsUrl::URI
    "\n  The organization's Twitter username.\n  "
    twitterUsername::Union{String, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this organization.\n  "
    url::URI
    "\n  Organization is adminable by the viewer.\n  "
    viewerCanAdminister::Bool
    "\n  Can the viewer pin repositories and gists to the profile?\n  "
    viewerCanChangePinnedItems::Bool
    "\n  Can the current viewer create new projects on this owner.\n  "
    viewerCanCreateProjects::Bool
    "\n  Viewer can create repositories on this organization\n  "
    viewerCanCreateRepositories::Bool
    "\n  Viewer can create teams on this organization.\n  "
    viewerCanCreateTeams::Bool
    "\n  Whether or not the viewer is able to sponsor this user/organization.\n  "
    viewerCanSponsor::Bool
    "\n  Viewer is an active member of this organization.\n  "
    viewerIsAMember::Bool
    "\n  Whether or not this Organization is followed by the viewer.\n  "
    viewerIsFollowing::Bool
    "\n  True if the viewer is sponsoring this user/organization.\n  "
    viewerIsSponsoring::Bool
    "\n  Whether contributors are required to sign off on web-based commits for repositories in this organization.\n  "
    webCommitSignoffRequired::Bool
    "\n  The organization's public profile URL.\n  "
    websiteUrl::Union{URI, Missing, Nothing}
end
function Organization(; anyPinnableItems, auditLog, avatarUrl, createdAt, databaseId = nothing, description = nothing, descriptionHTML = nothing, domains = nothing, email = nothing, enterpriseOwners, estimatedNextSponsorsPayoutInCents, hasSponsorsListing, id, interactionAbility = nothing, ipAllowListEnabledSetting, ipAllowListEntries, ipAllowListForInstalledAppsEnabledSetting, isSponsoredBy, isSponsoringViewer, isVerified, itemShowcase, location = nothing, login, memberStatuses, membersCanForkPrivateRepositories, membersWithRole, monthlyEstimatedSponsorsIncomeInCents, name = nothing, newTeamResourcePath, newTeamUrl, notificationDeliveryRestrictionEnabledSetting, organizationBillingEmail = nothing, packages, pendingMembers, pinnableItems, pinnedItems, pinnedItemsRemaining, project = nothing, projectNext = nothing, projectV2 = nothing, projects, projectsNext, projectsResourcePath, projectsUrl, projectsV2, recentProjects, repositories, repository = nothing, repositoryDiscussionComments, repositoryDiscussions, repositoryMigrations, requiresTwoFactorAuthentication = nothing, resourcePath, samlIdentityProvider = nothing, sponsoring, sponsors, sponsorsActivities, sponsorsListing = nothing, sponsorshipForViewerAsSponsor = nothing, sponsorshipForViewerAsSponsorable = nothing, sponsorshipNewsletters, sponsorshipsAsMaintainer, sponsorshipsAsSponsor, team = nothing, teams, teamsResourcePath, teamsUrl, twitterUsername = nothing, updatedAt, url, viewerCanAdminister, viewerCanChangePinnedItems, viewerCanCreateProjects, viewerCanCreateRepositories, viewerCanCreateTeams, viewerCanSponsor, viewerIsAMember, viewerIsFollowing, viewerIsSponsoring, webCommitSignoffRequired, websiteUrl = nothing)
    Organization(anyPinnableItems, auditLog, avatarUrl, createdAt, databaseId, description, descriptionHTML, domains, email, enterpriseOwners, estimatedNextSponsorsPayoutInCents, hasSponsorsListing, id, interactionAbility, ipAllowListEnabledSetting, ipAllowListEntries, ipAllowListForInstalledAppsEnabledSetting, isSponsoredBy, isSponsoringViewer, isVerified, itemShowcase, location, login, memberStatuses, membersCanForkPrivateRepositories, membersWithRole, monthlyEstimatedSponsorsIncomeInCents, name, newTeamResourcePath, newTeamUrl, notificationDeliveryRestrictionEnabledSetting, organizationBillingEmail, packages, pendingMembers, pinnableItems, pinnedItems, pinnedItemsRemaining, project, projectNext, projectV2, projects, projectsNext, projectsResourcePath, projectsUrl, projectsV2, recentProjects, repositories, repository, repositoryDiscussionComments, repositoryDiscussions, repositoryMigrations, requiresTwoFactorAuthentication, resourcePath, samlIdentityProvider, sponsoring, sponsors, sponsorsActivities, sponsorsListing, sponsorshipForViewerAsSponsor, sponsorshipForViewerAsSponsorable, sponsorshipNewsletters, sponsorshipsAsMaintainer, sponsorshipsAsSponsor, team, teams, teamsResourcePath, teamsUrl, twitterUsername, updatedAt, url, viewerCanAdminister, viewerCanChangePinnedItems, viewerCanCreateProjects, viewerCanCreateRepositories, viewerCanCreateTeams, viewerCanSponsor, viewerIsAMember, viewerIsFollowing, viewerIsSponsoring, webCommitSignoffRequired, websiteUrl)
end
function Base.getproperty(t::Organization, sym::Symbol)
    if sym === Symbol("projectV2")
        getfield(t, Symbol("projectV2"))::Union{ProjectV2, Missing, Nothing}
    elseif sym === Symbol("repositories")
        getfield(t, Symbol("repositories"))::RepositoryConnection
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Organization, sym::Symbol, val::Any)
    if sym === Symbol("projectV2")
        setfield!(t, Symbol("projectV2"), val::Union{ProjectV2, Missing, Nothing})
    elseif sym === Symbol("repositories")
        setfield!(t, Symbol("repositories"), val::RepositoryConnection)
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Types that can be assigned to reactions." const Reactor = Union{Bot, Mannequin, Organization, User}

"""
Represents an author of a reaction.
"""
mutable struct ReactorEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The author of the reaction.\n  "
    node::Reactor
    "\n  The moment when the user made the reaction.\n  "
    reactedAt::DateTime
end
function ReactorEdge(; cursor, node, reactedAt)
    ReactorEdge(cursor, node, reactedAt)
end

"""
The connection type for Reactor.
"""
mutable struct ReactorConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ReactorEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Reactor, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ReactorConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ReactorConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a user that's made a reaction.
"""
mutable struct ReactingUserEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
    "\n  The moment when the user made the reaction.\n  "
    reactedAt::DateTime
end
function ReactingUserEdge(; cursor, node, reactedAt)
    ReactingUserEdge(cursor, node, reactedAt)
end
function Base.getproperty(t::ReactingUserEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ReactingUserEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for User.
"""
mutable struct ReactingUserConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ReactingUserEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ReactingUserConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ReactingUserConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::ReactingUserConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ReactingUserConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A group of emoji reactions to a particular piece of content.
"""
mutable struct ReactionGroup <: OfficialGithubSchema
    "\n  Identifies the emoji reaction.\n  "
    content::ReactionContent.T
    "\n  Identifies when the reaction was created.\n  "
    createdAt::Union{DateTime, Missing, Nothing}
    "\n  Reactors to the reaction subject with the emotion represented by this reaction group.\n  "
    reactors::ReactorConnection
    "\n  The subject that was reacted to.\n  "
    subject::Reactable
    "\n  Users who have reacted to the reaction subject with the emotion represented by this reaction group\n  "
    users::ReactingUserConnection
    "\n  Whether or not the authenticated user has left a reaction on the subject.\n  "
    viewerHasReacted::Bool
end
function ReactionGroup(; content, createdAt = nothing, reactors, subject, users, viewerHasReacted)
    ReactionGroup(content, createdAt, reactors, subject, users, viewerHasReacted)
end

"""
A comment on a discussion.
"""
mutable struct DiscussionComment <: OfficialGithubSchema
    "\n  The actor who authored the comment.\n  "
    author::Union{Actor, Missing, Nothing}
    "\n  Author's association with the subject of the comment.\n  "
    authorAssociation::CommentAuthorAssociation.T
    "\n  The body as Markdown.\n  "
    body::String
    "\n  The body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  The body rendered to text.\n  "
    bodyText::String
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Check if this comment was created via an email reply.\n  "
    createdViaEmail::Bool
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The time when this replied-to comment was deleted\n  "
    deletedAt::Union{DateTime, Missing, Nothing}
    discussion
    "\n  The actor who edited the comment.\n  "
    editor::Union{Actor, Missing, Nothing}
    id::String
    "\n  Check if this comment was edited and includes an edit with the creation data\n  "
    includesCreatedEdit::Bool
    "\n  Has this comment been chosen as the answer of its discussion?\n  "
    isAnswer::Bool
    "\n  Returns whether or not a comment has been minimized.\n  "
    isMinimized::Bool
    "\n  The moment the editor made the last edit\n  "
    lastEditedAt::Union{DateTime, Missing, Nothing}
    "\n  Returns why the comment was minimized. One of `abuse`, `off-topic`,\n  `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\n  formatting of these values differs from the inputs to the `MinimizeComment` mutation.\n  "
    minimizedReason::Union{String, Missing, Nothing}
    "\n  Identifies when the comment was published at.\n  "
    publishedAt::Union{DateTime, Missing, Nothing}
    "\n  A list of reactions grouped by content left on the subject.\n  "
    reactionGroups::Union{Vector{ReactionGroup}, Missing, Nothing}
    "\n  A list of Reactions left on the Issue.\n  "
    reactions::ReactionConnection
    "\n  The threaded replies to this comment.\n  "
    replies::DiscussionCommentConnection
    "\n  The discussion comment this comment is a reply to\n  "
    replyTo::Union{DiscussionComment, Missing, Nothing}
    "\n  The path for this discussion comment.\n  "
    resourcePath::URI
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  Number of upvotes that this subject has received.\n  "
    upvoteCount::Int
    "\n  The URL for this discussion comment.\n  "
    url::URI
    "\n  A list of edits to this content.\n  "
    userContentEdits::Union{UserContentEditConnection, Missing, Nothing}
    "\n  Check if the current viewer can delete this object.\n  "
    viewerCanDelete::Bool
    "\n  Can the current user mark this comment as an answer?\n  "
    viewerCanMarkAsAnswer::Bool
    "\n  Check if the current viewer can minimize this object.\n  "
    viewerCanMinimize::Bool
    "\n  Can user react to this subject\n  "
    viewerCanReact::Bool
    "\n  Can the current user unmark this comment as an answer?\n  "
    viewerCanUnmarkAsAnswer::Bool
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  Whether or not the current user can add or remove an upvote on this subject.\n  "
    viewerCanUpvote::Bool
    "\n  Reasons why the current viewer can not update this comment.\n  "
    viewerCannotUpdateReasons::Vector{CommentCannotUpdateReason.T}
    "\n  Did the viewer author this comment.\n  "
    viewerDidAuthor::Bool
    "\n  Whether or not the current user has already upvoted this subject.\n  "
    viewerHasUpvoted::Bool
end
function DiscussionComment(; author = nothing, authorAssociation, body, bodyHTML, bodyText, createdAt, createdViaEmail, databaseId = nothing, deletedAt = nothing, discussion = nothing, editor = nothing, id, includesCreatedEdit, isAnswer, isMinimized, lastEditedAt = nothing, minimizedReason = nothing, publishedAt = nothing, reactionGroups = nothing, reactions, replies, replyTo = nothing, resourcePath, updatedAt, upvoteCount, url, userContentEdits = nothing, viewerCanDelete, viewerCanMarkAsAnswer, viewerCanMinimize, viewerCanReact, viewerCanUnmarkAsAnswer, viewerCanUpdate, viewerCanUpvote, viewerCannotUpdateReasons, viewerDidAuthor, viewerHasUpvoted)
    DiscussionComment(author, authorAssociation, body, bodyHTML, bodyText, createdAt, createdViaEmail, databaseId, deletedAt, discussion, editor, id, includesCreatedEdit, isAnswer, isMinimized, lastEditedAt, minimizedReason, publishedAt, reactionGroups, reactions, replies, replyTo, resourcePath, updatedAt, upvoteCount, url, userContentEdits, viewerCanDelete, viewerCanMarkAsAnswer, viewerCanMinimize, viewerCanReact, viewerCanUnmarkAsAnswer, viewerCanUpdate, viewerCanUpvote, viewerCannotUpdateReasons, viewerDidAuthor, viewerHasUpvoted)
end
function Base.getproperty(t::DiscussionComment, sym::Symbol)
    if sym === Symbol("discussion")
        getfield(t, Symbol("discussion"))::Union{Discussion, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DiscussionComment, sym::Symbol, val::Any)
    if sym === Symbol("discussion")
        setfield!(t, Symbol("discussion"), val::Union{Discussion, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An option for a discussion poll.
"""
mutable struct DiscussionPollOption <: OfficialGithubSchema
    id::String
    "\n  The text for this option.\n  "
    option::String
    poll
    "\n  The total number of votes that have been cast for this option.\n  "
    totalVoteCount::Int
    "\n  Indicates if the viewer has voted for this option in the poll.\n  "
    viewerHasVoted::Bool
end
function DiscussionPollOption(; id, option, poll = nothing, totalVoteCount, viewerHasVoted)
    DiscussionPollOption(id, option, poll, totalVoteCount, viewerHasVoted)
end
function Base.getproperty(t::DiscussionPollOption, sym::Symbol)
    if sym === Symbol("poll")
        getfield(t, Symbol("poll"))::Union{DiscussionPoll, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DiscussionPollOption, sym::Symbol, val::Any)
    if sym === Symbol("poll")
        setfield!(t, Symbol("poll"), val::Union{DiscussionPoll, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct DiscussionPollOptionEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{DiscussionPollOption, Missing, Nothing}
end
function DiscussionPollOptionEdge(; cursor, node = nothing)
    DiscussionPollOptionEdge(cursor, node)
end

"""
The connection type for DiscussionPollOption.
"""
mutable struct DiscussionPollOptionConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DiscussionPollOptionEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{DiscussionPollOption, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DiscussionPollOptionConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DiscussionPollOptionConnection(edges, nodes, pageInfo, totalCount)
end

"""
A poll for a discussion.
"""
mutable struct DiscussionPoll <: OfficialGithubSchema
    discussion
    id::String
    "\n  The options for this poll.\n  "
    options::Union{DiscussionPollOptionConnection, Missing, Nothing}
    "\n  The question that is being asked by this poll.\n  "
    question::String
    "\n  The total number of votes that have been cast for this poll.\n  "
    totalVoteCount::Int
    "\n  Indicates if the viewer has permission to vote in this poll.\n  "
    viewerCanVote::Bool
    "\n  Indicates if the viewer has voted for any option in this poll.\n  "
    viewerHasVoted::Bool
end
function DiscussionPoll(; discussion = nothing, id, options = nothing, question, totalVoteCount, viewerCanVote, viewerHasVoted)
    DiscussionPoll(discussion, id, options, question, totalVoteCount, viewerCanVote, viewerHasVoted)
end
function Base.getproperty(t::DiscussionPoll, sym::Symbol)
    if sym === Symbol("discussion")
        getfield(t, Symbol("discussion"))::Union{Discussion, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DiscussionPoll, sym::Symbol, val::Any)
    if sym === Symbol("discussion")
        setfield!(t, Symbol("discussion"), val::Union{Discussion, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A category for discussions in a repository.
"""
mutable struct DiscussionCategory <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  A description of this category.\n  "
    description::Union{String, Missing, Nothing}
    "\n  An emoji representing this category.\n  "
    emoji::String
    "\n  This category's emoji rendered as HTML.\n  "
    emojiHTML::HTML
    id::String
    "\n  Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.\n  "
    isAnswerable::Bool
    "\n  The name of this category.\n  "
    name::String
    repository
    "\n  The slug of this category.\n  "
    slug::String
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function DiscussionCategory(; createdAt, description = nothing, emoji, emojiHTML, id, isAnswerable, name, repository, slug, updatedAt)
    DiscussionCategory(createdAt, description, emoji, emojiHTML, id, isAnswerable, name, repository, slug, updatedAt)
end
function Base.getproperty(t::DiscussionCategory, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DiscussionCategory, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
A discussion in a repository.
"""
mutable struct Discussion <: OfficialGithubSchema
    "\n  Reason that the conversation was locked.\n  "
    activeLockReason::Union{LockReason.T, Missing, Nothing}
    "\n  The comment chosen as this discussion's answer, if any.\n  "
    answer::Union{DiscussionComment, Missing, Nothing}
    "\n  The time when a user chose this discussion's answer, if answered.\n  "
    answerChosenAt::Union{DateTime, Missing, Nothing}
    "\n  The user who chose this discussion's answer, if answered.\n  "
    answerChosenBy::Union{Actor, Missing, Nothing}
    "\n  The actor who authored the comment.\n  "
    author::Union{Actor, Missing, Nothing}
    "\n  Author's association with the subject of the comment.\n  "
    authorAssociation::CommentAuthorAssociation.T
    "\n  The main text of the discussion post.\n  "
    body::String
    "\n  The body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  The body rendered to text.\n  "
    bodyText::String
    "\n  The category for this discussion.\n  "
    category::DiscussionCategory
    "\n  The replies to the discussion.\n  "
    comments::DiscussionCommentConnection
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Check if this comment was created via an email reply.\n  "
    createdViaEmail::Bool
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The actor who edited the comment.\n  "
    editor::Union{Actor, Missing, Nothing}
    id::String
    "\n  Check if this comment was edited and includes an edit with the creation data\n  "
    includesCreatedEdit::Bool
    "\n  A list of labels associated with the object.\n  "
    labels::Union{LabelConnection, Missing, Nothing}
    "\n  The moment the editor made the last edit\n  "
    lastEditedAt::Union{DateTime, Missing, Nothing}
    "\n  `true` if the object is locked\n  "
    locked::Bool
    "\n  The number identifying this discussion within the repository.\n  "
    number::Int
    "\n  The poll associated with this discussion, if one exists.\n  "
    poll::Union{DiscussionPoll, Missing, Nothing}
    "\n  Identifies when the comment was published at.\n  "
    publishedAt::Union{DateTime, Missing, Nothing}
    "\n  A list of reactions grouped by content left on the subject.\n  "
    reactionGroups::Union{Vector{ReactionGroup}, Missing, Nothing}
    "\n  A list of Reactions left on the Issue.\n  "
    reactions::ReactionConnection
    repository
    "\n  The path for this discussion.\n  "
    resourcePath::URI
    "\n  The title of this discussion.\n  "
    title::String
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  Number of upvotes that this subject has received.\n  "
    upvoteCount::Int
    "\n  The URL for this discussion.\n  "
    url::URI
    "\n  A list of edits to this content.\n  "
    userContentEdits::Union{UserContentEditConnection, Missing, Nothing}
    "\n  Check if the current viewer can delete this object.\n  "
    viewerCanDelete::Bool
    "\n  Can user react to this subject\n  "
    viewerCanReact::Bool
    "\n  Check if the viewer is able to change their subscription status for the repository.\n  "
    viewerCanSubscribe::Bool
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  Whether or not the current user can add or remove an upvote on this subject.\n  "
    viewerCanUpvote::Bool
    "\n  Did the viewer author this comment.\n  "
    viewerDidAuthor::Bool
    "\n  Whether or not the current user has already upvoted this subject.\n  "
    viewerHasUpvoted::Bool
    "\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  "
    viewerSubscription::Union{SubscriptionState.T, Missing, Nothing}
end
function Discussion(; activeLockReason = nothing, answer = nothing, answerChosenAt = nothing, answerChosenBy = nothing, author = nothing, authorAssociation, body, bodyHTML, bodyText, category, comments, createdAt, createdViaEmail, databaseId = nothing, editor = nothing, id, includesCreatedEdit, labels = nothing, lastEditedAt = nothing, locked, number, poll = nothing, publishedAt = nothing, reactionGroups = nothing, reactions, repository, resourcePath, title, updatedAt, upvoteCount, url, userContentEdits = nothing, viewerCanDelete, viewerCanReact, viewerCanSubscribe, viewerCanUpdate, viewerCanUpvote, viewerDidAuthor, viewerHasUpvoted, viewerSubscription = nothing)
    Discussion(activeLockReason, answer, answerChosenAt, answerChosenBy, author, authorAssociation, body, bodyHTML, bodyText, category, comments, createdAt, createdViaEmail, databaseId, editor, id, includesCreatedEdit, labels, lastEditedAt, locked, number, poll, publishedAt, reactionGroups, reactions, repository, resourcePath, title, updatedAt, upvoteCount, url, userContentEdits, viewerCanDelete, viewerCanReact, viewerCanSubscribe, viewerCanUpdate, viewerCanUpvote, viewerDidAuthor, viewerHasUpvoted, viewerSubscription)
end
function Base.getproperty(t::Discussion, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Discussion, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
A Pinned Discussion is a discussion pinned to a repository's index page.
"""
mutable struct PinnedDiscussion <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The discussion that was pinned.\n  "
    discussion::Discussion
    "\n  Color stops of the chosen gradient\n  "
    gradientStopColors::Vector{String}
    id::String
    "\n  Background texture pattern\n  "
    pattern::PinnedDiscussionPattern.T
    "\n  The actor that pinned this discussion.\n  "
    pinnedBy::Actor
    "\n  Preconfigured background gradient option\n  "
    preconfiguredGradient::Union{PinnedDiscussionGradient.T, Missing, Nothing}
    repository
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
end
function PinnedDiscussion(; createdAt, databaseId = nothing, discussion, gradientStopColors, id, pattern, pinnedBy, preconfiguredGradient = nothing, repository, updatedAt)
    PinnedDiscussion(createdAt, databaseId, discussion, gradientStopColors, id, pattern, pinnedBy, preconfiguredGradient, repository, updatedAt)
end
function Base.getproperty(t::PinnedDiscussion, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PinnedDiscussion, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct PinnedDiscussionEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PinnedDiscussion, Missing, Nothing}
end
function PinnedDiscussionEdge(; cursor, node = nothing)
    PinnedDiscussionEdge(cursor, node)
end

"""
The connection type for PinnedDiscussion.
"""
mutable struct PinnedDiscussionConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PinnedDiscussionEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PinnedDiscussion, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PinnedDiscussionConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PinnedDiscussionConnection(edges, nodes, pageInfo, totalCount)
end

"""
A repository contact link.
"""
mutable struct RepositoryContactLink <: OfficialGithubSchema
    "\n  The contact link purpose.\n  "
    about::String
    "\n  The contact link name.\n  "
    name::String
    "\n  The contact link URL.\n  "
    url::URI
end
function RepositoryContactLink(; about, name, url)
    RepositoryContactLink(about, name, url)
end

"""
An edge in a connection.
"""
mutable struct BranchProtectionRuleEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
end
function BranchProtectionRuleEdge(; cursor, node = nothing)
    BranchProtectionRuleEdge(cursor, node)
end
function Base.getproperty(t::BranchProtectionRuleEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::Union{BranchProtectionRule, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::BranchProtectionRuleEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::Union{BranchProtectionRule, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for BranchProtectionRule.
"""
mutable struct BranchProtectionRuleConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{BranchProtectionRuleEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function BranchProtectionRuleConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    BranchProtectionRuleConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::BranchProtectionRuleConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{BranchProtectionRule, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::BranchProtectionRuleConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{BranchProtectionRule, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct RefEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Ref, Missing, Nothing}
end
function RefEdge(; cursor, node = nothing)
    RefEdge(cursor, node)
end

"""
The connection type for Ref.
"""
mutable struct RefConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{RefEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Ref, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function RefConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    RefConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct ReleaseEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Release, Missing, Nothing}
end
function ReleaseEdge(; cursor, node = nothing)
    ReleaseEdge(cursor, node)
end

"""
The connection type for Release.
"""
mutable struct ReleaseConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ReleaseEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Release, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ReleaseConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ReleaseConnection(edges, nodes, pageInfo, totalCount)
end

"""
A Pinned Issue is a issue pinned to a repository's index page.
"""
mutable struct PinnedIssue <: OfficialGithubSchema
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The issue that was pinned.\n  "
    issue::Issue
    "\n  The actor that pinned this issue.\n  "
    pinnedBy::Actor
    repository
end
function PinnedIssue(; databaseId = nothing, id, issue, pinnedBy, repository)
    PinnedIssue(databaseId, id, issue, pinnedBy, repository)
end
function Base.getproperty(t::PinnedIssue, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PinnedIssue, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct PinnedIssueEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PinnedIssue, Missing, Nothing}
end
function PinnedIssueEdge(; cursor, node = nothing)
    PinnedIssueEdge(cursor, node)
end

"""
The connection type for PinnedIssue.
"""
mutable struct PinnedIssueConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PinnedIssueEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PinnedIssue, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PinnedIssueConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PinnedIssueConnection(edges, nodes, pageInfo, totalCount)
end

"""
A repository issue template.
"""
mutable struct IssueTemplate <: OfficialGithubSchema
    "\n  The template purpose.\n  "
    about::Union{String, Missing, Nothing}
    "\n  The suggested issue body.\n  "
    body::Union{String, Missing, Nothing}
    "\n  The template filename.\n  "
    filename::String
    "\n  The template name.\n  "
    name::String
    "\n  The suggested issue title.\n  "
    title::Union{String, Missing, Nothing}
end
function IssueTemplate(; about = nothing, body = nothing, filename, name, title = nothing)
    IssueTemplate(about, body, filename, name, title)
end

"""
Represents the language of a repository.
"""
mutable struct LanguageEdge <: OfficialGithubSchema
    cursor::String
    node::Language
    "\n  The number of bytes of code written in the language.\n  "
    size::Int
end
function LanguageEdge(; cursor, node, size)
    LanguageEdge(cursor, node, size)
end

"""
A list of languages associated with the parent.
"""
mutable struct LanguageConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{LanguageEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Language, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
    "\n  The total size in bytes of files written in that language.\n  "
    totalSize::Int
end
function LanguageConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount, totalSize)
    LanguageConnection(edges, nodes, pageInfo, totalCount, totalSize)
end

"""
A repository deploy key.
"""
mutable struct DeployKey <: OfficialGithubSchema
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    id::String
    "\n  The deploy key.\n  "
    key::String
    "\n  Whether or not the deploy key is read only.\n  "
    readOnly::Bool
    "\n  The deploy key title.\n  "
    title::String
    "\n  Whether or not the deploy key has been verified.\n  "
    verified::Bool
end
function DeployKey(; createdAt, id, key, readOnly, title, verified)
    DeployKey(createdAt, id, key, readOnly, title, verified)
end

"""
An edge in a connection.
"""
mutable struct DeployKeyEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{DeployKey, Missing, Nothing}
end
function DeployKeyEdge(; cursor, node = nothing)
    DeployKeyEdge(cursor, node)
end

"""
The connection type for DeployKey.
"""
mutable struct DeployKeyConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DeployKeyEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{DeployKey, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DeployKeyConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DeployKeyConnection(edges, nodes, pageInfo, totalCount)
end

"""
A repository pull request template.
"""
mutable struct PullRequestTemplate <: OfficialGithubSchema
    "\n  The body of the template\n  "
    body::Union{String, Missing, Nothing}
    "\n  The filename of the template\n  "
    filename::Union{String, Missing, Nothing}
    repository
end
function PullRequestTemplate(; body = nothing, filename = nothing, repository)
    PullRequestTemplate(body, filename, repository)
end
function Base.getproperty(t::PullRequestTemplate, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PullRequestTemplate, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
The Code of Conduct for a repository
"""
mutable struct CodeOfConduct <: OfficialGithubSchema
    "\n  The body of the Code of Conduct\n  "
    body::Union{String, Missing, Nothing}
    id::String
    "\n  The key for the Code of Conduct\n  "
    key::String
    "\n  The formal name of the Code of Conduct\n  "
    name::String
    "\n  The HTTP path for this Code of Conduct\n  "
    resourcePath::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for this Code of Conduct\n  "
    url::Union{URI, Missing, Nothing}
end
function CodeOfConduct(; body = nothing, id, key, name, resourcePath = nothing, url = nothing)
    CodeOfConduct(body, id, key, name, resourcePath, url)
end

"""
An error in a `CODEOWNERS` file.
"""
mutable struct RepositoryCodeownersError <: OfficialGithubSchema
    "\n  The column number where the error occurs.\n  "
    column::Int
    "\n  A short string describing the type of error.\n  "
    kind::String
    "\n  The line number where the error occurs.\n  "
    line::Int
    "\n  A complete description of the error, combining information from other fields.\n  "
    message::String
    "\n  The path to the file when the error occurs.\n  "
    path::String
    "\n  The content of the line where the error occurs.\n  "
    source::String
    "\n  A suggestion of how to fix the error.\n  "
    suggestion::Union{String, Missing, Nothing}
end
function RepositoryCodeownersError(; column, kind, line, message, path, source, suggestion = nothing)
    RepositoryCodeownersError(column, kind, line, message, path, source, suggestion)
end

"""
Information extracted from a repository's `CODEOWNERS` file.
"""
mutable struct RepositoryCodeowners <: OfficialGithubSchema
    "\n  Any problems that were encountered while parsing the `CODEOWNERS` file.\n  "
    errors::Vector{RepositoryCodeownersError}
end
function RepositoryCodeowners(; errors)
    RepositoryCodeowners(errors)
end

"""
A common weakness enumeration
"""
mutable struct CWE <: OfficialGithubSchema
    "\n  The id of the CWE\n  "
    cweId::String
    "\n  A detailed description of this CWE\n  "
    description::String
    id::String
    "\n  The name of this CWE\n  "
    name::String
end
function CWE(; cweId, description, id, name)
    CWE(cweId, description, id, name)
end

"""
An edge in a connection.
"""
mutable struct CWEEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{CWE, Missing, Nothing}
end
function CWEEdge(; cursor, node = nothing)
    CWEEdge(cursor, node)
end

"""
The connection type for CWE.
"""
mutable struct CWEConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CWEEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{CWE, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function CWEConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CWEConnection(edges, nodes, pageInfo, totalCount)
end

"""
A GitHub Security Advisory Identifier
"""
mutable struct SecurityAdvisoryIdentifier <: OfficialGithubSchema
    "\n  The identifier type, e.g. GHSA, CVE\n  "
    type::String
    "\n  The identifier\n  "
    value::String
end
function SecurityAdvisoryIdentifier(; type, value)
    SecurityAdvisoryIdentifier(type, value)
end

"""
A GitHub Security Advisory Reference
"""
mutable struct SecurityAdvisoryReference <: OfficialGithubSchema
    "\n  A publicly accessible reference\n  "
    url::URI
end
function SecurityAdvisoryReference(; url)
    SecurityAdvisoryReference(url)
end

"""
The Common Vulnerability Scoring System
"""
mutable struct CVSS <: OfficialGithubSchema
    "\n  The CVSS score associated with this advisory\n  "
    score::Float64
    "\n  The CVSS vector string associated with this advisory\n  "
    vectorString::Union{String, Missing, Nothing}
end
function CVSS(; score, vectorString = nothing)
    CVSS(score, vectorString)
end

"""
An individual package
"""
mutable struct SecurityAdvisoryPackage <: OfficialGithubSchema
    "\n  The ecosystem the package belongs to, e.g. RUBYGEMS, NPM\n  "
    ecosystem::SecurityAdvisoryEcosystem.T
    "\n  The package name\n  "
    name::String
end
function SecurityAdvisoryPackage(; ecosystem, name)
    SecurityAdvisoryPackage(ecosystem, name)
end

"""
An individual package version
"""
mutable struct SecurityAdvisoryPackageVersion <: OfficialGithubSchema
    "\n  The package name or version\n  "
    identifier::String
end
function SecurityAdvisoryPackageVersion(; identifier)
    SecurityAdvisoryPackageVersion(identifier)
end

"""
An individual vulnerability within an Advisory
"""
mutable struct SecurityVulnerability <: OfficialGithubSchema
    advisory
    "\n  The first version containing a fix for the vulnerability\n  "
    firstPatchedVersion::Union{SecurityAdvisoryPackageVersion, Missing, Nothing}
    "\n  A description of the vulnerable package\n  "
    package::SecurityAdvisoryPackage
    "\n  The severity of the vulnerability within this package\n  "
    severity::SecurityAdvisorySeverity.T
    "\n  When the vulnerability was last updated\n  "
    updatedAt::DateTime
    "\n  A string that describes the vulnerable package versions.\n  This string follows a basic syntax with a few forms.\n  + `= 0.2.0` denotes a single vulnerable version.\n  + `<= 1.0.8` denotes a version range up to and including the specified version\n  + `< 0.1.11` denotes a version range up to, but excluding, the specified version\n  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.\n  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum\n  "
    vulnerableVersionRange::String
end
function SecurityVulnerability(; advisory, firstPatchedVersion = nothing, package, severity, updatedAt, vulnerableVersionRange)
    SecurityVulnerability(advisory, firstPatchedVersion, package, severity, updatedAt, vulnerableVersionRange)
end
function Base.getproperty(t::SecurityVulnerability, sym::Symbol)
    if sym === Symbol("advisory")
        getfield(t, Symbol("advisory"))::SecurityAdvisory
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::SecurityVulnerability, sym::Symbol, val::Any)
    if sym === Symbol("advisory")
        setfield!(t, Symbol("advisory"), val::SecurityAdvisory)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct SecurityVulnerabilityEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{SecurityVulnerability, Missing, Nothing}
end
function SecurityVulnerabilityEdge(; cursor, node = nothing)
    SecurityVulnerabilityEdge(cursor, node)
end

"""
The connection type for SecurityVulnerability.
"""
mutable struct SecurityVulnerabilityConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{SecurityVulnerabilityEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{SecurityVulnerability, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function SecurityVulnerabilityConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    SecurityVulnerabilityConnection(edges, nodes, pageInfo, totalCount)
end

"""
A GitHub Security Advisory
"""
mutable struct SecurityAdvisory <: OfficialGithubSchema
    "\n  The classification of the advisory\n  "
    classification::SecurityAdvisoryClassification.T
    "\n  The CVSS associated with this advisory\n  "
    cvss::CVSS
    "\n  CWEs associated with this Advisory\n  "
    cwes::CWEConnection
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  This is a long plaintext description of the advisory\n  "
    description::String
    "\n  The GitHub Security Advisory ID\n  "
    ghsaId::String
    id::String
    "\n  A list of identifiers for this advisory\n  "
    identifiers::Vector{SecurityAdvisoryIdentifier}
    "\n  The permalink for the advisory's dependabot alerts page\n  "
    notificationsPermalink::Union{URI, Missing, Nothing}
    "\n  The organization that originated the advisory\n  "
    origin::String
    "\n  The permalink for the advisory\n  "
    permalink::Union{URI, Missing, Nothing}
    "\n  When the advisory was published\n  "
    publishedAt::DateTime
    "\n  A list of references for this advisory\n  "
    references::Vector{SecurityAdvisoryReference}
    "\n  The severity of the advisory\n  "
    severity::SecurityAdvisorySeverity.T
    "\n  A short plaintext summary of the advisory\n  "
    summary::String
    "\n  When the advisory was last updated\n  "
    updatedAt::DateTime
    "\n  Vulnerabilities associated with this Advisory\n  "
    vulnerabilities::SecurityVulnerabilityConnection
    "\n  When the advisory was withdrawn, if it has been withdrawn\n  "
    withdrawnAt::Union{DateTime, Missing, Nothing}
end
function SecurityAdvisory(; classification, cvss, cwes, databaseId = nothing, description, ghsaId, id, identifiers, notificationsPermalink = nothing, origin, permalink = nothing, publishedAt, references, severity, summary, updatedAt, vulnerabilities, withdrawnAt = nothing)
    SecurityAdvisory(classification, cvss, cwes, databaseId, description, ghsaId, id, identifiers, notificationsPermalink, origin, permalink, publishedAt, references, severity, summary, updatedAt, vulnerabilities, withdrawnAt)
end

"""
An error produced from a Dependabot Update
"""
mutable struct DependabotUpdateError <: OfficialGithubSchema
    "\n  The body of the error\n  "
    body::String
    "\n  The error code\n  "
    errorType::String
    "\n  The title of the error\n  "
    title::String
end
function DependabotUpdateError(; body, errorType, title)
    DependabotUpdateError(body, errorType, title)
end

"""
A Dependabot Update for a dependency in a repository
"""
mutable struct DependabotUpdate <: OfficialGithubSchema
    "\n  The error from a dependency update\n  "
    error::Union{DependabotUpdateError, Missing, Nothing}
    "\n  The associated pull request\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
    repository
end
function DependabotUpdate(; error = nothing, pullRequest = nothing, repository)
    DependabotUpdate(error, pullRequest, repository)
end
function Base.getproperty(t::DependabotUpdate, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DependabotUpdate, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
A Dependabot alert for a repository with a dependency affected by a security vulnerability.
"""
mutable struct RepositoryVulnerabilityAlert <: OfficialGithubSchema
    "\n  When was the alert created?\n  "
    createdAt::DateTime
    "\n  The associated Dependabot update\n  "
    dependabotUpdate::Union{DependabotUpdate, Missing, Nothing}
    "\n  The scope of an alert's dependency\n  "
    dependencyScope::Union{RepositoryVulnerabilityAlertDependencyScope.T, Missing, Nothing}
    "\n  Comment explaining the reason the alert was dismissed\n  "
    dismissComment::Union{String, Missing, Nothing}
    "\n  The reason the alert was dismissed\n  "
    dismissReason::Union{String, Missing, Nothing}
    "\n  When was the alert dismissed?\n  "
    dismissedAt::Union{DateTime, Missing, Nothing}
    dismisser
    "\n  The reason the alert was marked as fixed.\n  "
    fixReason::Union{String, Missing, Nothing}
    "\n  When was the alert fixed?\n  "
    fixedAt::Union{DateTime, Missing, Nothing}
    id::String
    "\n  Identifies the alert number.\n  "
    number::Int
    repository
    "\n  The associated security advisory\n  "
    securityAdvisory::Union{SecurityAdvisory, Missing, Nothing}
    "\n  The associated security vulnerability\n  "
    securityVulnerability::Union{SecurityVulnerability, Missing, Nothing}
    "\n  Identifies the state of the alert.\n  "
    state::RepositoryVulnerabilityAlertState.T
    "\n  The vulnerable manifest filename\n  "
    vulnerableManifestFilename::String
    "\n  The vulnerable manifest path\n  "
    vulnerableManifestPath::String
    "\n  The vulnerable requirements\n  "
    vulnerableRequirements::Union{String, Missing, Nothing}
end
function RepositoryVulnerabilityAlert(; createdAt, dependabotUpdate = nothing, dependencyScope = nothing, dismissComment = nothing, dismissReason = nothing, dismissedAt = nothing, dismisser = nothing, fixReason = nothing, fixedAt = nothing, id, number, repository, securityAdvisory = nothing, securityVulnerability = nothing, state, vulnerableManifestFilename, vulnerableManifestPath, vulnerableRequirements = nothing)
    RepositoryVulnerabilityAlert(createdAt, dependabotUpdate, dependencyScope, dismissComment, dismissReason, dismissedAt, dismisser, fixReason, fixedAt, id, number, repository, securityAdvisory, securityVulnerability, state, vulnerableManifestFilename, vulnerableManifestPath, vulnerableRequirements)
end
function Base.getproperty(t::RepositoryVulnerabilityAlert, sym::Symbol)
    if sym === Symbol("dismisser")
        getfield(t, Symbol("dismisser"))::Union{User, Missing, Nothing}
    elseif sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepositoryVulnerabilityAlert, sym::Symbol, val::Any)
    if sym === Symbol("dismisser")
        setfield!(t, Symbol("dismisser"), val::Union{User, Missing, Nothing})
    elseif sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct RepositoryVulnerabilityAlertEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{RepositoryVulnerabilityAlert, Missing, Nothing}
end
function RepositoryVulnerabilityAlertEdge(; cursor, node = nothing)
    RepositoryVulnerabilityAlertEdge(cursor, node)
end

"""
The connection type for RepositoryVulnerabilityAlert.
"""
mutable struct RepositoryVulnerabilityAlertConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{RepositoryVulnerabilityAlertEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{RepositoryVulnerabilityAlert, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function RepositoryVulnerabilityAlertConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    RepositoryVulnerabilityAlertConnection(edges, nodes, pageInfo, totalCount)
end

"""
A dependency manifest entry
"""
mutable struct DependencyGraphDependency <: OfficialGithubSchema
    "\n  Does the dependency itself have dependencies?\n  "
    hasDependencies::Bool
    "\n  The original name of the package, as it appears in the manifest.\n  "
    packageLabel::String
    "\n  The dependency package manager\n  "
    packageManager::Union{String, Missing, Nothing}
    "\n  The name of the package in the canonical form used by the package manager.\n  This may differ from the original textual form (see packageLabel), for example\n  in a package manager that uses case-insensitive comparisons.\n  "
    packageName::String
    repository
    "\n  The dependency version requirements\n  "
    requirements::String
end
function DependencyGraphDependency(; hasDependencies, packageLabel, packageManager = nothing, packageName, repository = nothing, requirements)
    DependencyGraphDependency(hasDependencies, packageLabel, packageManager, packageName, repository, requirements)
end
function Base.getproperty(t::DependencyGraphDependency, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Union{Repository, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DependencyGraphDependency, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Union{Repository, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct DependencyGraphDependencyEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{DependencyGraphDependency, Missing, Nothing}
end
function DependencyGraphDependencyEdge(; cursor, node = nothing)
    DependencyGraphDependencyEdge(cursor, node)
end

"""
The connection type for DependencyGraphDependency.
"""
mutable struct DependencyGraphDependencyConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DependencyGraphDependencyEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{DependencyGraphDependency, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DependencyGraphDependencyConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DependencyGraphDependencyConnection(edges, nodes, pageInfo, totalCount)
end

"""
Dependency manifest for a repository
"""
mutable struct DependencyGraphManifest <: OfficialGithubSchema
    "\n  Path to view the manifest file blob\n  "
    blobPath::String
    "\n  A list of manifest dependencies\n  "
    dependencies::Union{DependencyGraphDependencyConnection, Missing, Nothing}
    "\n  The number of dependencies listed in the manifest\n  "
    dependenciesCount::Union{Int, Missing, Nothing}
    "\n  Is the manifest too big to parse?\n  "
    exceedsMaxSize::Bool
    "\n  Fully qualified manifest filename\n  "
    filename::String
    id::String
    "\n  Were we able to parse the manifest?\n  "
    parseable::Bool
    repository
end
function DependencyGraphManifest(; blobPath, dependencies = nothing, dependenciesCount = nothing, exceedsMaxSize, filename, id, parseable, repository)
    DependencyGraphManifest(blobPath, dependencies, dependenciesCount, exceedsMaxSize, filename, id, parseable, repository)
end
function Base.getproperty(t::DependencyGraphManifest, sym::Symbol)
    if sym === Symbol("repository")
        getfield(t, Symbol("repository"))::Repository
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::DependencyGraphManifest, sym::Symbol, val::Any)
    if sym === Symbol("repository")
        setfield!(t, Symbol("repository"), val::Repository)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct DependencyGraphManifestEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{DependencyGraphManifest, Missing, Nothing}
end
function DependencyGraphManifestEdge(; cursor, node = nothing)
    DependencyGraphManifestEdge(cursor, node)
end

"""
The connection type for DependencyGraphManifest.
"""
mutable struct DependencyGraphManifestConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DependencyGraphManifestEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{DependencyGraphManifest, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DependencyGraphManifestConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DependencyGraphManifestConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct DiscussionCategoryEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{DiscussionCategory, Missing, Nothing}
end
function DiscussionCategoryEdge(; cursor, node = nothing)
    DiscussionCategoryEdge(cursor, node)
end

"""
The connection type for DiscussionCategory.
"""
mutable struct DiscussionCategoryConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{DiscussionCategoryEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{DiscussionCategory, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function DiscussionCategoryConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    DiscussionCategoryConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct MilestoneEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Milestone, Missing, Nothing}
end
function MilestoneEdge(; cursor, node = nothing)
    MilestoneEdge(cursor, node)
end

"""
The connection type for Milestone.
"""
mutable struct MilestoneConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{MilestoneEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Milestone, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function MilestoneConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    MilestoneConnection(edges, nodes, pageInfo, totalCount)
end

"""
A repository-topic connects a repository to a topic.
"""
mutable struct RepositoryTopic <: OfficialGithubSchema
    id::String
    "\n  The HTTP path for this repository-topic.\n  "
    resourcePath::URI
    "\n  The topic.\n  "
    topic::Topic
    "\n  The HTTP URL for this repository-topic.\n  "
    url::URI
end
function RepositoryTopic(; id, resourcePath, topic, url)
    RepositoryTopic(id, resourcePath, topic, url)
end

"""
An edge in a connection.
"""
mutable struct RepositoryTopicEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{RepositoryTopic, Missing, Nothing}
end
function RepositoryTopicEdge(; cursor, node = nothing)
    RepositoryTopicEdge(cursor, node)
end

"""
The connection type for RepositoryTopic.
"""
mutable struct RepositoryTopicConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{RepositoryTopicEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{RepositoryTopic, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function RepositoryTopicConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    RepositoryTopicConnection(edges, nodes, pageInfo, totalCount)
end

"""
Describes a License's conditions, permissions, and limitations
"""
mutable struct LicenseRule <: OfficialGithubSchema
    "\n  A description of the rule\n  "
    description::String
    "\n  The machine-readable rule key\n  "
    key::String
    "\n  The human-readable rule label\n  "
    label::String
end
function LicenseRule(; description, key, label)
    LicenseRule(description, key, label)
end

"""
A repository's open source license
"""
mutable struct License <: OfficialGithubSchema
    "\n  The full text of the license\n  "
    body::String
    "\n  The conditions set by the license\n  "
    conditions::Vector{Union{LicenseRule, Missing, Nothing}}
    "\n  A human-readable description of the license\n  "
    description::Union{String, Missing, Nothing}
    "\n  Whether the license should be featured\n  "
    featured::Bool
    "\n  Whether the license should be displayed in license pickers\n  "
    hidden::Bool
    id::String
    "\n  Instructions on how to implement the license\n  "
    implementation::Union{String, Missing, Nothing}
    "\n  The lowercased SPDX ID of the license\n  "
    key::String
    "\n  The limitations set by the license\n  "
    limitations::Vector{Union{LicenseRule, Missing, Nothing}}
    "\n  The license full name specified by <https://spdx.org/licenses>\n  "
    name::String
    "\n  Customary short name if applicable (e.g, GPLv3)\n  "
    nickname::Union{String, Missing, Nothing}
    "\n  The permissions set by the license\n  "
    permissions::Vector{Union{LicenseRule, Missing, Nothing}}
    "\n  Whether the license is a pseudo-license placeholder (e.g., other, no-license)\n  "
    pseudoLicense::Bool
    "\n  Short identifier specified by <https://spdx.org/licenses>\n  "
    spdxId::Union{String, Missing, Nothing}
    "\n  URL to the license on <https://choosealicense.com>\n  "
    url::Union{URI, Missing, Nothing}
end
function License(; body, conditions, description = nothing, featured, hidden, id, implementation = nothing, key, limitations, name, nickname = nothing, permissions, pseudoLicense, spdxId = nothing, url = nothing)
    License(body, conditions, description, featured, hidden, id, implementation, key, limitations, name, nickname, permissions, pseudoLicense, spdxId, url)
end

Core.@doc "Types that can grant permissions on a repository to a user" const PermissionGranter = Union{Organization, Repository, Team}

"""
A level of permission and source for a user's access to a repository.
"""
mutable struct PermissionSource <: OfficialGithubSchema
    "\n  The organization the repository belongs to.\n  "
    organization::Organization
    "\n  The level of access this source has granted to the user.\n  "
    permission::DefaultRepositoryPermissionField.T
    "\n  The source of this permission.\n  "
    source::PermissionGranter
end
function PermissionSource(; organization, permission, source)
    PermissionSource(organization, permission, source)
end

"""
Represents a user who is a collaborator of a repository.
"""
mutable struct RepositoryCollaboratorEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node
    "\n  The permission the user has on the repository.\n  "
    permission::RepositoryPermission.T
    "\n  A list of sources for the user's access to the repository.\n  "
    permissionSources::Union{Vector{PermissionSource}, Missing, Nothing}
end
function RepositoryCollaboratorEdge(; cursor, node, permission, permissionSources = nothing)
    RepositoryCollaboratorEdge(cursor, node, permission, permissionSources)
end
function Base.getproperty(t::RepositoryCollaboratorEdge, sym::Symbol)
    if sym === Symbol("node")
        getfield(t, Symbol("node"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepositoryCollaboratorEdge, sym::Symbol, val::Any)
    if sym === Symbol("node")
        setfield!(t, Symbol("node"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
The connection type for User.
"""
mutable struct RepositoryCollaboratorConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{RepositoryCollaboratorEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function RepositoryCollaboratorConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    RepositoryCollaboratorConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::RepositoryCollaboratorConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RepositoryCollaboratorConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
A funding platform link for a repository.
"""
mutable struct FundingLink <: OfficialGithubSchema
    "\n  The funding platform this link is for.\n  "
    platform::FundingPlatform.T
    "\n  The configured URL for this funding link.\n  "
    url::URI
end
function FundingLink(; platform, url)
    FundingLink(platform, url)
end

"""
A repository contains the content for a project.
"""
mutable struct Repository <: OfficialGithubSchema
    "\n  Whether or not a pull request head branch that is behind its base branch can\n  always be updated even if it is not required to be up to date before merging.\n  "
    allowUpdateBranch::Bool
    "\n  A list of users that can be assigned to issues in this repository.\n  "
    assignableUsers::UserConnection
    "\n  Whether or not Auto-merge can be enabled on pull requests in this repository.\n  "
    autoMergeAllowed::Bool
    "\n  A list of branch protection rules for this repository.\n  "
    branchProtectionRules::BranchProtectionRuleConnection
    "\n  Returns the code of conduct for this repository\n  "
    codeOfConduct::Union{CodeOfConduct, Missing, Nothing}
    "\n  Information extracted from the repository's `CODEOWNERS` file.\n  "
    codeowners::Union{RepositoryCodeowners, Missing, Nothing}
    "\n  A list of collaborators associated with the repository.\n  "
    collaborators::Union{RepositoryCollaboratorConnection, Missing, Nothing}
    "\n  A list of commit comments associated with the repository.\n  "
    commitComments::CommitCommentConnection
    "\n  Returns a list of contact links associated to the repository\n  "
    contactLinks::Union{Vector{RepositoryContactLink}, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The Ref associated with the repository's default branch.\n  "
    defaultBranchRef::Union{Ref, Missing, Nothing}
    "\n  Whether or not branches are automatically deleted when merged in this repository.\n  "
    deleteBranchOnMerge::Bool
    "\n  A list of dependency manifests contained in the repository\n  "
    dependencyGraphManifests::Union{DependencyGraphManifestConnection, Missing, Nothing}
    "\n  A list of deploy keys that are on this repository.\n  "
    deployKeys::DeployKeyConnection
    "\n  Deployments associated with the repository\n  "
    deployments::DeploymentConnection
    "\n  The description of the repository.\n  "
    description::Union{String, Missing, Nothing}
    "\n  The description of the repository rendered to HTML.\n  "
    descriptionHTML::HTML
    "\n  Returns a single discussion from the current repository by number.\n  "
    discussion::Union{Discussion, Missing, Nothing}
    "\n  A list of discussion categories that are available in the repository.\n  "
    discussionCategories::DiscussionCategoryConnection
    "\n  A discussion category by slug.\n  "
    discussionCategory::Union{DiscussionCategory, Missing, Nothing}
    "\n  A list of discussions that have been opened in the repository.\n  "
    discussions::DiscussionConnection
    "\n  The number of kilobytes this repository occupies on disk.\n  "
    diskUsage::Union{Int, Missing, Nothing}
    "\n  Returns a single active environment from the current repository by name.\n  "
    environment::Union{Environment, Missing, Nothing}
    "\n  A list of environments that are in this repository.\n  "
    environments::EnvironmentConnection
    "\n  Returns how many forks there are of this repository in the whole network.\n  "
    forkCount::Int
    "\n  Whether this repository allows forks.\n  "
    forkingAllowed::Bool
    forks
    "\n  The funding links for this repository\n  "
    fundingLinks::Vector{FundingLink}
    "\n  Indicates if the repository has the Discussions feature enabled.\n  "
    hasDiscussionsEnabled::Bool
    "\n  Indicates if the repository has issues feature enabled.\n  "
    hasIssuesEnabled::Bool
    "\n  Indicates if the repository has the Projects feature enabled.\n  "
    hasProjectsEnabled::Bool
    "\n  Indicates if the repository has wiki feature enabled.\n  "
    hasWikiEnabled::Bool
    "\n  The repository's URL.\n  "
    homepageUrl::Union{URI, Missing, Nothing}
    id::String
    "\n  The interaction ability settings for this repository.\n  "
    interactionAbility::Union{RepositoryInteractionAbility, Missing, Nothing}
    "\n  Indicates if the repository is unmaintained.\n  "
    isArchived::Bool
    "\n  Returns true if blank issue creation is allowed\n  "
    isBlankIssuesEnabled::Bool
    "\n  Returns whether or not this repository disabled.\n  "
    isDisabled::Bool
    "\n  Returns whether or not this repository is empty.\n  "
    isEmpty::Bool
    "\n  Identifies if the repository is a fork.\n  "
    isFork::Bool
    "\n  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.\n  "
    isInOrganization::Bool
    "\n  Indicates if the repository has been locked or not.\n  "
    isLocked::Bool
    "\n  Identifies if the repository is a mirror.\n  "
    isMirror::Bool
    "\n  Identifies if the repository is private or internal.\n  "
    isPrivate::Bool
    "\n  Returns true if this repository has a security policy\n  "
    isSecurityPolicyEnabled::Union{Bool, Missing, Nothing}
    "\n  Identifies if the repository is a template that can be used to generate new repositories.\n  "
    isTemplate::Bool
    "\n  Is this repository a user configuration repository?\n  "
    isUserConfigurationRepository::Bool
    "\n  Returns a single issue from the current repository by number.\n  "
    issue::Union{Issue, Missing, Nothing}
    "\n  Returns a single issue-like object from the current repository by number.\n  "
    issueOrPullRequest::Union{IssueOrPullRequest, Missing, Nothing}
    "\n  Returns a list of issue templates associated to the repository\n  "
    issueTemplates::Union{Vector{IssueTemplate}, Missing, Nothing}
    "\n  A list of issues that have been opened in the repository.\n  "
    issues::IssueConnection
    "\n  Returns a single label by name\n  "
    label::Union{Label, Missing, Nothing}
    "\n  A list of labels associated with the repository.\n  "
    labels::Union{LabelConnection, Missing, Nothing}
    "\n  A list containing a breakdown of the language composition of the repository.\n  "
    languages::Union{LanguageConnection, Missing, Nothing}
    "\n  Get the latest release for the repository if one exists.\n  "
    latestRelease::Union{Release, Missing, Nothing}
    "\n  The license associated with the repository\n  "
    licenseInfo::Union{License, Missing, Nothing}
    "\n  The reason the repository has been locked.\n  "
    lockReason::Union{RepositoryLockReason.T, Missing, Nothing}
    "\n  A list of Users that can be mentioned in the context of the repository.\n  "
    mentionableUsers::UserConnection
    "\n  Whether or not PRs are merged with a merge commit on this repository.\n  "
    mergeCommitAllowed::Bool
    "\n  How the default commit message will be generated when merging a pull request.\n  "
    mergeCommitMessage::MergeCommitMessage.T
    "\n  How the default commit title will be generated when merging a pull request.\n  "
    mergeCommitTitle::MergeCommitTitle.T
    "\n  Returns a single milestone from the current repository by number.\n  "
    milestone::Union{Milestone, Missing, Nothing}
    "\n  A list of milestones associated with the repository.\n  "
    milestones::Union{MilestoneConnection, Missing, Nothing}
    "\n  The repository's original mirror URL.\n  "
    mirrorUrl::Union{URI, Missing, Nothing}
    "\n  The name of the repository.\n  "
    name::String
    "\n  The repository's name with owner.\n  "
    nameWithOwner::String
    "\n  A Git object in the repository\n  "
    object::Union{GitObject, Missing, Nothing}
    "\n  The image used to represent this repository in Open Graph data.\n  "
    openGraphImageUrl::URI
    "\n  The User owner of the repository.\n  "
    owner::RepositoryOwner
    "\n  A list of packages under the owner.\n  "
    packages::PackageConnection
    "\n  The repository parent, if this is a fork.\n  "
    parent::Union{Repository, Missing, Nothing}
    "\n  A list of discussions that have been pinned in this repository.\n  "
    pinnedDiscussions::PinnedDiscussionConnection
    "\n  A list of pinned issues for this repository.\n  "
    pinnedIssues::Union{PinnedIssueConnection, Missing, Nothing}
    "\n  The primary language of the repository's code.\n  "
    primaryLanguage::Union{Language, Missing, Nothing}
    "\n  Find project by number.\n  "
    project::Union{Project, Missing, Nothing}
    "\n  Finds and returns the Project (beta) according to the provided Project (beta) number.\n  "
    projectNext::Union{ProjectNext, Missing, Nothing}
    projectV2
    "\n  A list of projects under the owner.\n  "
    projects::ProjectConnection
    "\n  List of projects (beta) linked to this repository.\n  "
    projectsNext::ProjectNextConnection
    "\n  The HTTP path listing the repository's projects\n  "
    projectsResourcePath::URI
    "\n  The HTTP URL listing the repository's projects\n  "
    projectsUrl::URI
    "\n  List of projects linked to this repository.\n  "
    projectsV2::ProjectV2Connection
    "\n  Returns a single pull request from the current repository by number.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
    "\n  Returns a list of pull request templates associated to the repository\n  "
    pullRequestTemplates::Union{Vector{PullRequestTemplate}, Missing, Nothing}
    "\n  A list of pull requests that have been opened in the repository.\n  "
    pullRequests::PullRequestConnection
    "\n  Identifies when the repository was last pushed to.\n  "
    pushedAt::Union{DateTime, Missing, Nothing}
    "\n  Whether or not rebase-merging is enabled on this repository.\n  "
    rebaseMergeAllowed::Bool
    "\n  Recent projects that this user has modified in the context of the owner.\n  "
    recentProjects::ProjectV2Connection
    "\n  Fetch a given ref from the repository\n  "
    ref::Union{Ref, Missing, Nothing}
    "\n  Fetch a list of refs from the repository\n  "
    refs::Union{RefConnection, Missing, Nothing}
    "\n  Lookup a single release given various criteria.\n  "
    release::Union{Release, Missing, Nothing}
    "\n  List of releases which are dependent on this repository.\n  "
    releases::ReleaseConnection
    "\n  A list of applied repository-topic associations for this repository.\n  "
    repositoryTopics::RepositoryTopicConnection
    "\n  The HTTP path for this repository\n  "
    resourcePath::URI
    "\n  The security policy URL.\n  "
    securityPolicyUrl::Union{URI, Missing, Nothing}
    "\n  A description of the repository, rendered to HTML without any links in it.\n  "
    shortDescriptionHTML::HTML
    "\n  Whether or not squash-merging is enabled on this repository.\n  "
    squashMergeAllowed::Bool
    "\n  How the default commit message will be generated when squash merging a pull request.\n  "
    squashMergeCommitMessage::SquashMergeCommitMessage.T
    "\n  How the default commit title will be generated when squash merging a pull request.\n  "
    squashMergeCommitTitle::SquashMergeCommitTitle.T
    "\n  Whether a squash merge commit can use the pull request title as default.\n  "
    squashPrTitleUsedAsDefault::Bool
    "\n  The SSH URL to clone this repository\n  "
    sshUrl::GitSSHRemote
    "\n  Returns a count of how many stargazers there are on this object\n  "
    stargazerCount::Int
    "\n  A list of users who have starred this starrable.\n  "
    stargazers::StargazerConnection
    "\n  Returns a list of all submodules in this repository parsed from the\n  .gitmodules file as of the default branch's HEAD commit.\n  "
    submodules::SubmoduleConnection
    "\n  Temporary authentication token for cloning this repository.\n  "
    tempCloneToken::Union{String, Missing, Nothing}
    "\n  The repository from which this repository was generated, if any.\n  "
    templateRepository::Union{Repository, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this repository\n  "
    url::URI
    "\n  Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.\n  "
    usesCustomOpenGraphImage::Bool
    "\n  Indicates whether the viewer has admin permissions on this repository.\n  "
    viewerCanAdminister::Bool
    "\n  Can the current viewer create new projects on this owner.\n  "
    viewerCanCreateProjects::Bool
    "\n  Check if the viewer is able to change their subscription status for the repository.\n  "
    viewerCanSubscribe::Bool
    "\n  Indicates whether the viewer can update the topics of this repository.\n  "
    viewerCanUpdateTopics::Bool
    "\n  The last commit email for the viewer.\n  "
    viewerDefaultCommitEmail::Union{String, Missing, Nothing}
    "\n  The last used merge method by the viewer or the default for the repository.\n  "
    viewerDefaultMergeMethod::PullRequestMergeMethod.T
    "\n  Returns a boolean indicating whether the viewing user has starred this starrable.\n  "
    viewerHasStarred::Bool
    "\n  The users permission level on the repository. Will return null if authenticated as an GitHub App.\n  "
    viewerPermission::Union{RepositoryPermission.T, Missing, Nothing}
    "\n  A list of emails this viewer can commit with.\n  "
    viewerPossibleCommitEmails::Union{Vector{String}, Missing, Nothing}
    "\n  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.\n  "
    viewerSubscription::Union{SubscriptionState.T, Missing, Nothing}
    "\n  Indicates the repository's visibility level.\n  "
    visibility::RepositoryVisibility.T
    "\n  A list of vulnerability alerts that are on this repository.\n  "
    vulnerabilityAlerts::Union{RepositoryVulnerabilityAlertConnection, Missing, Nothing}
    "\n  A list of users watching the repository.\n  "
    watchers::UserConnection
    "\n  Whether contributors are required to sign off on web-based commits in this repository.\n  "
    webCommitSignoffRequired::Bool
end
function Repository(; allowUpdateBranch, assignableUsers, autoMergeAllowed, branchProtectionRules, codeOfConduct = nothing, codeowners = nothing, collaborators = nothing, commitComments, contactLinks = nothing, createdAt, databaseId = nothing, defaultBranchRef = nothing, deleteBranchOnMerge, dependencyGraphManifests = nothing, deployKeys, deployments, description = nothing, descriptionHTML, discussion = nothing, discussionCategories, discussionCategory = nothing, discussions, diskUsage = nothing, environment = nothing, environments, forkCount, forkingAllowed, forks, fundingLinks, hasDiscussionsEnabled, hasIssuesEnabled, hasProjectsEnabled, hasWikiEnabled, homepageUrl = nothing, id, interactionAbility = nothing, isArchived, isBlankIssuesEnabled, isDisabled, isEmpty, isFork, isInOrganization, isLocked, isMirror, isPrivate, isSecurityPolicyEnabled = nothing, isTemplate, isUserConfigurationRepository, issue = nothing, issueOrPullRequest = nothing, issueTemplates = nothing, issues, label = nothing, labels = nothing, languages = nothing, latestRelease = nothing, licenseInfo = nothing, lockReason = nothing, mentionableUsers, mergeCommitAllowed, mergeCommitMessage, mergeCommitTitle, milestone = nothing, milestones = nothing, mirrorUrl = nothing, name, nameWithOwner, object = nothing, openGraphImageUrl, owner, packages, parent = nothing, pinnedDiscussions, pinnedIssues = nothing, primaryLanguage = nothing, project = nothing, projectNext = nothing, projectV2 = nothing, projects, projectsNext, projectsResourcePath, projectsUrl, projectsV2, pullRequest = nothing, pullRequestTemplates = nothing, pullRequests, pushedAt = nothing, rebaseMergeAllowed, recentProjects, ref = nothing, refs = nothing, release = nothing, releases, repositoryTopics, resourcePath, securityPolicyUrl = nothing, shortDescriptionHTML, squashMergeAllowed, squashMergeCommitMessage, squashMergeCommitTitle, squashPrTitleUsedAsDefault, sshUrl, stargazerCount, stargazers, submodules, tempCloneToken = nothing, templateRepository = nothing, updatedAt, url, usesCustomOpenGraphImage, viewerCanAdminister, viewerCanCreateProjects, viewerCanSubscribe, viewerCanUpdateTopics, viewerDefaultCommitEmail = nothing, viewerDefaultMergeMethod, viewerHasStarred, viewerPermission = nothing, viewerPossibleCommitEmails = nothing, viewerSubscription = nothing, visibility, vulnerabilityAlerts = nothing, watchers, webCommitSignoffRequired)
    Repository(allowUpdateBranch, assignableUsers, autoMergeAllowed, branchProtectionRules, codeOfConduct, codeowners, collaborators, commitComments, contactLinks, createdAt, databaseId, defaultBranchRef, deleteBranchOnMerge, dependencyGraphManifests, deployKeys, deployments, description, descriptionHTML, discussion, discussionCategories, discussionCategory, discussions, diskUsage, environment, environments, forkCount, forkingAllowed, forks, fundingLinks, hasDiscussionsEnabled, hasIssuesEnabled, hasProjectsEnabled, hasWikiEnabled, homepageUrl, id, interactionAbility, isArchived, isBlankIssuesEnabled, isDisabled, isEmpty, isFork, isInOrganization, isLocked, isMirror, isPrivate, isSecurityPolicyEnabled, isTemplate, isUserConfigurationRepository, issue, issueOrPullRequest, issueTemplates, issues, label, labels, languages, latestRelease, licenseInfo, lockReason, mentionableUsers, mergeCommitAllowed, mergeCommitMessage, mergeCommitTitle, milestone, milestones, mirrorUrl, name, nameWithOwner, object, openGraphImageUrl, owner, packages, parent, pinnedDiscussions, pinnedIssues, primaryLanguage, project, projectNext, projectV2, projects, projectsNext, projectsResourcePath, projectsUrl, projectsV2, pullRequest, pullRequestTemplates, pullRequests, pushedAt, rebaseMergeAllowed, recentProjects, ref, refs, release, releases, repositoryTopics, resourcePath, securityPolicyUrl, shortDescriptionHTML, squashMergeAllowed, squashMergeCommitMessage, squashMergeCommitTitle, squashPrTitleUsedAsDefault, sshUrl, stargazerCount, stargazers, submodules, tempCloneToken, templateRepository, updatedAt, url, usesCustomOpenGraphImage, viewerCanAdminister, viewerCanCreateProjects, viewerCanSubscribe, viewerCanUpdateTopics, viewerDefaultCommitEmail, viewerDefaultMergeMethod, viewerHasStarred, viewerPermission, viewerPossibleCommitEmails, viewerSubscription, visibility, vulnerabilityAlerts, watchers, webCommitSignoffRequired)
end
function Base.getproperty(t::Repository, sym::Symbol)
    if sym === Symbol("forks")
        getfield(t, Symbol("forks"))::RepositoryConnection
    elseif sym === Symbol("projectV2")
        getfield(t, Symbol("projectV2"))::Union{ProjectV2, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::Repository, sym::Symbol, val::Any)
    if sym === Symbol("forks")
        setfield!(t, Symbol("forks"), val::RepositoryConnection)
    elseif sym === Symbol("projectV2")
        setfield!(t, Symbol("projectV2"), val::Union{ProjectV2, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct RepositoryEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{Repository, Missing, Nothing}
end
function RepositoryEdge(; cursor, node = nothing)
    RepositoryEdge(cursor, node)
end

"""
A list of repositories owned by the subject.
"""
mutable struct RepositoryConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{RepositoryEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Repository, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
    "\n  The total size in kilobytes of all repositories in the connection.\n  "
    totalDiskUsage::Int
end
function RepositoryConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount, totalDiskUsage)
    RepositoryConnection(edges, nodes, pageInfo, totalCount, totalDiskUsage)
end

"""
New projects that manage issues, pull requests and drafts using tables and boards.
"""
mutable struct ProjectV2 <: OfficialGithubSchema
    "\n  Returns true if the project is closed.\n  "
    closed::Bool
    "\n  Identifies the date and time when the object was closed.\n  "
    closedAt::Union{DateTime, Missing, Nothing}
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  The actor who originally created the project.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  A field of the project\n  "
    field::Union{ProjectV2FieldConfiguration, Missing, Nothing}
    "\n  List of fields and their constraints in the project\n  "
    fields::ProjectV2FieldConfigurationConnection
    id::String
    "\n  List of items in the project\n  "
    items::ProjectV2ItemConnection
    "\n  The project's number.\n  "
    number::Int
    "\n  The project's owner. Currently limited to organizations and users.\n  "
    owner::ProjectV2Owner
    "\n  Returns true if the project is public.\n  "
    public::Bool
    "\n  The project's readme.\n  "
    readme::Union{String, Missing, Nothing}
    "\n  The repositories the project is linked to.\n  "
    repositories::RepositoryConnection
    "\n  The HTTP path for this project\n  "
    resourcePath::URI
    "\n  The project's short description.\n  "
    shortDescription::Union{String, Missing, Nothing}
    "\n  The teams the project is linked to.\n  "
    teams::TeamConnection
    "\n  The project's name.\n  "
    title::String
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this project\n  "
    url::URI
    "\n  A view of the project\n  "
    view::Union{ProjectV2View, Missing, Nothing}
    "\n  Check if the current viewer can update this object.\n  "
    viewerCanUpdate::Bool
    "\n  List of views in the project\n  "
    views::ProjectV2ViewConnection
end
function ProjectV2(; closed, closedAt = nothing, createdAt, creator = nothing, databaseId = nothing, field = nothing, fields, id, items, number, owner, public, readme = nothing, repositories, resourcePath, shortDescription = nothing, teams, title, updatedAt, url, view = nothing, viewerCanUpdate, views)
    ProjectV2(closed, closedAt, createdAt, creator, databaseId, field, fields, id, items, number, owner, public, readme, repositories, resourcePath, shortDescription, teams, title, updatedAt, url, view, viewerCanUpdate, views)
end

"""
A user's public key.
"""
mutable struct PublicKey <: OfficialGithubSchema
    "\n  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.\n  "
    accessedAt::Union{DateTime, Missing, Nothing}
    "\n  Identifies the date and time when the key was created. Keys created before\n  March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.\n  "
    createdAt::Union{DateTime, Missing, Nothing}
    "\n  The fingerprint for this PublicKey.\n  "
    fingerprint::String
    id::String
    "\n  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.\n  "
    isReadOnly::Union{Bool, Missing, Nothing}
    "\n  The public key string.\n  "
    key::String
    "\n  Identifies the date and time when the key was updated. Keys created before\n  March 5th, 2014 may have inaccurate values. Values will be null for keys not\n  owned by the user.\n  "
    updatedAt::Union{DateTime, Missing, Nothing}
end
function PublicKey(; accessedAt = nothing, createdAt = nothing, fingerprint, id, isReadOnly = nothing, key, updatedAt = nothing)
    PublicKey(accessedAt, createdAt, fingerprint, id, isReadOnly, key, updatedAt)
end

"""
An edge in a connection.
"""
mutable struct PublicKeyEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PublicKey, Missing, Nothing}
end
function PublicKeyEdge(; cursor, node = nothing)
    PublicKeyEdge(cursor, node)
end

"""
The connection type for PublicKey.
"""
mutable struct PublicKeyConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PublicKeyEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PublicKey, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PublicKeyConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PublicKeyConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a starred repository.
"""
mutable struct StarredRepositoryEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    node::Repository
    "\n  Identifies when the item was starred.\n  "
    starredAt::DateTime
end
function StarredRepositoryEdge(; cursor, node, starredAt)
    StarredRepositoryEdge(cursor, node, starredAt)
end

"""
The connection type for Repository.
"""
mutable struct StarredRepositoryConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{StarredRepositoryEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  Is the list of stars for this user truncated? This is true for users that have many stars.\n  "
    isOverLimit::Bool
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{Repository, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function StarredRepositoryConnection(; edges = nothing, isOverLimit, nodes = nothing, pageInfo, totalCount)
    StarredRepositoryConnection(edges, isOverLimit, nodes, pageInfo, totalCount)
end

"""
A Saved Reply is text a user can use to reply quickly.
"""
mutable struct SavedReply <: OfficialGithubSchema
    "\n  The body of the saved reply.\n  "
    body::String
    "\n  The saved reply body rendered to HTML.\n  "
    bodyHTML::HTML
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    id::String
    "\n  The title of the saved reply.\n  "
    title::String
    "\n  The user that saved this reply.\n  "
    user::Union{Actor, Missing, Nothing}
end
function SavedReply(; body, bodyHTML, databaseId = nothing, id, title, user = nothing)
    SavedReply(body, bodyHTML, databaseId, id, title, user)
end

"""
An edge in a connection.
"""
mutable struct SavedReplyEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{SavedReply, Missing, Nothing}
end
function SavedReplyEdge(; cursor, node = nothing)
    SavedReplyEdge(cursor, node)
end

"""
The connection type for SavedReply.
"""
mutable struct SavedReplyConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{SavedReplyEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{SavedReply, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function SavedReplyConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    SavedReplyConnection(edges, nodes, pageInfo, totalCount)
end

"""
The connection type for User.
"""
mutable struct FollowerConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{UserEdge, Missing, Nothing}}, Missing, Nothing}
    nodes
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function FollowerConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    FollowerConnection(edges, nodes, pageInfo, totalCount)
end
function Base.getproperty(t::FollowerConnection, sym::Symbol)
    if sym === Symbol("nodes")
        getfield(t, Symbol("nodes"))::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::FollowerConnection, sym::Symbol, val::Any)
    if sym === Symbol("nodes")
        setfield!(t, Symbol("nodes"), val::Union{Vector{Union{User, Missing, Nothing}}, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
Represents the contribution a user made on GitHub by opening an issue.
"""
mutable struct CreatedIssueContribution <: OfficialGithubSchema
    "\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  "
    isRestricted::Bool
    "\n  The issue that was opened.\n  "
    issue::Issue
    "\n  When this contribution was made.\n  "
    occurredAt::DateTime
    "\n  The HTTP path for this contribution.\n  "
    resourcePath::URI
    "\n  The HTTP URL for this contribution.\n  "
    url::URI
    user
end
function CreatedIssueContribution(; isRestricted, issue, occurredAt, resourcePath, url, user)
    CreatedIssueContribution(isRestricted, issue, occurredAt, resourcePath, url, user)
end
function Base.getproperty(t::CreatedIssueContribution, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CreatedIssueContribution, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct CreatedIssueContributionEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{CreatedIssueContribution, Missing, Nothing}
end
function CreatedIssueContributionEdge(; cursor, node = nothing)
    CreatedIssueContributionEdge(cursor, node)
end

"""
The connection type for CreatedIssueContribution.
"""
mutable struct CreatedIssueContributionConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CreatedIssueContributionEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{CreatedIssueContribution, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function CreatedIssueContributionConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CreatedIssueContributionConnection(edges, nodes, pageInfo, totalCount)
end

"""
This aggregates issues opened by a user within one repository.
"""
mutable struct IssueContributionsByRepository <: OfficialGithubSchema
    "\n  The issue contributions.\n  "
    contributions::CreatedIssueContributionConnection
    "\n  The repository in which the issues were opened.\n  "
    repository::Repository
end
function IssueContributionsByRepository(; contributions, repository)
    IssueContributionsByRepository(contributions, repository)
end

"""
Represents the contribution a user made on GitHub by creating a repository.
"""
mutable struct CreatedRepositoryContribution <: OfficialGithubSchema
    "\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  "
    isRestricted::Bool
    "\n  When this contribution was made.\n  "
    occurredAt::DateTime
    "\n  The repository that was created.\n  "
    repository::Repository
    "\n  The HTTP path for this contribution.\n  "
    resourcePath::URI
    "\n  The HTTP URL for this contribution.\n  "
    url::URI
    user
end
function CreatedRepositoryContribution(; isRestricted, occurredAt, repository, resourcePath, url, user)
    CreatedRepositoryContribution(isRestricted, occurredAt, repository, resourcePath, url, user)
end
function Base.getproperty(t::CreatedRepositoryContribution, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CreatedRepositoryContribution, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
Represents a private contribution a user made on GitHub.
"""
mutable struct RestrictedContribution <: OfficialGithubSchema
    "\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  "
    isRestricted::Bool
    "\n  When this contribution was made.\n  "
    occurredAt::DateTime
    "\n  The HTTP path for this contribution.\n  "
    resourcePath::URI
    "\n  The HTTP URL for this contribution.\n  "
    url::URI
    user
end
function RestrictedContribution(; isRestricted, occurredAt, resourcePath, url, user)
    RestrictedContribution(isRestricted, occurredAt, resourcePath, url, user)
end
function Base.getproperty(t::RestrictedContribution, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::RestrictedContribution, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::User)
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Represents either a repository the viewer can access or a restricted contribution." const CreatedRepositoryOrRestrictedContribution = Union{CreatedRepositoryContribution, RestrictedContribution}

"""
Represents the contribution a user made by committing to a repository.
"""
mutable struct CreatedCommitContribution <: OfficialGithubSchema
    "\n  How many commits were made on this day to this repository by the user.\n  "
    commitCount::Int
    "\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  "
    isRestricted::Bool
    "\n  When this contribution was made.\n  "
    occurredAt::DateTime
    "\n  The repository the user made a commit in.\n  "
    repository::Repository
    "\n  The HTTP path for this contribution.\n  "
    resourcePath::URI
    "\n  The HTTP URL for this contribution.\n  "
    url::URI
    user
end
function CreatedCommitContribution(; commitCount, isRestricted, occurredAt, repository, resourcePath, url, user)
    CreatedCommitContribution(commitCount, isRestricted, occurredAt, repository, resourcePath, url, user)
end
function Base.getproperty(t::CreatedCommitContribution, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CreatedCommitContribution, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct CreatedCommitContributionEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{CreatedCommitContribution, Missing, Nothing}
end
function CreatedCommitContributionEdge(; cursor, node = nothing)
    CreatedCommitContributionEdge(cursor, node)
end

"""
The connection type for CreatedCommitContribution.
"""
mutable struct CreatedCommitContributionConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CreatedCommitContributionEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{CreatedCommitContribution, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of commits across days and repositories in the connection.\n  "
    totalCount::Int
end
function CreatedCommitContributionConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CreatedCommitContributionConnection(edges, nodes, pageInfo, totalCount)
end

"""
This aggregates commits made by a user within one repository.
"""
mutable struct CommitContributionsByRepository <: OfficialGithubSchema
    "\n  The commit contributions, each representing a day.\n  "
    contributions::CreatedCommitContributionConnection
    "\n  The repository in which the commits were made.\n  "
    repository::Repository
    "\n  The HTTP path for the user's commits to the repository in this time range.\n  "
    resourcePath::URI
    "\n  The HTTP URL for the user's commits to the repository in this time range.\n  "
    url::URI
end
function CommitContributionsByRepository(; contributions, repository, resourcePath, url)
    CommitContributionsByRepository(contributions, repository, resourcePath, url)
end

"""
Represents the contribution a user made on GitHub by opening a pull request.
"""
mutable struct CreatedPullRequestContribution <: OfficialGithubSchema
    "\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  "
    isRestricted::Bool
    "\n  When this contribution was made.\n  "
    occurredAt::DateTime
    "\n  The pull request that was opened.\n  "
    pullRequest::PullRequest
    "\n  The HTTP path for this contribution.\n  "
    resourcePath::URI
    "\n  The HTTP URL for this contribution.\n  "
    url::URI
    user
end
function CreatedPullRequestContribution(; isRestricted, occurredAt, pullRequest, resourcePath, url, user)
    CreatedPullRequestContribution(isRestricted, occurredAt, pullRequest, resourcePath, url, user)
end
function Base.getproperty(t::CreatedPullRequestContribution, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CreatedPullRequestContribution, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct CreatedPullRequestContributionEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{CreatedPullRequestContribution, Missing, Nothing}
end
function CreatedPullRequestContributionEdge(; cursor, node = nothing)
    CreatedPullRequestContributionEdge(cursor, node)
end

"""
The connection type for CreatedPullRequestContribution.
"""
mutable struct CreatedPullRequestContributionConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CreatedPullRequestContributionEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{CreatedPullRequestContribution, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function CreatedPullRequestContributionConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CreatedPullRequestContributionConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a user signing up for a GitHub account.
"""
mutable struct JoinedGitHubContribution <: OfficialGithubSchema
    "\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  "
    isRestricted::Bool
    "\n  When this contribution was made.\n  "
    occurredAt::DateTime
    "\n  The HTTP path for this contribution.\n  "
    resourcePath::URI
    "\n  The HTTP URL for this contribution.\n  "
    url::URI
    user
end
function JoinedGitHubContribution(; isRestricted, occurredAt, resourcePath, url, user)
    JoinedGitHubContribution(isRestricted, occurredAt, resourcePath, url, user)
end
function Base.getproperty(t::JoinedGitHubContribution, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::JoinedGitHubContribution, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::User)
    else
        setfield!(t, sym, val)
    end
end

Core.@doc "Represents either a issue the viewer can access or a restricted contribution." const CreatedIssueOrRestrictedContribution = Union{CreatedIssueContribution, RestrictedContribution}

Core.@doc "Represents either a pull request the viewer can access or a restricted contribution." const CreatedPullRequestOrRestrictedContribution = Union{CreatedPullRequestContribution, RestrictedContribution}

"""
Represents the contribution a user made by leaving a review on a pull request.
"""
mutable struct CreatedPullRequestReviewContribution <: OfficialGithubSchema
    "\n  Whether this contribution is associated with a record you do not have access to. For\n  example, your own 'first issue' contribution may have been made on a repository you can no\n  longer access.\n  "
    isRestricted::Bool
    "\n  When this contribution was made.\n  "
    occurredAt::DateTime
    "\n  The pull request the user reviewed.\n  "
    pullRequest::PullRequest
    "\n  The review the user left on the pull request.\n  "
    pullRequestReview::PullRequestReview
    "\n  The repository containing the pull request that the user reviewed.\n  "
    repository::Repository
    "\n  The HTTP path for this contribution.\n  "
    resourcePath::URI
    "\n  The HTTP URL for this contribution.\n  "
    url::URI
    user
end
function CreatedPullRequestReviewContribution(; isRestricted, occurredAt, pullRequest, pullRequestReview, repository, resourcePath, url, user)
    CreatedPullRequestReviewContribution(isRestricted, occurredAt, pullRequest, pullRequestReview, repository, resourcePath, url, user)
end
function Base.getproperty(t::CreatedPullRequestReviewContribution, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::CreatedPullRequestReviewContribution, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct CreatedPullRequestReviewContributionEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{CreatedPullRequestReviewContribution, Missing, Nothing}
end
function CreatedPullRequestReviewContributionEdge(; cursor, node = nothing)
    CreatedPullRequestReviewContributionEdge(cursor, node)
end

"""
The connection type for CreatedPullRequestReviewContribution.
"""
mutable struct CreatedPullRequestReviewContributionConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CreatedPullRequestReviewContributionEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{CreatedPullRequestReviewContribution, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function CreatedPullRequestReviewContributionConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CreatedPullRequestReviewContributionConnection(edges, nodes, pageInfo, totalCount)
end

"""
An edge in a connection.
"""
mutable struct CreatedRepositoryContributionEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{CreatedRepositoryContribution, Missing, Nothing}
end
function CreatedRepositoryContributionEdge(; cursor, node = nothing)
    CreatedRepositoryContributionEdge(cursor, node)
end

"""
The connection type for CreatedRepositoryContribution.
"""
mutable struct CreatedRepositoryContributionConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{CreatedRepositoryContributionEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{CreatedRepositoryContribution, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function CreatedRepositoryContributionConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    CreatedRepositoryContributionConnection(edges, nodes, pageInfo, totalCount)
end

"""
This aggregates pull requests opened by a user within one repository.
"""
mutable struct PullRequestContributionsByRepository <: OfficialGithubSchema
    "\n  The pull request contributions.\n  "
    contributions::CreatedPullRequestContributionConnection
    "\n  The repository in which the pull requests were opened.\n  "
    repository::Repository
end
function PullRequestContributionsByRepository(; contributions, repository)
    PullRequestContributionsByRepository(contributions, repository)
end

"""
Represents a single day of contributions on GitHub by a user.
"""
mutable struct ContributionCalendarDay <: OfficialGithubSchema
    "\n  The hex color code that represents how many contributions were made on this day compared to others in the calendar.\n  "
    color::String
    "\n  How many contributions were made by the user on this day.\n  "
    contributionCount::Int
    "\n  Indication of contributions, relative to other days. Can be used to indicate\n  which color to represent this day on a calendar.\n  "
    contributionLevel::ContributionLevel.T
    "\n  The day this square represents.\n  "
    date::Date
    "\n  A number representing which day of the week this square represents, e.g., 1 is Monday.\n  "
    weekday::Int
end
function ContributionCalendarDay(; color, contributionCount, contributionLevel, date, weekday)
    ContributionCalendarDay(color, contributionCount, contributionLevel, date, weekday)
end

"""
A week of contributions in a user's contribution graph.
"""
mutable struct ContributionCalendarWeek <: OfficialGithubSchema
    "\n  The days of contributions in this week.\n  "
    contributionDays::Vector{ContributionCalendarDay}
    "\n  The date of the earliest square in this week.\n  "
    firstDay::Date
end
function ContributionCalendarWeek(; contributionDays, firstDay)
    ContributionCalendarWeek(contributionDays, firstDay)
end

"""
A month of contributions in a user's contribution graph.
"""
mutable struct ContributionCalendarMonth <: OfficialGithubSchema
    "\n  The date of the first day of this month.\n  "
    firstDay::Date
    "\n  The name of the month.\n  "
    name::String
    "\n  How many weeks started in this month.\n  "
    totalWeeks::Int
    "\n  The year the month occurred in.\n  "
    year::Int
end
function ContributionCalendarMonth(; firstDay, name, totalWeeks, year)
    ContributionCalendarMonth(firstDay, name, totalWeeks, year)
end

"""
A calendar of contributions made on GitHub by a user.
"""
mutable struct ContributionCalendar <: OfficialGithubSchema
    "\n  A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.\n  "
    colors::Vector{String}
    "\n  Determine if the color set was chosen because it's currently Halloween.\n  "
    isHalloween::Bool
    "\n  A list of the months of contributions in this calendar.\n  "
    months::Vector{ContributionCalendarMonth}
    "\n  The count of total contributions in the calendar.\n  "
    totalContributions::Int
    "\n  A list of the weeks of contributions in this calendar.\n  "
    weeks::Vector{ContributionCalendarWeek}
end
function ContributionCalendar(; colors, isHalloween, months, totalContributions, weeks)
    ContributionCalendar(colors, isHalloween, months, totalContributions, weeks)
end

"""
This aggregates pull request reviews made by a user within one repository.
"""
mutable struct PullRequestReviewContributionsByRepository <: OfficialGithubSchema
    "\n  The pull request review contributions.\n  "
    contributions::CreatedPullRequestReviewContributionConnection
    "\n  The repository in which the pull request reviews were made.\n  "
    repository::Repository
end
function PullRequestReviewContributionsByRepository(; contributions, repository)
    PullRequestReviewContributionsByRepository(contributions, repository)
end

"""
A contributions collection aggregates contributions such as opened issues and commits created by a user.
"""
mutable struct ContributionsCollection <: OfficialGithubSchema
    "\n  Commit contributions made by the user, grouped by repository.\n  "
    commitContributionsByRepository::Vector{CommitContributionsByRepository}
    "\n  A calendar of this user's contributions on GitHub.\n  "
    contributionCalendar::ContributionCalendar
    "\n  The years the user has been making contributions with the most recent year first.\n  "
    contributionYears::Vector{Int}
    "\n  Determine if this collection's time span ends in the current month.\n  "
    doesEndInCurrentMonth::Bool
    "\n  The date of the first restricted contribution the user made in this time\n  period. Can only be non-null when the user has enabled private contribution counts.\n  "
    earliestRestrictedContributionDate::Union{Date, Missing, Nothing}
    "\n  The ending date and time of this collection.\n  "
    endedAt::DateTime
    "\n  The first issue the user opened on GitHub. This will be null if that issue was\n  opened outside the collection's time range and ignoreTimeRange is false. If\n  the issue is not visible but the user has opted to show private contributions,\n  a RestrictedContribution will be returned.\n  "
    firstIssueContribution::Union{CreatedIssueOrRestrictedContribution, Missing, Nothing}
    "\n  The first pull request the user opened on GitHub. This will be null if that\n  pull request was opened outside the collection's time range and\n  ignoreTimeRange is not true. If the pull request is not visible but the user\n  has opted to show private contributions, a RestrictedContribution will be returned.\n  "
    firstPullRequestContribution::Union{CreatedPullRequestOrRestrictedContribution, Missing, Nothing}
    "\n  The first repository the user created on GitHub. This will be null if that\n  first repository was created outside the collection's time range and\n  ignoreTimeRange is false. If the repository is not visible, then a\n  RestrictedContribution is returned.\n  "
    firstRepositoryContribution::Union{CreatedRepositoryOrRestrictedContribution, Missing, Nothing}
    "\n  Does the user have any more activity in the timeline that occurred prior to the collection's time range?\n  "
    hasActivityInThePast::Bool
    "\n  Determine if there are any contributions in this collection.\n  "
    hasAnyContributions::Bool
    "\n  Determine if the user made any contributions in this time frame whose details\n  are not visible because they were made in a private repository. Can only be\n  true if the user enabled private contribution counts.\n  "
    hasAnyRestrictedContributions::Bool
    "\n  Whether or not the collector's time span is all within the same day.\n  "
    isSingleDay::Bool
    "\n  A list of issues the user opened.\n  "
    issueContributions::CreatedIssueContributionConnection
    "\n  Issue contributions made by the user, grouped by repository.\n  "
    issueContributionsByRepository::Vector{IssueContributionsByRepository}
    "\n  When the user signed up for GitHub. This will be null if that sign up date\n  falls outside the collection's time range and ignoreTimeRange is false.\n  "
    joinedGitHubContribution::Union{JoinedGitHubContribution, Missing, Nothing}
    "\n  The date of the most recent restricted contribution the user made in this time\n  period. Can only be non-null when the user has enabled private contribution counts.\n  "
    latestRestrictedContributionDate::Union{Date, Missing, Nothing}
    "\n  When this collection's time range does not include any activity from the user, use this\n  to get a different collection from an earlier time range that does have activity.\n  "
    mostRecentCollectionWithActivity::Union{ContributionsCollection, Missing, Nothing}
    "\n  Returns a different contributions collection from an earlier time range than this one\n  that does not have any contributions.\n  "
    mostRecentCollectionWithoutActivity::Union{ContributionsCollection, Missing, Nothing}
    "\n  The issue the user opened on GitHub that received the most comments in the specified\n  time frame.\n  "
    popularIssueContribution::Union{CreatedIssueContribution, Missing, Nothing}
    "\n  The pull request the user opened on GitHub that received the most comments in the\n  specified time frame.\n  "
    popularPullRequestContribution::Union{CreatedPullRequestContribution, Missing, Nothing}
    "\n  Pull request contributions made by the user.\n  "
    pullRequestContributions::CreatedPullRequestContributionConnection
    "\n  Pull request contributions made by the user, grouped by repository.\n  "
    pullRequestContributionsByRepository::Vector{PullRequestContributionsByRepository}
    "\n  Pull request review contributions made by the user. Returns the most recently\n  submitted review for each PR reviewed by the user.\n  "
    pullRequestReviewContributions::CreatedPullRequestReviewContributionConnection
    "\n  Pull request review contributions made by the user, grouped by repository.\n  "
    pullRequestReviewContributionsByRepository::Vector{PullRequestReviewContributionsByRepository}
    "\n  A list of repositories owned by the user that the user created in this time range.\n  "
    repositoryContributions::CreatedRepositoryContributionConnection
    "\n  A count of contributions made by the user that the viewer cannot access. Only\n  non-zero when the user has chosen to share their private contribution counts.\n  "
    restrictedContributionsCount::Int
    "\n  The beginning date and time of this collection.\n  "
    startedAt::DateTime
    "\n  How many commits were made by the user in this time span.\n  "
    totalCommitContributions::Int
    "\n  How many issues the user opened.\n  "
    totalIssueContributions::Int
    "\n  How many pull requests the user opened.\n  "
    totalPullRequestContributions::Int
    "\n  How many pull request reviews the user left.\n  "
    totalPullRequestReviewContributions::Int
    "\n  How many different repositories the user committed to.\n  "
    totalRepositoriesWithContributedCommits::Int
    "\n  How many different repositories the user opened issues in.\n  "
    totalRepositoriesWithContributedIssues::Int
    "\n  How many different repositories the user left pull request reviews in.\n  "
    totalRepositoriesWithContributedPullRequestReviews::Int
    "\n  How many different repositories the user opened pull requests in.\n  "
    totalRepositoriesWithContributedPullRequests::Int
    "\n  How many repositories the user created.\n  "
    totalRepositoryContributions::Int
    user
end
function ContributionsCollection(; commitContributionsByRepository, contributionCalendar, contributionYears, doesEndInCurrentMonth, earliestRestrictedContributionDate = nothing, endedAt, firstIssueContribution = nothing, firstPullRequestContribution = nothing, firstRepositoryContribution = nothing, hasActivityInThePast, hasAnyContributions, hasAnyRestrictedContributions, isSingleDay, issueContributions, issueContributionsByRepository, joinedGitHubContribution = nothing, latestRestrictedContributionDate = nothing, mostRecentCollectionWithActivity = nothing, mostRecentCollectionWithoutActivity = nothing, popularIssueContribution = nothing, popularPullRequestContribution = nothing, pullRequestContributions, pullRequestContributionsByRepository, pullRequestReviewContributions, pullRequestReviewContributionsByRepository, repositoryContributions, restrictedContributionsCount, startedAt, totalCommitContributions, totalIssueContributions, totalPullRequestContributions, totalPullRequestReviewContributions, totalRepositoriesWithContributedCommits, totalRepositoriesWithContributedIssues, totalRepositoriesWithContributedPullRequestReviews, totalRepositoriesWithContributedPullRequests, totalRepositoryContributions, user)
    ContributionsCollection(commitContributionsByRepository, contributionCalendar, contributionYears, doesEndInCurrentMonth, earliestRestrictedContributionDate, endedAt, firstIssueContribution, firstPullRequestContribution, firstRepositoryContribution, hasActivityInThePast, hasAnyContributions, hasAnyRestrictedContributions, isSingleDay, issueContributions, issueContributionsByRepository, joinedGitHubContribution, latestRestrictedContributionDate, mostRecentCollectionWithActivity, mostRecentCollectionWithoutActivity, popularIssueContribution, popularPullRequestContribution, pullRequestContributions, pullRequestContributionsByRepository, pullRequestReviewContributions, pullRequestReviewContributionsByRepository, repositoryContributions, restrictedContributionsCount, startedAt, totalCommitContributions, totalIssueContributions, totalPullRequestContributions, totalPullRequestReviewContributions, totalRepositoriesWithContributedCommits, totalRepositoriesWithContributedIssues, totalRepositoriesWithContributedPullRequestReviews, totalRepositoriesWithContributedPullRequests, totalRepositoryContributions, user)
end
function Base.getproperty(t::ContributionsCollection, sym::Symbol)
    if sym === Symbol("user")
        getfield(t, Symbol("user"))::User
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ContributionsCollection, sym::Symbol, val::Any)
    if sym === Symbol("user")
        setfield!(t, Symbol("user"), val::User)
    else
        setfield!(t, sym, val)
    end
end

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
mutable struct User <: OfficialGithubSchema
    "\n  Determine if this repository owner has any items that can be pinned to their profile.\n  "
    anyPinnableItems::Bool
    "\n  A URL pointing to the user's public avatar.\n  "
    avatarUrl::URI
    "\n  The user's public profile bio.\n  "
    bio::Union{String, Missing, Nothing}
    "\n  The user's public profile bio as HTML.\n  "
    bioHTML::HTML
    "\n  Could this user receive email notifications, if the organization had notification restrictions enabled?\n  "
    canReceiveOrganizationEmailsWhenNotificationsRestricted::Bool
    "\n  A list of commit comments made by this user.\n  "
    commitComments::CommitCommentConnection
    "\n  The user's public profile company.\n  "
    company::Union{String, Missing, Nothing}
    "\n  The user's public profile company as HTML.\n  "
    companyHTML::HTML
    "\n  The collection of contributions this user has made to different repositories.\n  "
    contributionsCollection::ContributionsCollection
    "\n  Identifies the date and time when the object was created.\n  "
    createdAt::DateTime
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  The user's publicly visible profile email.\n  "
    email::String
    "\n  The estimated next GitHub Sponsors payout for this user/organization in cents (USD).\n  "
    estimatedNextSponsorsPayoutInCents::Int
    "\n  A list of users the given user is followed by.\n  "
    followers::FollowerConnection
    "\n  A list of users the given user is following.\n  "
    following::FollowingConnection
    "\n  Find gist by repo name.\n  "
    gist::Union{Gist, Missing, Nothing}
    "\n  A list of gist comments made by this user.\n  "
    gistComments::GistCommentConnection
    "\n  A list of the Gists the user has created.\n  "
    gists::GistConnection
    "\n  True if this user/organization has a GitHub Sponsors listing.\n  "
    hasSponsorsListing::Bool
    "\n  The hovercard information for this user in a given context\n  "
    hovercard::Hovercard
    id::String
    "\n  The interaction ability settings for this user.\n  "
    interactionAbility::Union{RepositoryInteractionAbility, Missing, Nothing}
    "\n  Whether or not this user is a participant in the GitHub Security Bug Bounty.\n  "
    isBountyHunter::Bool
    "\n  Whether or not this user is a participant in the GitHub Campus Experts Program.\n  "
    isCampusExpert::Bool
    "\n  Whether or not this user is a GitHub Developer Program member.\n  "
    isDeveloperProgramMember::Bool
    "\n  Whether or not this user is a GitHub employee.\n  "
    isEmployee::Bool
    "\n  Whether or not this user is following the viewer. Inverse of viewer_is_following\n  "
    isFollowingViewer::Bool
    "\n  Whether or not this user is a member of the GitHub Stars Program.\n  "
    isGitHubStar::Bool
    "\n  Whether or not the user has marked themselves as for hire.\n  "
    isHireable::Bool
    "\n  Whether or not this user is a site administrator.\n  "
    isSiteAdmin::Bool
    "\n  Check if the given account is sponsoring this user/organization.\n  "
    isSponsoredBy::Bool
    "\n  True if the viewer is sponsored by this user/organization.\n  "
    isSponsoringViewer::Bool
    "\n  Whether or not this user is the viewing user.\n  "
    isViewer::Bool
    "\n  A list of issue comments made by this user.\n  "
    issueComments::IssueCommentConnection
    "\n  A list of issues associated with this user.\n  "
    issues::IssueConnection
    "\n  Showcases a selection of repositories and gists that the profile owner has\n  either curated or that have been selected automatically based on popularity.\n  "
    itemShowcase::ProfileItemShowcase
    "\n  The user's public profile location.\n  "
    location::Union{String, Missing, Nothing}
    "\n  The username used to login.\n  "
    login::String
    "\n  The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).\n  "
    monthlyEstimatedSponsorsIncomeInCents::Int
    "\n  The user's public profile name.\n  "
    name::Union{String, Missing, Nothing}
    "\n  Find an organization by its login that the user belongs to.\n  "
    organization::Union{Organization, Missing, Nothing}
    "\n  Verified email addresses that match verified domains for a specified organization the user is a member of.\n  "
    organizationVerifiedDomainEmails::Vector{String}
    "\n  A list of organizations the user belongs to.\n  "
    organizations::OrganizationConnection
    "\n  A list of packages under the owner.\n  "
    packages::PackageConnection
    "\n  A list of repositories and gists this profile owner can pin to their profile.\n  "
    pinnableItems::PinnableItemConnection
    "\n  A list of repositories and gists this profile owner has pinned to their profile\n  "
    pinnedItems::PinnableItemConnection
    "\n  Returns how many more items this profile owner can pin to their profile.\n  "
    pinnedItemsRemaining::Int
    "\n  Find project by number.\n  "
    project::Union{Project, Missing, Nothing}
    "\n  Find a project by project (beta) number.\n  "
    projectNext::Union{ProjectNext, Missing, Nothing}
    "\n  Find a project by number.\n  "
    projectV2::Union{ProjectV2, Missing, Nothing}
    "\n  A list of projects under the owner.\n  "
    projects::ProjectConnection
    "\n  A list of projects (beta) under the owner.\n  "
    projectsNext::ProjectNextConnection
    "\n  The HTTP path listing user's projects\n  "
    projectsResourcePath::URI
    "\n  The HTTP URL listing user's projects\n  "
    projectsUrl::URI
    "\n  A list of projects under the owner.\n  "
    projectsV2::ProjectV2Connection
    "\n  A list of public keys associated with this user.\n  "
    publicKeys::PublicKeyConnection
    "\n  A list of pull requests associated with this user.\n  "
    pullRequests::PullRequestConnection
    "\n  Recent projects that this user has modified in the context of the owner.\n  "
    recentProjects::ProjectV2Connection
    "\n  A list of repositories that the user owns.\n  "
    repositories::RepositoryConnection
    "\n  A list of repositories that the user recently contributed to.\n  "
    repositoriesContributedTo::RepositoryConnection
    "\n  Find Repository.\n  "
    repository::Union{Repository, Missing, Nothing}
    "\n  Discussion comments this user has authored.\n  "
    repositoryDiscussionComments::DiscussionCommentConnection
    "\n  Discussions this user has started.\n  "
    repositoryDiscussions::DiscussionConnection
    "\n  The HTTP path for this user\n  "
    resourcePath::URI
    "\n  Replies this user has saved\n  "
    savedReplies::Union{SavedReplyConnection, Missing, Nothing}
    "\n  List of users and organizations this entity is sponsoring.\n  "
    sponsoring::SponsorConnection
    "\n  List of sponsors for this user or organization.\n  "
    sponsors::SponsorConnection
    "\n  Events involving this sponsorable, such as new sponsorships.\n  "
    sponsorsActivities::SponsorsActivityConnection
    "\n  The GitHub Sponsors listing for this user or organization.\n  "
    sponsorsListing::Union{SponsorsListing, Missing, Nothing}
    "\n  The sponsorship from the viewer to this user/organization; that is, the\n  sponsorship where you're the sponsor. Only returns a sponsorship if it is active.\n  "
    sponsorshipForViewerAsSponsor::Union{Sponsorship, Missing, Nothing}
    "\n  The sponsorship from this user/organization to the viewer; that is, the\n  sponsorship you're receiving. Only returns a sponsorship if it is active.\n  "
    sponsorshipForViewerAsSponsorable::Union{Sponsorship, Missing, Nothing}
    "\n  List of sponsorship updates sent from this sponsorable to sponsors.\n  "
    sponsorshipNewsletters::SponsorshipNewsletterConnection
    "\n  This object's sponsorships as the maintainer.\n  "
    sponsorshipsAsMaintainer::SponsorshipConnection
    "\n  This object's sponsorships as the sponsor.\n  "
    sponsorshipsAsSponsor::SponsorshipConnection
    "\n  Repositories the user has starred.\n  "
    starredRepositories::StarredRepositoryConnection
    "\n  The user's description of what they're currently doing.\n  "
    status::Union{UserStatus, Missing, Nothing}
    "\n  Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created\n  "
    topRepositories::RepositoryConnection
    "\n  The user's Twitter username.\n  "
    twitterUsername::Union{String, Missing, Nothing}
    "\n  Identifies the date and time when the object was last updated.\n  "
    updatedAt::DateTime
    "\n  The HTTP URL for this user\n  "
    url::URI
    "\n  Can the viewer pin repositories and gists to the profile?\n  "
    viewerCanChangePinnedItems::Bool
    "\n  Can the current viewer create new projects on this owner.\n  "
    viewerCanCreateProjects::Bool
    "\n  Whether or not the viewer is able to follow the user.\n  "
    viewerCanFollow::Bool
    "\n  Whether or not the viewer is able to sponsor this user/organization.\n  "
    viewerCanSponsor::Bool
    "\n  Whether or not this user is followed by the viewer. Inverse of is_following_viewer.\n  "
    viewerIsFollowing::Bool
    "\n  True if the viewer is sponsoring this user/organization.\n  "
    viewerIsSponsoring::Bool
    "\n  A list of repositories the given user is watching.\n  "
    watching::RepositoryConnection
    "\n  A URL pointing to the user's public website/blog.\n  "
    websiteUrl::Union{URI, Missing, Nothing}
end
function User(; anyPinnableItems, avatarUrl, bio = nothing, bioHTML, canReceiveOrganizationEmailsWhenNotificationsRestricted, commitComments, company = nothing, companyHTML, contributionsCollection, createdAt, databaseId = nothing, email, estimatedNextSponsorsPayoutInCents, followers, following, gist = nothing, gistComments, gists, hasSponsorsListing, hovercard, id, interactionAbility = nothing, isBountyHunter, isCampusExpert, isDeveloperProgramMember, isEmployee, isFollowingViewer, isGitHubStar, isHireable, isSiteAdmin, isSponsoredBy, isSponsoringViewer, isViewer, issueComments, issues, itemShowcase, location = nothing, login, monthlyEstimatedSponsorsIncomeInCents, name = nothing, organization = nothing, organizationVerifiedDomainEmails, organizations, packages, pinnableItems, pinnedItems, pinnedItemsRemaining, project = nothing, projectNext = nothing, projectV2 = nothing, projects, projectsNext, projectsResourcePath, projectsUrl, projectsV2, publicKeys, pullRequests, recentProjects, repositories, repositoriesContributedTo, repository = nothing, repositoryDiscussionComments, repositoryDiscussions, resourcePath, savedReplies = nothing, sponsoring, sponsors, sponsorsActivities, sponsorsListing = nothing, sponsorshipForViewerAsSponsor = nothing, sponsorshipForViewerAsSponsorable = nothing, sponsorshipNewsletters, sponsorshipsAsMaintainer, sponsorshipsAsSponsor, starredRepositories, status = nothing, topRepositories, twitterUsername = nothing, updatedAt, url, viewerCanChangePinnedItems, viewerCanCreateProjects, viewerCanFollow, viewerCanSponsor, viewerIsFollowing, viewerIsSponsoring, watching, websiteUrl = nothing)
    User(anyPinnableItems, avatarUrl, bio, bioHTML, canReceiveOrganizationEmailsWhenNotificationsRestricted, commitComments, company, companyHTML, contributionsCollection, createdAt, databaseId, email, estimatedNextSponsorsPayoutInCents, followers, following, gist, gistComments, gists, hasSponsorsListing, hovercard, id, interactionAbility, isBountyHunter, isCampusExpert, isDeveloperProgramMember, isEmployee, isFollowingViewer, isGitHubStar, isHireable, isSiteAdmin, isSponsoredBy, isSponsoringViewer, isViewer, issueComments, issues, itemShowcase, location, login, monthlyEstimatedSponsorsIncomeInCents, name, organization, organizationVerifiedDomainEmails, organizations, packages, pinnableItems, pinnedItems, pinnedItemsRemaining, project, projectNext, projectV2, projects, projectsNext, projectsResourcePath, projectsUrl, projectsV2, publicKeys, pullRequests, recentProjects, repositories, repositoriesContributedTo, repository, repositoryDiscussionComments, repositoryDiscussions, resourcePath, savedReplies, sponsoring, sponsors, sponsorsActivities, sponsorsListing, sponsorshipForViewerAsSponsor, sponsorshipForViewerAsSponsorable, sponsorshipNewsletters, sponsorshipsAsMaintainer, sponsorshipsAsSponsor, starredRepositories, status, topRepositories, twitterUsername, updatedAt, url, viewerCanChangePinnedItems, viewerCanCreateProjects, viewerCanFollow, viewerCanSponsor, viewerIsFollowing, viewerIsSponsoring, watching, websiteUrl)
end

Core.@doc "Types which can be actors for `BranchActorAllowance` objects." const BranchActorAllowanceActor = Union{App, Team, User}

"""
A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
"""
mutable struct BypassForcePushAllowance <: OfficialGithubSchema
    "\n  The actor that can force push.\n  "
    actor::Union{BranchActorAllowanceActor, Missing, Nothing}
    branchProtectionRule
    id::String
end
function BypassForcePushAllowance(; actor = nothing, branchProtectionRule = nothing, id)
    BypassForcePushAllowance(actor, branchProtectionRule, id)
end
function Base.getproperty(t::BypassForcePushAllowance, sym::Symbol)
    if sym === Symbol("branchProtectionRule")
        getfield(t, Symbol("branchProtectionRule"))::Union{BranchProtectionRule, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::BypassForcePushAllowance, sym::Symbol, val::Any)
    if sym === Symbol("branchProtectionRule")
        setfield!(t, Symbol("branchProtectionRule"), val::Union{BranchProtectionRule, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct BypassForcePushAllowanceEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{BypassForcePushAllowance, Missing, Nothing}
end
function BypassForcePushAllowanceEdge(; cursor, node = nothing)
    BypassForcePushAllowanceEdge(cursor, node)
end

"""
The connection type for BypassForcePushAllowance.
"""
mutable struct BypassForcePushAllowanceConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{BypassForcePushAllowanceEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{BypassForcePushAllowance, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function BypassForcePushAllowanceConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    BypassForcePushAllowanceConnection(edges, nodes, pageInfo, totalCount)
end

"""
Represents a required status check for a protected branch, but not any specific run of that check.
"""
mutable struct RequiredStatusCheckDescription <: OfficialGithubSchema
    "\n  The App that must provide this status in order for it to be accepted.\n  "
    app::Union{App, Missing, Nothing}
    "\n  The name of this status.\n  "
    context::String
end
function RequiredStatusCheckDescription(; app = nothing, context)
    RequiredStatusCheckDescription(app, context)
end

"""
A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
"""
mutable struct BypassPullRequestAllowance <: OfficialGithubSchema
    "\n  The actor that can bypass.\n  "
    actor::Union{BranchActorAllowanceActor, Missing, Nothing}
    branchProtectionRule
    id::String
end
function BypassPullRequestAllowance(; actor = nothing, branchProtectionRule = nothing, id)
    BypassPullRequestAllowance(actor, branchProtectionRule, id)
end
function Base.getproperty(t::BypassPullRequestAllowance, sym::Symbol)
    if sym === Symbol("branchProtectionRule")
        getfield(t, Symbol("branchProtectionRule"))::Union{BranchProtectionRule, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::BypassPullRequestAllowance, sym::Symbol, val::Any)
    if sym === Symbol("branchProtectionRule")
        setfield!(t, Symbol("branchProtectionRule"), val::Union{BranchProtectionRule, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct BypassPullRequestAllowanceEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{BypassPullRequestAllowance, Missing, Nothing}
end
function BypassPullRequestAllowanceEdge(; cursor, node = nothing)
    BypassPullRequestAllowanceEdge(cursor, node)
end

"""
The connection type for BypassPullRequestAllowance.
"""
mutable struct BypassPullRequestAllowanceConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{BypassPullRequestAllowanceEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{BypassPullRequestAllowance, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function BypassPullRequestAllowanceConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    BypassPullRequestAllowanceConnection(edges, nodes, pageInfo, totalCount)
end

Core.@doc "Types that can be an actor." const PushAllowanceActor = Union{App, Team, User}

"""
A team, user, or app who has the ability to push to a protected branch.
"""
mutable struct PushAllowance <: OfficialGithubSchema
    "\n  The actor that can push.\n  "
    actor::Union{PushAllowanceActor, Missing, Nothing}
    branchProtectionRule
    id::String
end
function PushAllowance(; actor = nothing, branchProtectionRule = nothing, id)
    PushAllowance(actor, branchProtectionRule, id)
end
function Base.getproperty(t::PushAllowance, sym::Symbol)
    if sym === Symbol("branchProtectionRule")
        getfield(t, Symbol("branchProtectionRule"))::Union{BranchProtectionRule, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::PushAllowance, sym::Symbol, val::Any)
    if sym === Symbol("branchProtectionRule")
        setfield!(t, Symbol("branchProtectionRule"), val::Union{BranchProtectionRule, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct PushAllowanceEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{PushAllowance, Missing, Nothing}
end
function PushAllowanceEdge(; cursor, node = nothing)
    PushAllowanceEdge(cursor, node)
end

"""
The connection type for PushAllowance.
"""
mutable struct PushAllowanceConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{PushAllowanceEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{PushAllowance, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function PushAllowanceConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    PushAllowanceConnection(edges, nodes, pageInfo, totalCount)
end

Core.@doc "Types that can be an actor." const ReviewDismissalAllowanceActor = Union{App, Team, User}

"""
A user, team, or app who has the ability to dismiss a review on a protected branch.
"""
mutable struct ReviewDismissalAllowance <: OfficialGithubSchema
    "\n  The actor that can dismiss.\n  "
    actor::Union{ReviewDismissalAllowanceActor, Missing, Nothing}
    branchProtectionRule
    id::String
end
function ReviewDismissalAllowance(; actor = nothing, branchProtectionRule = nothing, id)
    ReviewDismissalAllowance(actor, branchProtectionRule, id)
end
function Base.getproperty(t::ReviewDismissalAllowance, sym::Symbol)
    if sym === Symbol("branchProtectionRule")
        getfield(t, Symbol("branchProtectionRule"))::Union{BranchProtectionRule, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::ReviewDismissalAllowance, sym::Symbol, val::Any)
    if sym === Symbol("branchProtectionRule")
        setfield!(t, Symbol("branchProtectionRule"), val::Union{BranchProtectionRule, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct ReviewDismissalAllowanceEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{ReviewDismissalAllowance, Missing, Nothing}
end
function ReviewDismissalAllowanceEdge(; cursor, node = nothing)
    ReviewDismissalAllowanceEdge(cursor, node)
end

"""
The connection type for ReviewDismissalAllowance.
"""
mutable struct ReviewDismissalAllowanceConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{ReviewDismissalAllowanceEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{ReviewDismissalAllowance, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function ReviewDismissalAllowanceConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    ReviewDismissalAllowanceConnection(edges, nodes, pageInfo, totalCount)
end

"""
A conflict between two branch protection rules.
"""
mutable struct BranchProtectionRuleConflict <: OfficialGithubSchema
    branchProtectionRule
    conflictingBranchProtectionRule
    "\n  Identifies the branch ref that has conflicting rules\n  "
    ref::Union{Ref, Missing, Nothing}
end
function BranchProtectionRuleConflict(; branchProtectionRule = nothing, conflictingBranchProtectionRule = nothing, ref = nothing)
    BranchProtectionRuleConflict(branchProtectionRule, conflictingBranchProtectionRule, ref)
end
function Base.getproperty(t::BranchProtectionRuleConflict, sym::Symbol)
    if sym === Symbol("branchProtectionRule")
        getfield(t, Symbol("branchProtectionRule"))::Union{BranchProtectionRule, Missing, Nothing}
    elseif sym === Symbol("conflictingBranchProtectionRule")
        getfield(t, Symbol("conflictingBranchProtectionRule"))::Union{BranchProtectionRule, Missing, Nothing}
    else
        getfield(t, sym)
    end
end
function Base.setproperty!(t::BranchProtectionRuleConflict, sym::Symbol, val::Any)
    if sym === Symbol("branchProtectionRule")
        setfield!(t, Symbol("branchProtectionRule"), val::Union{BranchProtectionRule, Missing, Nothing})
    elseif sym === Symbol("conflictingBranchProtectionRule")
        setfield!(t, Symbol("conflictingBranchProtectionRule"), val::Union{BranchProtectionRule, Missing, Nothing})
    else
        setfield!(t, sym, val)
    end
end

"""
An edge in a connection.
"""
mutable struct BranchProtectionRuleConflictEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{BranchProtectionRuleConflict, Missing, Nothing}
end
function BranchProtectionRuleConflictEdge(; cursor, node = nothing)
    BranchProtectionRuleConflictEdge(cursor, node)
end

"""
The connection type for BranchProtectionRuleConflict.
"""
mutable struct BranchProtectionRuleConflictConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{BranchProtectionRuleConflictEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{BranchProtectionRuleConflict, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function BranchProtectionRuleConflictConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    BranchProtectionRuleConflictConnection(edges, nodes, pageInfo, totalCount)
end

"""
A branch protection rule.
"""
mutable struct BranchProtectionRule <: OfficialGithubSchema
    "\n  Can this branch be deleted.\n  "
    allowsDeletions::Bool
    "\n  Are force pushes allowed on this branch.\n  "
    allowsForcePushes::Bool
    "\n  Is branch creation a protected operation.\n  "
    blocksCreations::Bool
    "\n  A list of conflicts matching branches protection rule and other branch protection rules\n  "
    branchProtectionRuleConflicts::BranchProtectionRuleConflictConnection
    "\n  A list of actors able to force push for this branch protection rule.\n  "
    bypassForcePushAllowances::BypassForcePushAllowanceConnection
    "\n  A list of actors able to bypass PRs for this branch protection rule.\n  "
    bypassPullRequestAllowances::BypassPullRequestAllowanceConnection
    "\n  The actor who created this branch protection rule.\n  "
    creator::Union{Actor, Missing, Nothing}
    "\n  Identifies the primary key from the database.\n  "
    databaseId::Union{Int, Missing, Nothing}
    "\n  Will new commits pushed to matching branches dismiss pull request review approvals.\n  "
    dismissesStaleReviews::Bool
    id::String
    "\n  Can admins overwrite branch protection.\n  "
    isAdminEnforced::Bool
    "\n  Whether users can pull changes from upstream when the branch is locked. Set to\n  `true` to allow fork syncing. Set to `false` to prevent fork syncing.\n  "
    lockAllowsFetchAndMerge::Bool
    "\n  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.\n  "
    lockBranch::Bool
    "\n  Repository refs that are protected by this rule\n  "
    matchingRefs::RefConnection
    "\n  Identifies the protection rule pattern.\n  "
    pattern::String
    "\n  A list push allowances for this branch protection rule.\n  "
    pushAllowances::PushAllowanceConnection
    "\n  The repository associated with this branch protection rule.\n  "
    repository::Union{Repository, Missing, Nothing}
    "\n  Whether the most recent push must be approved by someone other than the person who pushed it\n  "
    requireLastPushApproval::Bool
    "\n  Number of approving reviews required to update matching branches.\n  "
    requiredApprovingReviewCount::Union{Int, Missing, Nothing}
    "\n  List of required status check contexts that must pass for commits to be accepted to matching branches.\n  "
    requiredStatusCheckContexts::Union{Vector{Union{String, Missing, Nothing}}, Missing, Nothing}
    "\n  List of required status checks that must pass for commits to be accepted to matching branches.\n  "
    requiredStatusChecks::Union{Vector{RequiredStatusCheckDescription}, Missing, Nothing}
    "\n  Are approving reviews required to update matching branches.\n  "
    requiresApprovingReviews::Bool
    "\n  Are reviews from code owners required to update matching branches.\n  "
    requiresCodeOwnerReviews::Bool
    "\n  Are commits required to be signed.\n  "
    requiresCommitSignatures::Bool
    "\n  Are conversations required to be resolved before merging.\n  "
    requiresConversationResolution::Bool
    "\n  Are merge commits prohibited from being pushed to this branch.\n  "
    requiresLinearHistory::Bool
    "\n  Are status checks required to update matching branches.\n  "
    requiresStatusChecks::Bool
    "\n  Are branches required to be up to date before merging.\n  "
    requiresStrictStatusChecks::Bool
    "\n  Is pushing to matching branches restricted.\n  "
    restrictsPushes::Bool
    "\n  Is dismissal of pull request reviews restricted.\n  "
    restrictsReviewDismissals::Bool
    "\n  A list review dismissal allowances for this branch protection rule.\n  "
    reviewDismissalAllowances::ReviewDismissalAllowanceConnection
end
function BranchProtectionRule(; allowsDeletions, allowsForcePushes, blocksCreations, branchProtectionRuleConflicts, bypassForcePushAllowances, bypassPullRequestAllowances, creator = nothing, databaseId = nothing, dismissesStaleReviews, id, isAdminEnforced, lockAllowsFetchAndMerge, lockBranch, matchingRefs, pattern, pushAllowances, repository = nothing, requireLastPushApproval, requiredApprovingReviewCount = nothing, requiredStatusCheckContexts = nothing, requiredStatusChecks = nothing, requiresApprovingReviews, requiresCodeOwnerReviews, requiresCommitSignatures, requiresConversationResolution, requiresLinearHistory, requiresStatusChecks, requiresStrictStatusChecks, restrictsPushes, restrictsReviewDismissals, reviewDismissalAllowances)
    BranchProtectionRule(allowsDeletions, allowsForcePushes, blocksCreations, branchProtectionRuleConflicts, bypassForcePushAllowances, bypassPullRequestAllowances, creator, databaseId, dismissesStaleReviews, id, isAdminEnforced, lockAllowsFetchAndMerge, lockBranch, matchingRefs, pattern, pushAllowances, repository, requireLastPushApproval, requiredApprovingReviewCount, requiredStatusCheckContexts, requiredStatusChecks, requiresApprovingReviews, requiresCodeOwnerReviews, requiresCommitSignatures, requiresConversationResolution, requiresLinearHistory, requiresStatusChecks, requiresStrictStatusChecks, restrictsPushes, restrictsReviewDismissals, reviewDismissalAllowances)
end

"""
Autogenerated return type of CreateBranchProtectionRule
"""
mutable struct CreateBranchProtectionRulePayload <: OfficialGithubSchema
    "\n  The newly created BranchProtectionRule.\n  "
    branchProtectionRule::Union{BranchProtectionRule, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function CreateBranchProtectionRulePayload(; branchProtectionRule = nothing, clientMutationId = nothing)
    CreateBranchProtectionRulePayload(branchProtectionRule, clientMutationId)
end

"""
Ordering options for Audit Log connections.
"""
mutable struct AuditLogOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::Union{OrderDirection.T, Missing, Nothing}
    "\n  The field to order Audit Logs by.\n  "
    field::Union{AuditLogOrderField.T, Missing, Nothing}
end
function AuditLogOrder(; direction = nothing, field = nothing)
    AuditLogOrder(direction, field)
end

"""
Ways in which lists of package files can be ordered upon return.
"""
mutable struct PackageFileOrder <: OfficialGithubSchema
    "\n  The direction in which to order package files by the specified field.\n  "
    direction::Union{OrderDirection.T, Missing, Nothing}
    "\n  The field in which to order package files by.\n  "
    field::Union{PackageFileOrderField.T, Missing, Nothing}
end
function PackageFileOrder(; direction = nothing, field = nothing)
    PackageFileOrder(direction, field)
end

"""
Autogenerated return type of LinkProjectV2ToRepository
"""
mutable struct LinkProjectV2ToRepositoryPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The repository the project is linked to.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function LinkProjectV2ToRepositoryPayload(; clientMutationId = nothing, repository = nothing)
    LinkProjectV2ToRepositoryPayload(clientMutationId, repository)
end

"""
Autogenerated return type of DeleteProjectColumn
"""
mutable struct DeleteProjectColumnPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The deleted column ID.\n  "
    deletedColumnId::Union{String, Missing, Nothing}
    "\n  The project the deleted column was in.\n  "
    project::Union{Project, Missing, Nothing}
end
function DeleteProjectColumnPayload(; clientMutationId = nothing, deletedColumnId = nothing, project = nothing)
    DeleteProjectColumnPayload(clientMutationId, deletedColumnId, project)
end

"""
A git ref for a commit to be appended to.

The ref must be a branch, i.e. its fully qualified name must start
with `refs/heads/` (although the input is not required to be fully
qualified).

The Ref may be specified by its global node ID or by the
`repositoryNameWithOwner` and `branchName`.

### Examples

Specify a branch using a global node ID:

    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    }
"""
mutable struct CommittableBranch <: OfficialGithubSchema
    "\n  The unqualified name of the branch to append the commit to.\n  "
    branchName::Union{String, Missing, Nothing}
    "\n  The Node ID of the Ref to be updated.\n  "
    id::Union{String, Missing, Nothing}
    "\n  The nameWithOwner of the repository to commit to.\n  "
    repositoryNameWithOwner::Union{String, Missing, Nothing}
end
function CommittableBranch(; branchName = nothing, id = nothing, repositoryNameWithOwner = nothing)
    CommittableBranch(branchName, id, repositoryNameWithOwner)
end

"""
Autogenerated return type of CloneTemplateRepository
"""
mutable struct CloneTemplateRepositoryPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new repository.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function CloneTemplateRepositoryPayload(; clientMutationId = nothing, repository = nothing)
    CloneTemplateRepositoryPayload(clientMutationId, repository)
end

"""
Autogenerated input type of ChangeUserStatus
"""
mutable struct ChangeUserStatusInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.\n  "
    emoji::Union{String, Missing, Nothing}
    "\n  If set, the user status will not be shown after this date.\n  "
    expiresAt::Union{DateTime, Missing, Nothing}
    "\n  Whether this status should indicate you are not fully available on GitHub, e.g., you are away.\n  "
    limitedAvailability::Union{Bool, Missing, Nothing}
    "\n  A short description of your current status.\n  "
    message::Union{String, Missing, Nothing}
    "\n  The ID of the organization whose members will be allowed to see the status. If\n  omitted, the status will be publicly visible.\n  "
    organizationId::Union{String, Missing, Nothing}
end
function ChangeUserStatusInput(; clientMutationId = nothing, emoji = nothing, expiresAt = nothing, limitedAvailability = false, message = nothing, organizationId = nothing)
    ChangeUserStatusInput(clientMutationId, emoji, expiresAt, limitedAvailability, message, organizationId)
end

"""
A public description of a Marketplace category.
"""
mutable struct MarketplaceCategory <: OfficialGithubSchema
    "\n  The category's description.\n  "
    description::Union{String, Missing, Nothing}
    "\n  The technical description of how apps listed in this category work with GitHub.\n  "
    howItWorks::Union{String, Missing, Nothing}
    id::String
    "\n  The category's name.\n  "
    name::String
    "\n  How many Marketplace listings have this as their primary category.\n  "
    primaryListingCount::Int
    "\n  The HTTP path for this Marketplace category.\n  "
    resourcePath::URI
    "\n  How many Marketplace listings have this as their secondary category.\n  "
    secondaryListingCount::Int
    "\n  The short name of the category used in its URL.\n  "
    slug::String
    "\n  The HTTP URL for this Marketplace category.\n  "
    url::URI
end
function MarketplaceCategory(; description = nothing, howItWorks = nothing, id, name, primaryListingCount, resourcePath, secondaryListingCount, slug, url)
    MarketplaceCategory(description, howItWorks, id, name, primaryListingCount, resourcePath, secondaryListingCount, slug, url)
end

"""
Ordering options for an organization's enterprise owner connections.
"""
mutable struct OrgEnterpriseOwnerOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order enterprise owners by.\n  "
    field::OrgEnterpriseOwnerOrderField.T
end
function OrgEnterpriseOwnerOrder(; direction, field)
    OrgEnterpriseOwnerOrder(direction, field)
end

"""
Autogenerated input type of DeleteLabel
"""
mutable struct DeleteLabelInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the label to be deleted.\n  "
    id::String
end
function DeleteLabelInput(; clientMutationId = nothing, id)
    DeleteLabelInput(clientMutationId, id)
end

"""
Autogenerated input type of CreateEnterpriseOrganization
"""
mutable struct CreateEnterpriseOrganizationInput <: OfficialGithubSchema
    "\n  The logins for the administrators of the new organization.\n  "
    adminLogins::Vector{String}
    "\n  The email used for sending billing receipts.\n  "
    billingEmail::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise owning the new organization.\n  "
    enterpriseId::String
    "\n  The login of the new organization.\n  "
    login::String
    "\n  The profile name of the new organization.\n  "
    profileName::String
end
function CreateEnterpriseOrganizationInput(; adminLogins, billingEmail, clientMutationId = nothing, enterpriseId, login, profileName)
    CreateEnterpriseOrganizationInput(adminLogins, billingEmail, clientMutationId, enterpriseId, login, profileName)
end

"""
Autogenerated input type of TransferEnterpriseOrganization
"""
mutable struct TransferEnterpriseOrganizationInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise where the organization should be transferred.\n  "
    destinationEnterpriseId::String
    "\n  The ID of the organization to transfer.\n  "
    organizationId::String
end
function TransferEnterpriseOrganizationInput(; clientMutationId = nothing, destinationEnterpriseId, organizationId)
    TransferEnterpriseOrganizationInput(clientMutationId, destinationEnterpriseId, organizationId)
end

"""
A threaded list of comments for a given pull request.
"""
mutable struct PullRequestThread <: OfficialGithubSchema
    "\n  A list of pull request comments associated with the thread.\n  "
    comments::PullRequestReviewCommentConnection
    "\n  The side of the diff on which this thread was placed.\n  "
    diffSide::DiffSide.T
    id::String
    "\n  Whether or not the thread has been collapsed (resolved)\n  "
    isCollapsed::Bool
    "\n  Indicates whether this thread was outdated by newer changes.\n  "
    isOutdated::Bool
    "\n  Whether this thread has been resolved\n  "
    isResolved::Bool
    "\n  The line in the file to which this thread refers\n  "
    line::Union{Int, Missing, Nothing}
    "\n  Identifies the pull request associated with this thread.\n  "
    pullRequest::PullRequest
    "\n  Identifies the repository associated with this thread.\n  "
    repository::Repository
    "\n  The user who resolved this thread\n  "
    resolvedBy::Union{User, Missing, Nothing}
    "\n  The side of the diff that the first line of the thread starts on (multi-line only)\n  "
    startDiffSide::Union{DiffSide.T, Missing, Nothing}
    "\n  The line of the first file diff in the thread.\n  "
    startLine::Union{Int, Missing, Nothing}
    "\n  Indicates whether the current viewer can reply to this thread.\n  "
    viewerCanReply::Bool
    "\n  Whether or not the viewer can resolve this thread\n  "
    viewerCanResolve::Bool
    "\n  Whether or not the viewer can unresolve this thread\n  "
    viewerCanUnresolve::Bool
end
function PullRequestThread(; comments, diffSide, id, isCollapsed, isOutdated, isResolved, line = nothing, pullRequest, repository, resolvedBy = nothing, startDiffSide = nothing, startLine = nothing, viewerCanReply, viewerCanResolve, viewerCanUnresolve)
    PullRequestThread(comments, diffSide, id, isCollapsed, isOutdated, isResolved, line, pullRequest, repository, resolvedBy, startDiffSide, startLine, viewerCanReply, viewerCanResolve, viewerCanUnresolve)
end

"""
Autogenerated return type of DeletePackageVersion
"""
mutable struct DeletePackageVersionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Whether or not the operation succeeded.\n  "
    success::Union{Bool, Missing, Nothing}
end
function DeletePackageVersionPayload(; clientMutationId = nothing, success = nothing)
    DeletePackageVersionPayload(clientMutationId, success)
end

"""
Autogenerated return type of ArchiveProjectV2Item
"""
mutable struct ArchiveProjectV2ItemPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The item archived from the project.\n  "
    item::Union{ProjectV2Item, Missing, Nothing}
end
function ArchiveProjectV2ItemPayload(; clientMutationId = nothing, item = nothing)
    ArchiveProjectV2ItemPayload(clientMutationId, item)
end

"""
Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
"""
mutable struct UpdateOrganizationWebCommitSignoffSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the organization on which to set the web commit signoff setting.\n  "
    organizationId::String
    "\n  Enable signoff on web-based commits for repositories in the organization?\n  "
    webCommitSignoffRequired::Bool
end
function UpdateOrganizationWebCommitSignoffSettingInput(; clientMutationId = nothing, organizationId, webCommitSignoffRequired)
    UpdateOrganizationWebCommitSignoffSettingInput(clientMutationId, organizationId, webCommitSignoffRequired)
end

"""
Autogenerated input type of UpdateProjectV2DraftIssue
"""
mutable struct UpdateProjectV2DraftIssueInput <: OfficialGithubSchema
    "\n  The IDs of the assignees of the draft issue.\n  "
    assigneeIds::Union{Vector{String}, Missing, Nothing}
    "\n  The body of the draft issue.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the draft issue to update.\n  "
    draftIssueId::String
    "\n  The title of the draft issue.\n  "
    title::Union{String, Missing, Nothing}
end
function UpdateProjectV2DraftIssueInput(; assigneeIds = nothing, body = nothing, clientMutationId = nothing, draftIssueId, title = nothing)
    UpdateProjectV2DraftIssueInput(assigneeIds, body, clientMutationId, draftIssueId, title)
end

"""
A command to add a file at the given path with the given contents as part of a
commit.  Any existing file at that that path will be replaced.
"""
mutable struct FileAddition <: OfficialGithubSchema
    "\n  The base64 encoded contents of the file\n  "
    contents::Base64String
    "\n  The path in the repository where the file will be located\n  "
    path::String
end
function FileAddition(; contents, path)
    FileAddition(contents, path)
end

"""
A command to delete the file at the given path as part of a commit.
"""
mutable struct FileDeletion <: OfficialGithubSchema
    "\n  The path to delete\n  "
    path::String
end
function FileDeletion(; path)
    FileDeletion(path)
end

"""
A description of a set of changes to a file tree to be made as part of
a git commit, modeled as zero or more file `additions` and zero or more
file `deletions`.

Both fields are optional; omitting both will produce a commit with no
file changes.

`deletions` and `additions` describe changes to files identified
by their path in the git tree using unix-style path separators, i.e.
`/`.  The root of a git tree is an empty string, so paths are not
slash-prefixed.

`path` values must be unique across all `additions` and `deletions`
provided.  Any duplication will result in a validation error.

### Encoding

File contents must be provided in full for each `FileAddition`.

The `contents` of a `FileAddition` must be encoded using RFC 4648
compliant base64, i.e. correct padding is required and no characters
outside the standard alphabet may be used.  Invalid base64
encoding will be rejected with a validation error.

The encoded contents may be binary.

For text files, no assumptions are made about the character encoding of
the file contents (after base64 decoding).  No charset transcoding or
line-ending normalization will be performed; it is the client's
responsibility to manage the character encoding of files they provide.
However, for maximum compatibility we recommend using UTF-8 encoding
and ensuring that all files in a repository use a consistent
line-ending convention (`\n` or `\r\n`), and that all files end
with a newline.

### Modeling file changes

Each of the the five types of conceptual changes that can be made in a
git commit can be described using the `FileChanges` type as follows:

1. New file addition: create file `hello world\n` at path `docs/README.txt`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }

2. Existing file modification: change existing `docs/README.txt` to have new
   content `new content here\n`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("new content here\n")
           }
         ]
       }

3. Existing file deletion: remove existing file `docs/README.txt`.
   Note that the path is required to exist -- specifying a
   path that does not exist on the given branch will abort the
   commit and return an error.

       {
         "deletions" [
           {
             "path": "docs/README.txt"
           }
         ]
       }


4. File rename with no changes: rename `docs/README.txt` with
   previous content `hello world\n` to the same content at
   `newdocs/README.txt`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }


5. File rename with changes: rename `docs/README.txt` with
   previous content `hello world\n` to a file at path
   `newdocs/README.txt` with content `new contents\n`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("new contents\n")
           }
         ]
       }
"""
mutable struct FileChanges <: OfficialGithubSchema
    "\n  File to add or change.\n  "
    additions::Union{Vector{FileAddition}, Missing, Nothing}
    "\n  Files to delete.\n  "
    deletions::Union{Vector{FileDeletion}, Missing, Nothing}
end
function FileChanges(; additions = nothing, deletions = nothing)
    FileChanges(additions, deletions)
end

"""
A message to include with a new commit
"""
mutable struct CommitMessage <: OfficialGithubSchema
    "\n  The body of the message.\n  "
    body::Union{String, Missing, Nothing}
    "\n  The headline of the message.\n  "
    headline::String
end
function CommitMessage(; body = nothing, headline)
    CommitMessage(body, headline)
end

"""
Autogenerated input type of CreateCommitOnBranch
"""
mutable struct CreateCommitOnBranchInput <: OfficialGithubSchema
    "\n  The Ref to be updated.  Must be a branch.\n  "
    branch::CommittableBranch
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The git commit oid expected at the head of the branch prior to the commit\n  "
    expectedHeadOid::GitObjectID
    "\n  A description of changes to files in this commit.\n  "
    fileChanges::Union{FileChanges, Missing, Nothing}
    "\n  The commit message the be included with the commit.\n  "
    message::CommitMessage
end
function CreateCommitOnBranchInput(; branch, clientMutationId = nothing, expectedHeadOid, fileChanges = nothing, message)
    CreateCommitOnBranchInput(branch, clientMutationId, expectedHeadOid, fileChanges, message)
end

"""
Autogenerated input type of UnlockLockable
"""
mutable struct UnlockLockableInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the item to be unlocked.\n  "
    lockableId::String
end
function UnlockLockableInput(; clientMutationId = nothing, lockableId)
    UnlockLockableInput(clientMutationId, lockableId)
end

"""
Autogenerated return type of AddPullRequestReviewComment
"""
mutable struct AddPullRequestReviewCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The newly created comment.\n  "
    comment::Union{PullRequestReviewComment, Missing, Nothing}
    "\n  The edge from the review's comment connection.\n  "
    commentEdge::Union{PullRequestReviewCommentEdge, Missing, Nothing}
end
function AddPullRequestReviewCommentPayload(; clientMutationId = nothing, comment = nothing, commentEdge = nothing)
    AddPullRequestReviewCommentPayload(clientMutationId, comment, commentEdge)
end

"""
Autogenerated return type of UpdateCheckRun
"""
mutable struct UpdateCheckRunPayload <: OfficialGithubSchema
    "\n  The updated check run.\n  "
    checkRun::Union{CheckRun, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function UpdateCheckRunPayload(; checkRun = nothing, clientMutationId = nothing)
    UpdateCheckRunPayload(checkRun, clientMutationId)
end

"""
Autogenerated return type of CreateRef
"""
mutable struct CreateRefPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The newly created ref.\n  "
    ref::Union{Ref, Missing, Nothing}
end
function CreateRefPayload(; clientMutationId = nothing, ref = nothing)
    CreateRefPayload(clientMutationId, ref)
end

"""
Autogenerated return type of AddPullRequestReview
"""
mutable struct AddPullRequestReviewPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The newly created pull request review.\n  "
    pullRequestReview::Union{PullRequestReview, Missing, Nothing}
    "\n  The edge from the pull request's review connection.\n  "
    reviewEdge::Union{PullRequestReviewEdge, Missing, Nothing}
end
function AddPullRequestReviewPayload(; clientMutationId = nothing, pullRequestReview = nothing, reviewEdge = nothing)
    AddPullRequestReviewPayload(clientMutationId, pullRequestReview, reviewEdge)
end

"""
Autogenerated return type of UpdateIssue
"""
mutable struct UpdateIssuePayload <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The issue.\n  "
    issue::Union{Issue, Missing, Nothing}
end
function UpdateIssuePayload(; actor = nothing, clientMutationId = nothing, issue = nothing)
    UpdateIssuePayload(actor, clientMutationId, issue)
end

"""
Autogenerated return type of LockLockable
"""
mutable struct LockLockablePayload <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The item that was locked.\n  "
    lockedRecord::Union{Lockable, Missing, Nothing}
end
function LockLockablePayload(; actor = nothing, clientMutationId = nothing, lockedRecord = nothing)
    LockLockablePayload(actor, clientMutationId, lockedRecord)
end

"""
Autogenerated input type of UpdateSubscription
"""
mutable struct UpdateSubscriptionInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new state of the subscription.\n  "
    state::SubscriptionState.T
    "\n  The Node ID of the subscribable object to modify.\n  "
    subscribableId::String
end
function UpdateSubscriptionInput(; clientMutationId = nothing, state, subscribableId)
    UpdateSubscriptionInput(clientMutationId, state, subscribableId)
end

"""
Autogenerated return type of AddProjectNextItem
"""
mutable struct AddProjectNextItemPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The item added to the project.\n  "
    projectNextItem::Union{ProjectNextItem, Missing, Nothing}
end
function AddProjectNextItemPayload(; clientMutationId = nothing, projectNextItem = nothing)
    AddProjectNextItemPayload(clientMutationId, projectNextItem)
end

"""
Autogenerated input type of DeleteProject
"""
mutable struct DeleteProjectInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Project ID to update.\n  "
    projectId::String
end
function DeleteProjectInput(; clientMutationId = nothing, projectId)
    DeleteProjectInput(clientMutationId, projectId)
end

"""
Autogenerated return type of AddDiscussionPollVote
"""
mutable struct AddDiscussionPollVotePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The poll option that a vote was added to.\n  "
    pollOption::Union{DiscussionPollOption, Missing, Nothing}
end
function AddDiscussionPollVotePayload(; clientMutationId = nothing, pollOption = nothing)
    AddDiscussionPollVotePayload(clientMutationId, pollOption)
end

"""
Autogenerated input type of UpdateRef
"""
mutable struct UpdateRefInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Permit updates of branch Refs that are not fast-forwards?\n  "
    force::Union{Bool, Missing, Nothing}
    "\n  The GitObjectID that the Ref shall be updated to target.\n  "
    oid::GitObjectID
    "\n  The Node ID of the Ref to be updated.\n  "
    refId::String
end
function UpdateRefInput(; clientMutationId = nothing, force = false, oid, refId)
    UpdateRefInput(clientMutationId, force, oid, refId)
end

"""
Autogenerated input type of RemoveOutsideCollaborator
"""
mutable struct RemoveOutsideCollaboratorInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the organization to remove the outside collaborator from.\n  "
    organizationId::String
    "\n  The ID of the outside collaborator to remove.\n  "
    userId::String
end
function RemoveOutsideCollaboratorInput(; clientMutationId = nothing, organizationId, userId)
    RemoveOutsideCollaboratorInput(clientMutationId, organizationId, userId)
end

"""
An issue or PR and its owning repository to be used in a project card.
"""
mutable struct ProjectCardImport <: OfficialGithubSchema
    "\n  The issue or pull request number.\n  "
    number::Int
    "\n  Repository name with owner (owner/repository).\n  "
    repository::String
end
function ProjectCardImport(; number, repository)
    ProjectCardImport(number, repository)
end

"""
Ordering options for project v2 field connections
"""
mutable struct ProjectV2FieldOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order the project v2 fields by.\n  "
    field::ProjectV2FieldOrderField.T
end
function ProjectV2FieldOrder(; direction, field)
    ProjectV2FieldOrder(direction, field)
end

"""
Ways in which team connections can be ordered.
"""
mutable struct TeamOrder <: OfficialGithubSchema
    "\n  The direction in which to order nodes.\n  "
    direction::OrderDirection.T
    "\n  The field in which to order nodes by.\n  "
    field::TeamOrderField.T
end
function TeamOrder(; direction, field)
    TeamOrder(direction, field)
end

"""
Ordering options for milestone connections.
"""
mutable struct MilestoneOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order milestones by.\n  "
    field::MilestoneOrderField.T
end
function MilestoneOrder(; direction, field)
    MilestoneOrder(direction, field)
end

Core.@doc "Entities that can be sponsored via GitHub Sponsors" const SponsorableItem = Union{Organization, User}

"""
An edge in a connection.
"""
mutable struct SponsorableItemEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{SponsorableItem, Missing, Nothing}
end
function SponsorableItemEdge(; cursor, node = nothing)
    SponsorableItemEdge(cursor, node)
end

"""
Autogenerated input type of CloseIssue
"""
mutable struct CloseIssueInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the issue to be closed.\n  "
    issueId::String
    "\n  The reason the issue is to be closed.\n  "
    stateReason::Union{IssueClosedStateReason.T, Missing, Nothing}
end
function CloseIssueInput(; clientMutationId = nothing, issueId, stateReason = nothing)
    CloseIssueInput(clientMutationId, issueId, stateReason)
end

"""
Autogenerated input type of UpdateEnterpriseAdministratorRole
"""
mutable struct UpdateEnterpriseAdministratorRoleInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the Enterprise which the admin belongs to.\n  "
    enterpriseId::String
    "\n  The login of a administrator whose role is being changed.\n  "
    login::String
    "\n  The new role for the Enterprise administrator.\n  "
    role::EnterpriseAdministratorRole.T
end
function UpdateEnterpriseAdministratorRoleInput(; clientMutationId = nothing, enterpriseId, login, role)
    UpdateEnterpriseAdministratorRoleInput(clientMutationId, enterpriseId, login, role)
end

"""
Autogenerated input type of UpdatePullRequestReview
"""
mutable struct UpdatePullRequestReviewInput <: OfficialGithubSchema
    "\n  The contents of the pull request review body.\n  "
    body::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the pull request review to modify.\n  "
    pullRequestReviewId::String
end
function UpdatePullRequestReviewInput(; body, clientMutationId = nothing, pullRequestReviewId)
    UpdatePullRequestReviewInput(body, clientMutationId, pullRequestReviewId)
end

"""
Autogenerated return type of AcceptTopicSuggestion
"""
mutable struct AcceptTopicSuggestionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The accepted topic.\n  "
    topic::Union{Topic, Missing, Nothing}
end
function AcceptTopicSuggestionPayload(; clientMutationId = nothing, topic = nothing)
    AcceptTopicSuggestionPayload(clientMutationId, topic)
end

"""
Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
"""
mutable struct UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated two factor authentication required setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the two factor authentication required setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated input type of LinkProjectV2ToRepository
"""
mutable struct LinkProjectV2ToRepositoryInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the project to link to the repository.\n  "
    projectId::String
    "\n  The ID of the repository to link to the project.\n  "
    repositoryId::String
end
function LinkProjectV2ToRepositoryInput(; clientMutationId = nothing, projectId, repositoryId)
    LinkProjectV2ToRepositoryInput(clientMutationId, projectId, repositoryId)
end

"""
Autogenerated input type of AddEnterpriseSupportEntitlement
"""
mutable struct AddEnterpriseSupportEntitlementInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the Enterprise which the admin belongs to.\n  "
    enterpriseId::String
    "\n  The login of a member who will receive the support entitlement.\n  "
    login::String
end
function AddEnterpriseSupportEntitlementInput(; clientMutationId = nothing, enterpriseId, login)
    AddEnterpriseSupportEntitlementInput(clientMutationId, enterpriseId, login)
end

"""
Autogenerated input type of MarkDiscussionCommentAsAnswer
"""
mutable struct MarkDiscussionCommentAsAnswerInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the discussion comment to mark as an answer.\n  "
    id::String
end
function MarkDiscussionCommentAsAnswerInput(; clientMutationId = nothing, id)
    MarkDiscussionCommentAsAnswerInput(clientMutationId, id)
end

"""
Autogenerated input type of RegenerateVerifiableDomainToken
"""
mutable struct RegenerateVerifiableDomainTokenInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the verifiable domain to regenerate the verification token of.\n  "
    id::String
end
function RegenerateVerifiableDomainTokenInput(; clientMutationId = nothing, id)
    RegenerateVerifiableDomainTokenInput(clientMutationId, id)
end

"""
Autogenerated return type of VerifyVerifiableDomain
"""
mutable struct VerifyVerifiableDomainPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The verifiable domain that was verified.\n  "
    domain::Union{VerifiableDomain, Missing, Nothing}
end
function VerifyVerifiableDomainPayload(; clientMutationId = nothing, domain = nothing)
    VerifyVerifiableDomainPayload(clientMutationId, domain)
end

"""
Ordering options for deployment connections
"""
mutable struct DeploymentOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order deployments by.\n  "
    field::DeploymentOrderField.T
end
function DeploymentOrder(; direction, field)
    DeploymentOrder(direction, field)
end

"""
Autogenerated input type of UpdateIpAllowListEnabledSetting
"""
mutable struct UpdateIpAllowListEnabledSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the owner on which to set the IP allow list enabled setting.\n  "
    ownerId::String
    "\n  The value for the IP allow list enabled setting.\n  "
    settingValue::IpAllowListEnabledSettingValue.T
end
function UpdateIpAllowListEnabledSettingInput(; clientMutationId = nothing, ownerId, settingValue)
    UpdateIpAllowListEnabledSettingInput(clientMutationId, ownerId, settingValue)
end

"""
A project column and a list of its issues and PRs.
"""
mutable struct ProjectColumnImport <: OfficialGithubSchema
    "\n  The name of the column.\n  "
    columnName::String
    "\n  A list of issues and pull requests in the column.\n  "
    issues::Union{Vector{ProjectCardImport}, Missing, Nothing}
    "\n  The position of the column, starting from 0.\n  "
    position::Int
end
function ProjectColumnImport(; columnName, issues = nothing, position)
    ProjectColumnImport(columnName, issues, position)
end

"""
Autogenerated input type of ImportProject
"""
mutable struct ImportProjectInput <: OfficialGithubSchema
    "\n  The description of Project.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A list of columns containing issues and pull requests.\n  "
    columnImports::Vector{ProjectColumnImport}
    "\n  The name of Project.\n  "
    name::String
    "\n  The name of the Organization or User to create the Project under.\n  "
    ownerName::String
    "\n  Whether the Project is public or not.\n  "
    public::Union{Bool, Missing, Nothing}
end
function ImportProjectInput(; body = nothing, clientMutationId = nothing, columnImports, name, ownerName, public = false)
    ImportProjectInput(body, clientMutationId, columnImports, name, ownerName, public)
end

"""
Represents a single highlight in a search result match.
"""
mutable struct TextMatchHighlight <: OfficialGithubSchema
    "\n  The indice in the fragment where the matched text begins.\n  "
    beginIndice::Int
    "\n  The indice in the fragment where the matched text ends.\n  "
    endIndice::Int
    "\n  The text matched.\n  "
    text::String
end
function TextMatchHighlight(; beginIndice, endIndice, text)
    TextMatchHighlight(beginIndice, endIndice, text)
end

"""
A text match within a search result.
"""
mutable struct TextMatch <: OfficialGithubSchema
    "\n  The specific text fragment within the property matched on.\n  "
    fragment::String
    "\n  Highlights within the matched fragment.\n  "
    highlights::Vector{TextMatchHighlight}
    "\n  The property matched on.\n  "
    property::String
end
function TextMatch(; fragment, highlights, property)
    TextMatch(fragment, highlights, property)
end

"""
Autogenerated return type of RemoveReaction
"""
mutable struct RemoveReactionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The reaction object.\n  "
    reaction::Union{Reaction, Missing, Nothing}
    "\n  The reactable subject.\n  "
    subject::Union{Reactable, Missing, Nothing}
end
function RemoveReactionPayload(; clientMutationId = nothing, reaction = nothing, subject = nothing)
    RemoveReactionPayload(clientMutationId, reaction, subject)
end

"""
Autogenerated input type of DismissRepositoryVulnerabilityAlert
"""
mutable struct DismissRepositoryVulnerabilityAlertInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The reason the Dependabot alert is being dismissed.\n  "
    dismissReason::DismissReason.T
    "\n  The Dependabot alert ID to dismiss.\n  "
    repositoryVulnerabilityAlertId::String
end
function DismissRepositoryVulnerabilityAlertInput(; clientMutationId = nothing, dismissReason, repositoryVulnerabilityAlertId)
    DismissRepositoryVulnerabilityAlertInput(clientMutationId, dismissReason, repositoryVulnerabilityAlertId)
end

"""
Autogenerated input type of UpdatePullRequestReviewComment
"""
mutable struct UpdatePullRequestReviewCommentInput <: OfficialGithubSchema
    "\n  The text of the comment.\n  "
    body::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the comment to modify.\n  "
    pullRequestReviewCommentId::String
end
function UpdatePullRequestReviewCommentInput(; body, clientMutationId = nothing, pullRequestReviewCommentId)
    UpdatePullRequestReviewCommentInput(body, clientMutationId, pullRequestReviewCommentId)
end

"""
Autogenerated input type of DeleteTeamDiscussion
"""
mutable struct DeleteTeamDiscussionInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The discussion ID to delete.\n  "
    id::String
end
function DeleteTeamDiscussionInput(; clientMutationId = nothing, id)
    DeleteTeamDiscussionInput(clientMutationId, id)
end

"""
A listing in the GitHub integration marketplace.
"""
mutable struct MarketplaceListing <: OfficialGithubSchema
    "\n  The GitHub App this listing represents.\n  "
    app::Union{App, Missing, Nothing}
    "\n  URL to the listing owner's company site.\n  "
    companyUrl::Union{URI, Missing, Nothing}
    "\n  The HTTP path for configuring access to the listing's integration or OAuth app\n  "
    configurationResourcePath::URI
    "\n  The HTTP URL for configuring access to the listing's integration or OAuth app\n  "
    configurationUrl::URI
    "\n  URL to the listing's documentation.\n  "
    documentationUrl::Union{URI, Missing, Nothing}
    "\n  The listing's detailed description.\n  "
    extendedDescription::Union{String, Missing, Nothing}
    "\n  The listing's detailed description rendered to HTML.\n  "
    extendedDescriptionHTML::HTML
    "\n  The listing's introductory description.\n  "
    fullDescription::String
    "\n  The listing's introductory description rendered to HTML.\n  "
    fullDescriptionHTML::HTML
    "\n  Does this listing have any plans with a free trial?\n  "
    hasPublishedFreeTrialPlans::Bool
    "\n  Does this listing have a terms of service link?\n  "
    hasTermsOfService::Bool
    "\n  Whether the creator of the app is a verified org\n  "
    hasVerifiedOwner::Bool
    "\n  A technical description of how this app works with GitHub.\n  "
    howItWorks::Union{String, Missing, Nothing}
    "\n  The listing's technical description rendered to HTML.\n  "
    howItWorksHTML::HTML
    id::String
    "\n  URL to install the product to the viewer's account or organization.\n  "
    installationUrl::Union{URI, Missing, Nothing}
    "\n  Whether this listing's app has been installed for the current viewer\n  "
    installedForViewer::Bool
    "\n  Whether this listing has been removed from the Marketplace.\n  "
    isArchived::Bool
    "\n  Whether this listing is still an editable draft that has not been submitted\n  for review and is not publicly visible in the Marketplace.\n  "
    isDraft::Bool
    "\n  Whether the product this listing represents is available as part of a paid plan.\n  "
    isPaid::Bool
    "\n  Whether this listing has been approved for display in the Marketplace.\n  "
    isPublic::Bool
    "\n  Whether this listing has been rejected by GitHub for display in the Marketplace.\n  "
    isRejected::Bool
    "\n  Whether this listing has been approved for unverified display in the Marketplace.\n  "
    isUnverified::Bool
    "\n  Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.\n  "
    isUnverifiedPending::Bool
    "\n  Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.\n  "
    isVerificationPendingFromDraft::Bool
    "\n  Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.\n  "
    isVerificationPendingFromUnverified::Bool
    "\n  Whether this listing has been approved for verified display in the Marketplace.\n  "
    isVerified::Bool
    "\n  The hex color code, without the leading '#', for the logo background.\n  "
    logoBackgroundColor::String
    "\n  URL for the listing's logo image.\n  "
    logoUrl::Union{URI, Missing, Nothing}
    "\n  The listing's full name.\n  "
    name::String
    "\n  The listing's very short description without a trailing period or ampersands.\n  "
    normalizedShortDescription::String
    "\n  URL to the listing's detailed pricing.\n  "
    pricingUrl::Union{URI, Missing, Nothing}
    "\n  The category that best describes the listing.\n  "
    primaryCategory::MarketplaceCategory
    "\n  URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.\n  "
    privacyPolicyUrl::URI
    "\n  The HTTP path for the Marketplace listing.\n  "
    resourcePath::URI
    "\n  The URLs for the listing's screenshots.\n  "
    screenshotUrls::Vector{Union{String, Missing, Nothing}}
    "\n  An alternate category that describes the listing.\n  "
    secondaryCategory::Union{MarketplaceCategory, Missing, Nothing}
    "\n  The listing's very short description.\n  "
    shortDescription::String
    "\n  The short name of the listing used in its URL.\n  "
    slug::String
    "\n  URL to the listing's status page.\n  "
    statusUrl::Union{URI, Missing, Nothing}
    "\n  An email address for support for this listing's app.\n  "
    supportEmail::Union{String, Missing, Nothing}
    "\n  Either a URL or an email address for support for this listing's app, may\n  return an empty string for listings that do not require a support URL.\n  "
    supportUrl::URI
    "\n  URL to the listing's terms of service.\n  "
    termsOfServiceUrl::Union{URI, Missing, Nothing}
    "\n  The HTTP URL for the Marketplace listing.\n  "
    url::URI
    "\n  Can the current viewer add plans for this Marketplace listing.\n  "
    viewerCanAddPlans::Bool
    "\n  Can the current viewer approve this Marketplace listing.\n  "
    viewerCanApprove::Bool
    "\n  Can the current viewer delist this Marketplace listing.\n  "
    viewerCanDelist::Bool
    "\n  Can the current viewer edit this Marketplace listing.\n  "
    viewerCanEdit::Bool
    "\n  Can the current viewer edit the primary and secondary category of this\n  Marketplace listing.\n  "
    viewerCanEditCategories::Bool
    "\n  Can the current viewer edit the plans for this Marketplace listing.\n  "
    viewerCanEditPlans::Bool
    "\n  Can the current viewer return this Marketplace listing to draft state\n  so it becomes editable again.\n  "
    viewerCanRedraft::Bool
    "\n  Can the current viewer reject this Marketplace listing by returning it to\n  an editable draft state or rejecting it entirely.\n  "
    viewerCanReject::Bool
    "\n  Can the current viewer request this listing be reviewed for display in\n  the Marketplace as verified.\n  "
    viewerCanRequestApproval::Bool
    "\n  Indicates whether the current user has an active subscription to this Marketplace listing.\n  "
    viewerHasPurchased::Bool
    "\n  Indicates if the current user has purchased a subscription to this Marketplace listing\n  for all of the organizations the user owns.\n  "
    viewerHasPurchasedForAllOrganizations::Bool
    "\n  Does the current viewer role allow them to administer this Marketplace listing.\n  "
    viewerIsListingAdmin::Bool
end
function MarketplaceListing(; app = nothing, companyUrl = nothing, configurationResourcePath, configurationUrl, documentationUrl = nothing, extendedDescription = nothing, extendedDescriptionHTML, fullDescription, fullDescriptionHTML, hasPublishedFreeTrialPlans, hasTermsOfService, hasVerifiedOwner, howItWorks = nothing, howItWorksHTML, id, installationUrl = nothing, installedForViewer, isArchived, isDraft, isPaid, isPublic, isRejected, isUnverified, isUnverifiedPending, isVerificationPendingFromDraft, isVerificationPendingFromUnverified, isVerified, logoBackgroundColor, logoUrl = nothing, name, normalizedShortDescription, pricingUrl = nothing, primaryCategory, privacyPolicyUrl, resourcePath, screenshotUrls, secondaryCategory = nothing, shortDescription, slug, statusUrl = nothing, supportEmail = nothing, supportUrl, termsOfServiceUrl = nothing, url, viewerCanAddPlans, viewerCanApprove, viewerCanDelist, viewerCanEdit, viewerCanEditCategories, viewerCanEditPlans, viewerCanRedraft, viewerCanReject, viewerCanRequestApproval, viewerHasPurchased, viewerHasPurchasedForAllOrganizations, viewerIsListingAdmin)
    MarketplaceListing(app, companyUrl, configurationResourcePath, configurationUrl, documentationUrl, extendedDescription, extendedDescriptionHTML, fullDescription, fullDescriptionHTML, hasPublishedFreeTrialPlans, hasTermsOfService, hasVerifiedOwner, howItWorks, howItWorksHTML, id, installationUrl, installedForViewer, isArchived, isDraft, isPaid, isPublic, isRejected, isUnverified, isUnverifiedPending, isVerificationPendingFromDraft, isVerificationPendingFromUnverified, isVerified, logoBackgroundColor, logoUrl, name, normalizedShortDescription, pricingUrl, primaryCategory, privacyPolicyUrl, resourcePath, screenshotUrls, secondaryCategory, shortDescription, slug, statusUrl, supportEmail, supportUrl, termsOfServiceUrl, url, viewerCanAddPlans, viewerCanApprove, viewerCanDelist, viewerCanEdit, viewerCanEditCategories, viewerCanEditPlans, viewerCanRedraft, viewerCanReject, viewerCanRequestApproval, viewerHasPurchased, viewerHasPurchasedForAllOrganizations, viewerIsListingAdmin)
end

Core.@doc "The results of a search." const SearchResultItem = Union{App, Discussion, Issue, MarketplaceListing, Organization, PullRequest, Repository, User}

"""
An edge in a connection.
"""
mutable struct SearchResultItemEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{SearchResultItem, Missing, Nothing}
    "\n  Text matches on the result found.\n  "
    textMatches::Union{Vector{Union{TextMatch, Missing, Nothing}}, Missing, Nothing}
end
function SearchResultItemEdge(; cursor, node = nothing, textMatches = nothing)
    SearchResultItemEdge(cursor, node, textMatches)
end

"""
Ways in which lists of packages can be ordered upon return.
"""
mutable struct PackageOrder <: OfficialGithubSchema
    "\n  The direction in which to order packages by the specified field.\n  "
    direction::Union{OrderDirection.T, Missing, Nothing}
    "\n  The field in which to order packages by.\n  "
    field::Union{PackageOrderField.T, Missing, Nothing}
end
function PackageOrder(; direction = nothing, field = nothing)
    PackageOrder(direction, field)
end

"""
Autogenerated input type of DeletePullRequestReview
"""
mutable struct DeletePullRequestReviewInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the pull request review to delete.\n  "
    pullRequestReviewId::String
end
function DeletePullRequestReviewInput(; clientMutationId = nothing, pullRequestReviewId)
    DeletePullRequestReviewInput(clientMutationId, pullRequestReviewId)
end

"""
Autogenerated return type of ClosePullRequest
"""
mutable struct ClosePullRequestPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The pull request that was closed.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
end
function ClosePullRequestPayload(; clientMutationId = nothing, pullRequest = nothing)
    ClosePullRequestPayload(clientMutationId, pullRequest)
end

"""
Autogenerated input type of LinkRepositoryToProject
"""
mutable struct LinkRepositoryToProjectInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the Project to link to a Repository\n  "
    projectId::String
    "\n  The ID of the Repository to link to a Project.\n  "
    repositoryId::String
end
function LinkRepositoryToProjectInput(; clientMutationId = nothing, projectId, repositoryId)
    LinkRepositoryToProjectInput(clientMutationId, projectId, repositoryId)
end

"""
Autogenerated return type of CreateDeploymentStatus
"""
mutable struct CreateDeploymentStatusPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new deployment status.\n  "
    deploymentStatus::Union{DeploymentStatus, Missing, Nothing}
end
function CreateDeploymentStatusPayload(; clientMutationId = nothing, deploymentStatus = nothing)
    CreateDeploymentStatusPayload(clientMutationId, deploymentStatus)
end

"""
Autogenerated input type of CreateEnvironment
"""
mutable struct CreateEnvironmentInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The name of the environment.\n  "
    name::String
    "\n  The node ID of the repository.\n  "
    repositoryId::String
end
function CreateEnvironmentInput(; clientMutationId = nothing, name, repositoryId)
    CreateEnvironmentInput(clientMutationId, name, repositoryId)
end

"""
Autogenerated return type of MergeBranch
"""
mutable struct MergeBranchPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The resulting merge Commit.\n  "
    mergeCommit::Union{Commit, Missing, Nothing}
end
function MergeBranchPayload(; clientMutationId = nothing, mergeCommit = nothing)
    MergeBranchPayload(clientMutationId, mergeCommit)
end

"""
Autogenerated input type of UpdateTeamDiscussion
"""
mutable struct UpdateTeamDiscussionInput <: OfficialGithubSchema
    "\n  The updated text of the discussion.\n  "
    body::Union{String, Missing, Nothing}
    "\n  The current version of the body content. If provided, this update operation\n  will be rejected if the given version does not match the latest version on the server.\n  "
    bodyVersion::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the discussion to modify.\n  "
    id::String
    "\n  If provided, sets the pinned state of the updated discussion.\n  "
    pinned::Union{Bool, Missing, Nothing}
    "\n  The updated title of the discussion.\n  "
    title::Union{String, Missing, Nothing}
end
function UpdateTeamDiscussionInput(; body = nothing, bodyVersion = nothing, clientMutationId = nothing, id, pinned = nothing, title = nothing)
    UpdateTeamDiscussionInput(body, bodyVersion, clientMutationId, id, pinned, title)
end

"""
Autogenerated return type of UnarchiveProjectV2Item
"""
mutable struct UnarchiveProjectV2ItemPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The item unarchived from the project.\n  "
    item::Union{ProjectV2Item, Missing, Nothing}
end
function UnarchiveProjectV2ItemPayload(; clientMutationId = nothing, item = nothing)
    UnarchiveProjectV2ItemPayload(clientMutationId, item)
end

"""
Ordering options for sponsorship newsletter connections.
"""
mutable struct SponsorshipNewsletterOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order sponsorship newsletters by.\n  "
    field::SponsorshipNewsletterOrderField.T
end
function SponsorshipNewsletterOrder(; direction, field)
    SponsorshipNewsletterOrder(direction, field)
end

"""
Autogenerated return type of UnminimizeComment
"""
mutable struct UnminimizeCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The comment that was unminimized.\n  "
    unminimizedComment::Union{Minimizable, Missing, Nothing}
end
function UnminimizeCommentPayload(; clientMutationId = nothing, unminimizedComment = nothing)
    UnminimizeCommentPayload(clientMutationId, unminimizedComment)
end

"""
Autogenerated input type of AddEnterpriseOrganizationMember
"""
mutable struct AddEnterpriseOrganizationMemberInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise which owns the organization.\n  "
    enterpriseId::String
    "\n  The ID of the organization the users will be added to.\n  "
    organizationId::String
    "\n  The role to assign the users in the organization\n  "
    role::Union{OrganizationMemberRole.T, Missing, Nothing}
    "\n  The IDs of the enterprise members to add.\n  "
    userIds::Vector{String}
end
function AddEnterpriseOrganizationMemberInput(; clientMutationId = nothing, enterpriseId, organizationId, role = nothing, userIds)
    AddEnterpriseOrganizationMemberInput(clientMutationId, enterpriseId, organizationId, role, userIds)
end

"""
Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
"""
mutable struct UpdateEnterpriseOrganizationProjectsSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the organization projects setting.\n  "
    enterpriseId::String
    "\n  The value for the organization projects setting on the enterprise.\n  "
    settingValue::EnterpriseEnabledDisabledSettingValue.T
end
function UpdateEnterpriseOrganizationProjectsSettingInput(; clientMutationId = nothing, enterpriseId, settingValue)
    UpdateEnterpriseOrganizationProjectsSettingInput(clientMutationId, enterpriseId, settingValue)
end

"""
Ordering options for IP allow list entry connections.
"""
mutable struct IpAllowListEntryOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order IP allow list entries by.\n  "
    field::IpAllowListEntryOrderField.T
end
function IpAllowListEntryOrder(; direction, field)
    IpAllowListEntryOrder(direction, field)
end

"""
Autogenerated return type of DeleteProjectCard
"""
mutable struct DeleteProjectCardPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The column the deleted card was in.\n  "
    column::Union{ProjectColumn, Missing, Nothing}
    "\n  The deleted card ID.\n  "
    deletedCardId::Union{String, Missing, Nothing}
end
function DeleteProjectCardPayload(; clientMutationId = nothing, column = nothing, deletedCardId = nothing)
    DeleteProjectCardPayload(clientMutationId, column, deletedCardId)
end

"""
Autogenerated input type of SetUserInteractionLimit
"""
mutable struct SetUserInteractionLimitInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  When this limit should expire.\n  "
    expiry::Union{RepositoryInteractionLimitExpiry.T, Missing, Nothing}
    "\n  The limit to set.\n  "
    limit::RepositoryInteractionLimit.T
    "\n  The ID of the user to set a limit for.\n  "
    userId::String
end
function SetUserInteractionLimitInput(; clientMutationId = nothing, expiry = nothing, limit, userId)
    SetUserInteractionLimitInput(clientMutationId, expiry, limit, userId)
end

"""
Autogenerated input type of DeleteIssue
"""
mutable struct DeleteIssueInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the issue to delete.\n  "
    issueId::String
end
function DeleteIssueInput(; clientMutationId = nothing, issueId)
    DeleteIssueInput(clientMutationId, issueId)
end

"""
Autogenerated return type of UpdateProjectV2
"""
mutable struct UpdateProjectV2Payload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated Project.\n  "
    projectV2::Union{ProjectV2, Missing, Nothing}
end
function UpdateProjectV2Payload(; clientMutationId = nothing, projectV2 = nothing)
    UpdateProjectV2Payload(clientMutationId, projectV2)
end

"""
Autogenerated input type of DeclineTopicSuggestion
"""
mutable struct DeclineTopicSuggestionInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The name of the suggested topic.\n  "
    name::String
    "\n  The reason why the suggested topic is declined.\n  "
    reason::TopicSuggestionDeclineReason.T
    "\n  The Node ID of the repository.\n  "
    repositoryId::String
end
function DeclineTopicSuggestionInput(; clientMutationId = nothing, name, reason, repositoryId)
    DeclineTopicSuggestionInput(clientMutationId, name, reason, repositoryId)
end

"""
A ref update
"""
mutable struct RefUpdate <: OfficialGithubSchema
    "\n  The value this ref should be updated to.\n  "
    afterOid::GitObjectID
    "\n  The value this ref needs to point to before the update.\n  "
    beforeOid::Union{GitObjectID, Missing, Nothing}
    "\n  Force a non fast-forward update.\n  "
    force::Union{Bool, Missing, Nothing}
    "\n  The fully qualified name of the ref to be update. For example `refs/heads/branch-name`\n  "
    name::GitRefname
end
function RefUpdate(; afterOid, beforeOid = nothing, force = false, name)
    RefUpdate(afterOid, beforeOid, force, name)
end

"""
Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
"""
mutable struct UpdateEnterpriseOrganizationProjectsSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated organization projects setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the organization projects setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseOrganizationProjectsSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseOrganizationProjectsSettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated return type of UnarchiveRepository
"""
mutable struct UnarchiveRepositoryPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The repository that was unarchived.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function UnarchiveRepositoryPayload(; clientMutationId = nothing, repository = nothing)
    UnarchiveRepositoryPayload(clientMutationId, repository)
end

"""
Autogenerated return type of RevokeMigratorRole
"""
mutable struct RevokeMigratorRolePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Did the operation succeed?\n  "
    success::Union{Bool, Missing, Nothing}
end
function RevokeMigratorRolePayload(; clientMutationId = nothing, success = nothing)
    RevokeMigratorRolePayload(clientMutationId, success)
end

"""
Ordering options for language connections.
"""
mutable struct LanguageOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order languages by.\n  "
    field::LanguageOrderField.T
end
function LanguageOrder(; direction, field)
    LanguageOrder(direction, field)
end

"""
An advisory identifier to filter results on.
"""
mutable struct SecurityAdvisoryIdentifierFilter <: OfficialGithubSchema
    "\n  The identifier type.\n  "
    type::SecurityAdvisoryIdentifierType.T
    "\n  The identifier string. Supports exact or partial matching.\n  "
    value::String
end
function SecurityAdvisoryIdentifierFilter(; type, value)
    SecurityAdvisoryIdentifierFilter(type, value)
end

"""
Autogenerated input type of AcceptTopicSuggestion
"""
mutable struct AcceptTopicSuggestionInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The name of the suggested topic.\n  "
    name::String
    "\n  The Node ID of the repository.\n  "
    repositoryId::String
end
function AcceptTopicSuggestionInput(; clientMutationId = nothing, name, repositoryId)
    AcceptTopicSuggestionInput(clientMutationId, name, repositoryId)
end

"""
Autogenerated input type of CancelEnterpriseAdminInvitation
"""
mutable struct CancelEnterpriseAdminInvitationInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the pending enterprise administrator invitation.\n  "
    invitationId::String
end
function CancelEnterpriseAdminInvitationInput(; clientMutationId = nothing, invitationId)
    CancelEnterpriseAdminInvitationInput(clientMutationId, invitationId)
end

"""
The filters that are available when fetching check suites.
"""
mutable struct CheckSuiteFilter <: OfficialGithubSchema
    "\n  Filters the check suites created by this application ID.\n  "
    appId::Union{Int, Missing, Nothing}
    "\n  Filters the check suites by this name.\n  "
    checkName::Union{String, Missing, Nothing}
end
function CheckSuiteFilter(; appId = nothing, checkName = nothing)
    CheckSuiteFilter(appId, checkName)
end

"""
Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole
"""
mutable struct UpdateEnterpriseOwnerOrganizationRolePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A message confirming the result of changing the owner's organization role.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseOwnerOrganizationRolePayload(; clientMutationId = nothing, message = nothing)
    UpdateEnterpriseOwnerOrganizationRolePayload(clientMutationId, message)
end

"""
Autogenerated input type of UnmarkDiscussionCommentAsAnswer
"""
mutable struct UnmarkDiscussionCommentAsAnswerInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the discussion comment to unmark as an answer.\n  "
    id::String
end
function UnmarkDiscussionCommentAsAnswerInput(; clientMutationId = nothing, id)
    UnmarkDiscussionCommentAsAnswerInput(clientMutationId, id)
end

"""
Autogenerated return type of UpdateEnvironment
"""
mutable struct UpdateEnvironmentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated environment.\n  "
    environment::Union{Environment, Missing, Nothing}
end
function UpdateEnvironmentPayload(; clientMutationId = nothing, environment = nothing)
    UpdateEnvironmentPayload(clientMutationId, environment)
end

"""
Autogenerated return type of UnfollowUser
"""
mutable struct UnfollowUserPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The user that was unfollowed.\n  "
    user::Union{User, Missing, Nothing}
end
function UnfollowUserPayload(; clientMutationId = nothing, user = nothing)
    UnfollowUserPayload(clientMutationId, user)
end

"""
The auto-trigger preferences that are available for check suites.
"""
mutable struct CheckSuiteAutoTriggerPreference <: OfficialGithubSchema
    "\n  The node ID of the application that owns the check suite.\n  "
    appId::String
    "\n  Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.\n  "
    setting::Bool
end
function CheckSuiteAutoTriggerPreference(; appId, setting)
    CheckSuiteAutoTriggerPreference(appId, setting)
end

"""
Ordering options for Enterprise Server installation connections.
"""
mutable struct EnterpriseServerInstallationOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order Enterprise Server installations by.\n  "
    field::EnterpriseServerInstallationOrderField.T
end
function EnterpriseServerInstallationOrder(; direction, field)
    EnterpriseServerInstallationOrder(direction, field)
end

"""
Autogenerated return type of RemoveOutsideCollaborator
"""
mutable struct RemoveOutsideCollaboratorPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The user that was removed as an outside collaborator.\n  "
    removedUser::Union{User, Missing, Nothing}
end
function RemoveOutsideCollaboratorPayload(; clientMutationId = nothing, removedUser = nothing)
    RemoveOutsideCollaboratorPayload(clientMutationId, removedUser)
end

"""
Autogenerated input type of DeleteEnvironment
"""
mutable struct DeleteEnvironmentInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the environment to be deleted.\n  "
    id::String
end
function DeleteEnvironmentInput(; clientMutationId = nothing, id)
    DeleteEnvironmentInput(clientMutationId, id)
end

"""
Information from a check run analysis to specific lines of code.
"""
mutable struct CheckAnnotationRange <: OfficialGithubSchema
    "\n  The ending column of the range.\n  "
    endColumn::Union{Int, Missing, Nothing}
    "\n  The ending line of the range.\n  "
    endLine::Int
    "\n  The starting column of the range.\n  "
    startColumn::Union{Int, Missing, Nothing}
    "\n  The starting line of the range.\n  "
    startLine::Int
end
function CheckAnnotationRange(; endColumn = nothing, endLine, startColumn = nothing, startLine)
    CheckAnnotationRange(endColumn, endLine, startColumn, startLine)
end

"""
Autogenerated return type of LinkRepositoryToProject
"""
mutable struct LinkRepositoryToProjectPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The linked Project.\n  "
    project::Union{Project, Missing, Nothing}
    "\n  The linked Repository.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function LinkRepositoryToProjectPayload(; clientMutationId = nothing, project = nothing, repository = nothing)
    LinkRepositoryToProjectPayload(clientMutationId, project, repository)
end

"""
Autogenerated input type of UpdatePullRequestBranch
"""
mutable struct UpdatePullRequestBranchInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The head ref oid for the upstream branch.\n  "
    expectedHeadOid::Union{GitObjectID, Missing, Nothing}
    "\n  The Node ID of the pull request.\n  "
    pullRequestId::String
end
function UpdatePullRequestBranchInput(; clientMutationId = nothing, expectedHeadOid = nothing, pullRequestId)
    UpdatePullRequestBranchInput(clientMutationId, expectedHeadOid, pullRequestId)
end

"""
Autogenerated input type of AddProjectCard
"""
mutable struct AddProjectCardInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The content of the card. Must be a member of the ProjectCardItem union\n  "
    contentId::Union{String, Missing, Nothing}
    "\n  The note on the card.\n  "
    note::Union{String, Missing, Nothing}
    "\n  The Node ID of the ProjectColumn.\n  "
    projectColumnId::String
end
function AddProjectCardInput(; clientMutationId = nothing, contentId = nothing, note = nothing, projectColumnId)
    AddProjectCardInput(clientMutationId, contentId, note, projectColumnId)
end

"""
Autogenerated return type of CancelEnterpriseAdminInvitation
"""
mutable struct CancelEnterpriseAdminInvitationPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The invitation that was canceled.\n  "
    invitation::Union{EnterpriseAdministratorInvitation, Missing, Nothing}
    "\n  A message confirming the result of canceling an administrator invitation.\n  "
    message::Union{String, Missing, Nothing}
end
function CancelEnterpriseAdminInvitationPayload(; clientMutationId = nothing, invitation = nothing, message = nothing)
    CancelEnterpriseAdminInvitationPayload(clientMutationId, invitation, message)
end

"""
Autogenerated input type of GrantMigratorRole
"""
mutable struct GrantMigratorRoleInput <: OfficialGithubSchema
    "\n  The user login or Team slug to grant the migrator role.\n  "
    actor::String
    "\n  Specifies the type of the actor, can be either USER or TEAM.\n  "
    actorType::ActorType.T
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the organization that the user/team belongs to.\n  "
    organizationId::String
end
function GrantMigratorRoleInput(; actor, actorType, clientMutationId = nothing, organizationId)
    GrantMigratorRoleInput(actor, actorType, clientMutationId, organizationId)
end

"""
Autogenerated input type of UpdateDiscussionComment
"""
mutable struct UpdateDiscussionCommentInput <: OfficialGithubSchema
    "\n  The new contents of the comment body.\n  "
    body::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the discussion comment to update.\n  "
    commentId::String
end
function UpdateDiscussionCommentInput(; body, clientMutationId = nothing, commentId)
    UpdateDiscussionCommentInput(body, clientMutationId, commentId)
end

"""
Autogenerated return type of MinimizeComment
"""
mutable struct MinimizeCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The comment that was minimized.\n  "
    minimizedComment::Union{Minimizable, Missing, Nothing}
end
function MinimizeCommentPayload(; clientMutationId = nothing, minimizedComment = nothing)
    MinimizeCommentPayload(clientMutationId, minimizedComment)
end

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
mutable struct SponsorableOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order sponsorable entities by.\n  "
    field::SponsorableOrderField.T
end
function SponsorableOrder(; direction, field)
    SponsorableOrder(direction, field)
end

"""
Autogenerated input type of CreateMigrationSource
"""
mutable struct CreateMigrationSourceInput <: OfficialGithubSchema
    "\n  The Octoshift migration source access token.\n  "
    accessToken::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The GitHub personal access token of the user importing to the target repository.\n  "
    githubPat::Union{String, Missing, Nothing}
    "\n  The Octoshift migration source name.\n  "
    name::String
    "\n  The ID of the organization that will own the Octoshift migration source.\n  "
    ownerId::String
    "\n  The Octoshift migration source type.\n  "
    type::MigrationSourceType.T
    "\n  The Octoshift migration source URL.\n  "
    url::String
end
function CreateMigrationSourceInput(; accessToken = nothing, clientMutationId = nothing, githubPat = nothing, name, ownerId, type, url)
    CreateMigrationSourceInput(accessToken, clientMutationId, githubPat, name, ownerId, type, url)
end

"""
Autogenerated return type of UpdateRefs
"""
mutable struct UpdateRefsPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function UpdateRefsPayload(; clientMutationId = nothing)
    UpdateRefsPayload(clientMutationId)
end

"""
Autogenerated input type of CreateIssue
"""
mutable struct CreateIssueInput <: OfficialGithubSchema
    "\n  The Node ID for the user assignee for this issue.\n  "
    assigneeIds::Union{Vector{String}, Missing, Nothing}
    "\n  The body for the issue description.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The name of an issue template in the repository, assigns labels and assignees from the template to the issue\n  "
    issueTemplate::Union{String, Missing, Nothing}
    "\n  An array of Node IDs of labels for this issue.\n  "
    labelIds::Union{Vector{String}, Missing, Nothing}
    "\n  The Node ID of the milestone for this issue.\n  "
    milestoneId::Union{String, Missing, Nothing}
    "\n  An array of Node IDs for projects associated with this issue.\n  "
    projectIds::Union{Vector{String}, Missing, Nothing}
    "\n  The Node ID of the repository.\n  "
    repositoryId::String
    "\n  The title for the issue.\n  "
    title::String
end
function CreateIssueInput(; assigneeIds = nothing, body = nothing, clientMutationId = nothing, issueTemplate = nothing, labelIds = nothing, milestoneId = nothing, projectIds = nothing, repositoryId, title)
    CreateIssueInput(assigneeIds, body, clientMutationId, issueTemplate, labelIds, milestoneId, projectIds, repositoryId, title)
end

"""
Ordering options for user status connections.
"""
mutable struct UserStatusOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order user statuses by.\n  "
    field::UserStatusOrderField.T
end
function UserStatusOrder(; direction, field)
    UserStatusOrder(direction, field)
end

"""
Autogenerated input type of StartRepositoryMigration
"""
mutable struct StartRepositoryMigrationInput <: OfficialGithubSchema
    "\n  The Octoshift migration source access token.\n  "
    accessToken::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Whether to continue the migration on error\n  "
    continueOnError::Union{Bool, Missing, Nothing}
    "\n  The signed URL to access the user-uploaded git archive\n  "
    gitArchiveUrl::Union{String, Missing, Nothing}
    "\n  The GitHub personal access token of the user importing to the target repository.\n  "
    githubPat::Union{String, Missing, Nothing}
    "\n  Whether to lock the source repository.\n  "
    lockSource::Union{Bool, Missing, Nothing}
    "\n  The signed URL to access the user-uploaded metadata archive\n  "
    metadataArchiveUrl::Union{String, Missing, Nothing}
    "\n  The ID of the organization that will own the imported repository.\n  "
    ownerId::String
    "\n  The name of the imported repository.\n  "
    repositoryName::String
    "\n  Whether to skip migrating releases for the repository.\n  "
    skipReleases::Union{Bool, Missing, Nothing}
    "\n  The ID of the Octoshift migration source.\n  "
    sourceId::String
    "\n  The Octoshift migration source repository URL.\n  "
    sourceRepositoryUrl::URI
    "\n  The visibility of the imported repository.\n  "
    targetRepoVisibility::Union{String, Missing, Nothing}
end
function StartRepositoryMigrationInput(; accessToken, clientMutationId = nothing, continueOnError = nothing, gitArchiveUrl = nothing, githubPat = nothing, lockSource = nothing, metadataArchiveUrl = nothing, ownerId, repositoryName, skipReleases = nothing, sourceId, sourceRepositoryUrl, targetRepoVisibility = nothing)
    StartRepositoryMigrationInput(accessToken, clientMutationId, continueOnError, gitArchiveUrl, githubPat, lockSource, metadataArchiveUrl, ownerId, repositoryName, skipReleases, sourceId, sourceRepositoryUrl, targetRepoVisibility)
end

"""
Autogenerated input type of AddStar
"""
mutable struct AddStarInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Starrable ID to star.\n  "
    starrableId::String
end
function AddStarInput(; clientMutationId = nothing, starrableId)
    AddStarInput(clientMutationId, starrableId)
end

"""
Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting
"""
mutable struct UpdateEnterpriseTeamDiscussionsSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the team discussions setting.\n  "
    enterpriseId::String
    "\n  The value for the team discussions setting on the enterprise.\n  "
    settingValue::EnterpriseEnabledDisabledSettingValue.T
end
function UpdateEnterpriseTeamDiscussionsSettingInput(; clientMutationId = nothing, enterpriseId, settingValue)
    UpdateEnterpriseTeamDiscussionsSettingInput(clientMutationId, enterpriseId, settingValue)
end

"""
Autogenerated return type of ArchiveRepository
"""
mutable struct ArchiveRepositoryPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The repository that was marked as archived.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function ArchiveRepositoryPayload(; clientMutationId = nothing, repository = nothing)
    ArchiveRepositoryPayload(clientMutationId, repository)
end

"""
Autogenerated input type of UpdateProjectNextItemField
"""
mutable struct UpdateProjectNextItemFieldInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The id of the field to be updated.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `fieldId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    fieldId::Union{String, Missing, Nothing}
    "\n  The id of the item to be updated. This field is required.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `itemId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    itemId::Union{String, Missing, Nothing}
    "\n  The ID of the Project. This field is required.\n  "
    projectId::Union{String, Missing, Nothing}
    "\n  The value which will be set on the field. This field is required.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `value` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    value::Union{String, Missing, Nothing}
end
function UpdateProjectNextItemFieldInput(; clientMutationId = nothing, fieldId = nothing, itemId = nothing, projectId = nothing, value = nothing)
    UpdateProjectNextItemFieldInput(clientMutationId, fieldId, itemId, projectId, value)
end

"""
Autogenerated return type of UpdateIpAllowListEnabledSetting
"""
mutable struct UpdateIpAllowListEnabledSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The IP allow list owner on which the setting was updated.\n  "
    owner::Union{IpAllowListOwner, Missing, Nothing}
end
function UpdateIpAllowListEnabledSettingPayload(; clientMutationId = nothing, owner = nothing)
    UpdateIpAllowListEnabledSettingPayload(clientMutationId, owner)
end

"""
Autogenerated input type of UnresolveReviewThread
"""
mutable struct UnresolveReviewThreadInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the thread to unresolve\n  "
    threadId::String
end
function UnresolveReviewThreadInput(; clientMutationId = nothing, threadId)
    UnresolveReviewThreadInput(clientMutationId, threadId)
end

"""
Autogenerated input type of EnablePullRequestAutoMerge
"""
mutable struct EnablePullRequestAutoMergeInput <: OfficialGithubSchema
    "\n  The email address to associate with this merge.\n  "
    authorEmail::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Commit body to use for the commit when the PR is mergable; if omitted, a\n  default message will be used. NOTE: when merging with a merge queue any input\n  value for commit message is ignored.\n  "
    commitBody::Union{String, Missing, Nothing}
    "\n  Commit headline to use for the commit when the PR is mergable; if omitted, a\n  default message will be used. NOTE: when merging with a merge queue any input\n  value for commit headline is ignored.\n  "
    commitHeadline::Union{String, Missing, Nothing}
    "\n  The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging\n  with a merge queue any input value for merge method is ignored.\n  "
    mergeMethod::Union{PullRequestMergeMethod.T, Missing, Nothing}
    "\n  ID of the pull request to enable auto-merge on.\n  "
    pullRequestId::String
end
function EnablePullRequestAutoMergeInput(; authorEmail = nothing, clientMutationId = nothing, commitBody = nothing, commitHeadline = nothing, mergeMethod = MERGE, pullRequestId)
    EnablePullRequestAutoMergeInput(authorEmail, clientMutationId, commitBody, commitHeadline, mergeMethod, pullRequestId)
end

"""
Autogenerated return type of UnmarkIssueAsDuplicate
"""
mutable struct UnmarkIssueAsDuplicatePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The issue or pull request that was marked as a duplicate.\n  "
    duplicate::Union{IssueOrPullRequest, Missing, Nothing}
end
function UnmarkIssueAsDuplicatePayload(; clientMutationId = nothing, duplicate = nothing)
    UnmarkIssueAsDuplicatePayload(clientMutationId, duplicate)
end

"""
Autogenerated return type of RemoveEnterpriseIdentityProvider
"""
mutable struct RemoveEnterpriseIdentityProviderPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The identity provider that was removed from the enterprise.\n  "
    identityProvider::Union{EnterpriseIdentityProvider, Missing, Nothing}
end
function RemoveEnterpriseIdentityProviderPayload(; clientMutationId = nothing, identityProvider = nothing)
    RemoveEnterpriseIdentityProviderPayload(clientMutationId, identityProvider)
end

"""
Autogenerated return type of UpdatePullRequestBranch
"""
mutable struct UpdatePullRequestBranchPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated pull request.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
end
function UpdatePullRequestBranchPayload(; clientMutationId = nothing, pullRequest = nothing)
    UpdatePullRequestBranchPayload(clientMutationId, pullRequest)
end

"""
Autogenerated return type of TransferIssue
"""
mutable struct TransferIssuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The issue that was transferred\n  "
    issue::Union{Issue, Missing, Nothing}
end
function TransferIssuePayload(; clientMutationId = nothing, issue = nothing)
    TransferIssuePayload(clientMutationId, issue)
end

"""
Autogenerated input type of UpdateNotificationRestrictionSetting
"""
mutable struct UpdateNotificationRestrictionSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the owner on which to set the restrict notifications setting.\n  "
    ownerId::String
    "\n  The value for the restrict notifications setting.\n  "
    settingValue::NotificationRestrictionSettingValue.T
end
function UpdateNotificationRestrictionSettingInput(; clientMutationId = nothing, ownerId, settingValue)
    UpdateNotificationRestrictionSettingInput(clientMutationId, ownerId, settingValue)
end

"""
Autogenerated return type of RemoveStar
"""
mutable struct RemoveStarPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The starrable.\n  "
    starrable::Union{Starrable, Missing, Nothing}
end
function RemoveStarPayload(; clientMutationId = nothing, starrable = nothing)
    RemoveStarPayload(clientMutationId, starrable)
end

"""
Autogenerated return type of UpdateEnterpriseProfile
"""
mutable struct UpdateEnterpriseProfilePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated enterprise.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
end
function UpdateEnterpriseProfilePayload(; clientMutationId = nothing, enterprise = nothing)
    UpdateEnterpriseProfilePayload(clientMutationId, enterprise)
end

"""
Autogenerated return type of CreateLinkedBranch
"""
mutable struct CreateLinkedBranchPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new branch issue reference.\n  "
    linkedBranch::Union{LinkedBranch, Missing, Nothing}
end
function CreateLinkedBranchPayload(; clientMutationId = nothing, linkedBranch = nothing)
    CreateLinkedBranchPayload(clientMutationId, linkedBranch)
end

"""
Autogenerated input type of RequestReviews
"""
mutable struct RequestReviewsInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the pull request to modify.\n  "
    pullRequestId::String
    "\n  The Node IDs of the team to request.\n  "
    teamIds::Union{Vector{String}, Missing, Nothing}
    "\n  Add users to the set rather than replace.\n  "
    union::Union{Bool, Missing, Nothing}
    "\n  The Node IDs of the user to request.\n  "
    userIds::Union{Vector{String}, Missing, Nothing}
end
function RequestReviewsInput(; clientMutationId = nothing, pullRequestId, teamIds = nothing, union = nothing, userIds = nothing)
    RequestReviewsInput(clientMutationId, pullRequestId, teamIds, union, userIds)
end

"""
Autogenerated input type of ReopenPullRequest
"""
mutable struct ReopenPullRequestInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the pull request to be reopened.\n  "
    pullRequestId::String
end
function ReopenPullRequestInput(; clientMutationId = nothing, pullRequestId)
    ReopenPullRequestInput(clientMutationId, pullRequestId)
end

"""
Autogenerated return type of CreateDeployment
"""
mutable struct CreateDeploymentPayload <: OfficialGithubSchema
    "\n  True if the default branch has been auto-merged into the deployment ref.\n  "
    autoMerged::Union{Bool, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new deployment.\n  "
    deployment::Union{Deployment, Missing, Nothing}
end
function CreateDeploymentPayload(; autoMerged = nothing, clientMutationId = nothing, deployment = nothing)
    CreateDeploymentPayload(autoMerged, clientMutationId, deployment)
end

"""
Autogenerated input type of CreateRef
"""
mutable struct CreateRefInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).\n  "
    name::String
    "\n  The GitObjectID that the new Ref shall target. Must point to a commit.\n  "
    oid::GitObjectID
    "\n  The Node ID of the Repository to create the Ref in.\n  "
    repositoryId::String
end
function CreateRefInput(; clientMutationId = nothing, name, oid, repositoryId)
    CreateRefInput(clientMutationId, name, oid, repositoryId)
end

"""
Autogenerated return type of UpdateDiscussionComment
"""
mutable struct UpdateDiscussionCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The modified discussion comment.\n  "
    comment::Union{DiscussionComment, Missing, Nothing}
end
function UpdateDiscussionCommentPayload(; clientMutationId = nothing, comment = nothing)
    UpdateDiscussionCommentPayload(clientMutationId, comment)
end

"""
Autogenerated input type of RemoveStar
"""
mutable struct RemoveStarInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Starrable ID to unstar.\n  "
    starrableId::String
end
function RemoveStarInput(; clientMutationId = nothing, starrableId)
    RemoveStarInput(clientMutationId, starrableId)
end

"""
Autogenerated input type of ResolveReviewThread
"""
mutable struct ResolveReviewThreadInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the thread to resolve\n  "
    threadId::String
end
function ResolveReviewThreadInput(; clientMutationId = nothing, threadId)
    ResolveReviewThreadInput(clientMutationId, threadId)
end

"""
Autogenerated return type of InviteEnterpriseAdmin
"""
mutable struct InviteEnterpriseAdminPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The created enterprise administrator invitation.\n  "
    invitation::Union{EnterpriseAdministratorInvitation, Missing, Nothing}
end
function InviteEnterpriseAdminPayload(; clientMutationId = nothing, invitation = nothing)
    InviteEnterpriseAdminPayload(clientMutationId, invitation)
end

"""
An edge in a connection.
"""
mutable struct MarketplaceListingEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{MarketplaceListing, Missing, Nothing}
end
function MarketplaceListingEdge(; cursor, node = nothing)
    MarketplaceListingEdge(cursor, node)
end

"""
Autogenerated input type of ApproveDeployments
"""
mutable struct ApproveDeploymentsInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Optional comment for approving deployments\n  "
    comment::Union{String, Missing, Nothing}
    "\n  The ids of environments to reject deployments\n  "
    environmentIds::Vector{String}
    "\n  The node ID of the workflow run containing the pending deployments.\n  "
    workflowRunId::String
end
function ApproveDeploymentsInput(; clientMutationId = nothing, comment = "", environmentIds, workflowRunId)
    ApproveDeploymentsInput(clientMutationId, comment, environmentIds, workflowRunId)
end

"""
Autogenerated input type of AddDiscussionPollVote
"""
mutable struct AddDiscussionPollVoteInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the discussion poll option to vote for.\n  "
    pollOptionId::String
end
function AddDiscussionPollVoteInput(; clientMutationId = nothing, pollOptionId)
    AddDiscussionPollVoteInput(clientMutationId, pollOptionId)
end

"""
Autogenerated input type of DeleteRef
"""
mutable struct DeleteRefInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the Ref to be deleted.\n  "
    refId::String
end
function DeleteRefInput(; clientMutationId = nothing, refId)
    DeleteRefInput(clientMutationId, refId)
end

"""
Autogenerated return type of AddAssigneesToAssignable
"""
mutable struct AddAssigneesToAssignablePayload <: OfficialGithubSchema
    "\n  The item that was assigned.\n  "
    assignable::Union{Assignable, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function AddAssigneesToAssignablePayload(; assignable = nothing, clientMutationId = nothing)
    AddAssigneesToAssignablePayload(assignable, clientMutationId)
end

"""
Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
"""
mutable struct UpdateRepositoryWebCommitSignoffSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the repository to update.\n  "
    repositoryId::String
    "\n  Indicates if the repository should require signoff on web-based commits.\n  "
    webCommitSignoffRequired::Bool
end
function UpdateRepositoryWebCommitSignoffSettingInput(; clientMutationId = nothing, repositoryId, webCommitSignoffRequired)
    UpdateRepositoryWebCommitSignoffSettingInput(clientMutationId, repositoryId, webCommitSignoffRequired)
end

"""
Autogenerated input type of CreateDiscussion
"""
mutable struct CreateDiscussionInput <: OfficialGithubSchema
    "\n  The body of the discussion.\n  "
    body::String
    "\n  The id of the discussion category to associate with this discussion.\n  "
    categoryId::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The id of the repository on which to create the discussion.\n  "
    repositoryId::String
    "\n  The title of the discussion.\n  "
    title::String
end
function CreateDiscussionInput(; body, categoryId, clientMutationId = nothing, repositoryId, title)
    CreateDiscussionInput(body, categoryId, clientMutationId, repositoryId, title)
end

"""
Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting
"""
mutable struct UpdateIpAllowListForInstalledAppsEnabledSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The IP allow list owner on which the setting was updated.\n  "
    owner::Union{IpAllowListOwner, Missing, Nothing}
end
function UpdateIpAllowListForInstalledAppsEnabledSettingPayload(; clientMutationId = nothing, owner = nothing)
    UpdateIpAllowListForInstalledAppsEnabledSettingPayload(clientMutationId, owner)
end

"""
Autogenerated return type of ClearProjectV2ItemFieldValue
"""
mutable struct ClearProjectV2ItemFieldValuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated item.\n  "
    projectV2Item::Union{ProjectV2Item, Missing, Nothing}
end
function ClearProjectV2ItemFieldValuePayload(; clientMutationId = nothing, projectV2Item = nothing)
    ClearProjectV2ItemFieldValuePayload(clientMutationId, projectV2Item)
end

"""
Ordering options for Enterprise Server user account connections.
"""
mutable struct EnterpriseServerUserAccountOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order user accounts by.\n  "
    field::EnterpriseServerUserAccountOrderField.T
end
function EnterpriseServerUserAccountOrder(; direction, field)
    EnterpriseServerUserAccountOrder(direction, field)
end

"""
Autogenerated return type of AddProjectV2ItemById
"""
mutable struct AddProjectV2ItemByIdPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The item added to the project.\n  "
    item::Union{ProjectV2Item, Missing, Nothing}
end
function AddProjectV2ItemByIdPayload(; clientMutationId = nothing, item = nothing)
    AddProjectV2ItemByIdPayload(clientMutationId, item)
end

"""
Ordering options for enterprise administrator invitation connections
"""
mutable struct EnterpriseAdministratorInvitationOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order enterprise administrator invitations by.\n  "
    field::EnterpriseAdministratorInvitationOrderField.T
end
function EnterpriseAdministratorInvitationOrder(; direction, field)
    EnterpriseAdministratorInvitationOrder(direction, field)
end

"""
Autogenerated input type of CloneProject
"""
mutable struct CloneProjectInput <: OfficialGithubSchema
    "\n  The description of the project.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Whether or not to clone the source project's workflows.\n  "
    includeWorkflows::Bool
    "\n  The name of the project.\n  "
    name::String
    "\n  The visibility of the project, defaults to false (private).\n  "
    public::Union{Bool, Missing, Nothing}
    "\n  The source project to clone.\n  "
    sourceId::String
    "\n  The owner ID to create the project under.\n  "
    targetOwnerId::String
end
function CloneProjectInput(; body = nothing, clientMutationId = nothing, includeWorkflows, name, public = nothing, sourceId, targetOwnerId)
    CloneProjectInput(body, clientMutationId, includeWorkflows, name, public, sourceId, targetOwnerId)
end

"""
Autogenerated return type of AddProjectCard
"""
mutable struct AddProjectCardPayload <: OfficialGithubSchema
    "\n  The edge from the ProjectColumn's card connection.\n  "
    cardEdge::Union{ProjectCardEdge, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ProjectColumn\n  "
    projectColumn::Union{ProjectColumn, Missing, Nothing}
end
function AddProjectCardPayload(; cardEdge = nothing, clientMutationId = nothing, projectColumn = nothing)
    AddProjectCardPayload(cardEdge, clientMutationId, projectColumn)
end

"""
Autogenerated input type of AddComment
"""
mutable struct AddCommentInput <: OfficialGithubSchema
    "\n  The contents of the comment.\n  "
    body::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the subject to modify.\n  "
    subjectId::String
end
function AddCommentInput(; body, clientMutationId = nothing, subjectId)
    AddCommentInput(body, clientMutationId, subjectId)
end

"""
Ways in which lists of git refs can be ordered upon return.
"""
mutable struct RefOrder <: OfficialGithubSchema
    "\n  The direction in which to order refs by the specified field.\n  "
    direction::OrderDirection.T
    "\n  The field in which to order refs by.\n  "
    field::RefOrderField.T
end
function RefOrder(; direction, field)
    RefOrder(direction, field)
end

"""
Autogenerated input type of ReopenIssue
"""
mutable struct ReopenIssueInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the issue to be opened.\n  "
    issueId::String
end
function ReopenIssueInput(; clientMutationId = nothing, issueId)
    ReopenIssueInput(clientMutationId, issueId)
end

"""
Autogenerated return type of DeletePullRequestReview
"""
mutable struct DeletePullRequestReviewPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The deleted pull request review.\n  "
    pullRequestReview::Union{PullRequestReview, Missing, Nothing}
end
function DeletePullRequestReviewPayload(; clientMutationId = nothing, pullRequestReview = nothing)
    DeletePullRequestReviewPayload(clientMutationId, pullRequestReview)
end

"""
Autogenerated input type of MergePullRequest
"""
mutable struct MergePullRequestInput <: OfficialGithubSchema
    "\n  The email address to associate with this merge.\n  "
    authorEmail::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Commit body to use for the merge commit; if omitted, a default message will be used\n  "
    commitBody::Union{String, Missing, Nothing}
    "\n  Commit headline to use for the merge commit; if omitted, a default message will be used.\n  "
    commitHeadline::Union{String, Missing, Nothing}
    "\n  OID that the pull request head ref must match to allow merge; if omitted, no check is performed.\n  "
    expectedHeadOid::Union{GitObjectID, Missing, Nothing}
    "\n  The merge method to use. If omitted, defaults to 'MERGE'\n  "
    mergeMethod::Union{PullRequestMergeMethod.T, Missing, Nothing}
    "\n  ID of the pull request to be merged.\n  "
    pullRequestId::String
end
function MergePullRequestInput(; authorEmail = nothing, clientMutationId = nothing, commitBody = nothing, commitHeadline = nothing, expectedHeadOid = nothing, mergeMethod = MERGE, pullRequestId)
    MergePullRequestInput(authorEmail, clientMutationId, commitBody, commitHeadline, expectedHeadOid, mergeMethod, pullRequestId)
end

"""
Autogenerated return type of CreateIpAllowListEntry
"""
mutable struct CreateIpAllowListEntryPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The IP allow list entry that was created.\n  "
    ipAllowListEntry::Union{IpAllowListEntry, Missing, Nothing}
end
function CreateIpAllowListEntryPayload(; clientMutationId = nothing, ipAllowListEntry = nothing)
    CreateIpAllowListEntryPayload(clientMutationId, ipAllowListEntry)
end

"""
Specifies the attributes for a new or updated required status check.
"""
mutable struct RequiredStatusCheckInput <: OfficialGithubSchema
    "\n  The ID of the App that must set the status in order for it to be accepted.\n  Omit this value to use whichever app has recently been setting this status, or\n  use \"any\" to allow any app to set the status.\n  "
    appId::Union{String, Missing, Nothing}
    "\n  Status check context that must pass for commits to be accepted to the matching branch.\n  "
    context::String
end
function RequiredStatusCheckInput(; appId = nothing, context)
    RequiredStatusCheckInput(appId, context)
end

"""
Autogenerated input type of CreateBranchProtectionRule
"""
mutable struct CreateBranchProtectionRuleInput <: OfficialGithubSchema
    "\n  Can this branch be deleted.\n  "
    allowsDeletions::Union{Bool, Missing, Nothing}
    "\n  Are force pushes allowed on this branch.\n  "
    allowsForcePushes::Union{Bool, Missing, Nothing}
    "\n  Is branch creation a protected operation.\n  "
    blocksCreations::Union{Bool, Missing, Nothing}
    "\n  A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.\n  "
    bypassForcePushActorIds::Union{Vector{String}, Missing, Nothing}
    "\n  A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.\n  "
    bypassPullRequestActorIds::Union{Vector{String}, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Will new commits pushed to matching branches dismiss pull request review approvals.\n  "
    dismissesStaleReviews::Union{Bool, Missing, Nothing}
    "\n  Can admins overwrite branch protection.\n  "
    isAdminEnforced::Union{Bool, Missing, Nothing}
    "\n  Whether users can pull changes from upstream when the branch is locked. Set to\n  `true` to allow fork syncing. Set to `false` to prevent fork syncing.\n  "
    lockAllowsFetchAndMerge::Union{Bool, Missing, Nothing}
    "\n  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.\n  "
    lockBranch::Union{Bool, Missing, Nothing}
    "\n  The glob-like pattern used to determine matching branches.\n  "
    pattern::String
    "\n  A list of User, Team, or App IDs allowed to push to matching branches.\n  "
    pushActorIds::Union{Vector{String}, Missing, Nothing}
    "\n  The global relay id of the repository in which a new branch protection rule should be created in.\n  "
    repositoryId::String
    "\n  Whether the most recent push must be approved by someone other than the person who pushed it\n  "
    requireLastPushApproval::Union{Bool, Missing, Nothing}
    "\n  Number of approving reviews required to update matching branches.\n  "
    requiredApprovingReviewCount::Union{Int, Missing, Nothing}
    "\n  List of required status check contexts that must pass for commits to be accepted to matching branches.\n  "
    requiredStatusCheckContexts::Union{Vector{String}, Missing, Nothing}
    "\n  The list of required status checks\n  "
    requiredStatusChecks::Union{Vector{RequiredStatusCheckInput}, Missing, Nothing}
    "\n  Are approving reviews required to update matching branches.\n  "
    requiresApprovingReviews::Union{Bool, Missing, Nothing}
    "\n  Are reviews from code owners required to update matching branches.\n  "
    requiresCodeOwnerReviews::Union{Bool, Missing, Nothing}
    "\n  Are commits required to be signed.\n  "
    requiresCommitSignatures::Union{Bool, Missing, Nothing}
    "\n  Are conversations required to be resolved before merging.\n  "
    requiresConversationResolution::Union{Bool, Missing, Nothing}
    "\n  Are merge commits prohibited from being pushed to this branch.\n  "
    requiresLinearHistory::Union{Bool, Missing, Nothing}
    "\n  Are status checks required to update matching branches.\n  "
    requiresStatusChecks::Union{Bool, Missing, Nothing}
    "\n  Are branches required to be up to date before merging.\n  "
    requiresStrictStatusChecks::Union{Bool, Missing, Nothing}
    "\n  Is pushing to matching branches restricted.\n  "
    restrictsPushes::Union{Bool, Missing, Nothing}
    "\n  Is dismissal of pull request reviews restricted.\n  "
    restrictsReviewDismissals::Union{Bool, Missing, Nothing}
    "\n  A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.\n  "
    reviewDismissalActorIds::Union{Vector{String}, Missing, Nothing}
end
function CreateBranchProtectionRuleInput(; allowsDeletions = nothing, allowsForcePushes = nothing, blocksCreations = nothing, bypassForcePushActorIds = nothing, bypassPullRequestActorIds = nothing, clientMutationId = nothing, dismissesStaleReviews = nothing, isAdminEnforced = nothing, lockAllowsFetchAndMerge = nothing, lockBranch = nothing, pattern, pushActorIds = nothing, repositoryId, requireLastPushApproval = nothing, requiredApprovingReviewCount = nothing, requiredStatusCheckContexts = nothing, requiredStatusChecks = nothing, requiresApprovingReviews = nothing, requiresCodeOwnerReviews = nothing, requiresCommitSignatures = nothing, requiresConversationResolution = nothing, requiresLinearHistory = nothing, requiresStatusChecks = nothing, requiresStrictStatusChecks = nothing, restrictsPushes = nothing, restrictsReviewDismissals = nothing, reviewDismissalActorIds = nothing)
    CreateBranchProtectionRuleInput(allowsDeletions, allowsForcePushes, blocksCreations, bypassForcePushActorIds, bypassPullRequestActorIds, clientMutationId, dismissesStaleReviews, isAdminEnforced, lockAllowsFetchAndMerge, lockBranch, pattern, pushActorIds, repositoryId, requireLastPushApproval, requiredApprovingReviewCount, requiredStatusCheckContexts, requiredStatusChecks, requiresApprovingReviews, requiresCodeOwnerReviews, requiresCommitSignatures, requiresConversationResolution, requiresLinearHistory, requiresStatusChecks, requiresStrictStatusChecks, restrictsPushes, restrictsReviewDismissals, reviewDismissalActorIds)
end

"""
Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
"""
mutable struct UpdateEnterpriseMembersCanDeleteIssuesSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated members can delete issues setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the members can delete issues setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseMembersCanDeleteIssuesSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseMembersCanDeleteIssuesSettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated input type of DeleteDeployment
"""
mutable struct DeleteDeploymentInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the deployment to be deleted.\n  "
    id::String
end
function DeleteDeploymentInput(; clientMutationId = nothing, id)
    DeleteDeploymentInput(clientMutationId, id)
end

"""
Autogenerated input type of CreateCheckSuite
"""
mutable struct CreateCheckSuiteInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The SHA of the head commit.\n  "
    headSha::GitObjectID
    "\n  The Node ID of the repository.\n  "
    repositoryId::String
end
function CreateCheckSuiteInput(; clientMutationId = nothing, headSha, repositoryId)
    CreateCheckSuiteInput(clientMutationId, headSha, repositoryId)
end

"""
Autogenerated return type of MoveProjectCard
"""
mutable struct MoveProjectCardPayload <: OfficialGithubSchema
    "\n  The new edge of the moved card.\n  "
    cardEdge::Union{ProjectCardEdge, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function MoveProjectCardPayload(; cardEdge = nothing, clientMutationId = nothing)
    MoveProjectCardPayload(cardEdge, clientMutationId)
end

"""
Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
"""
mutable struct UpdateEnterpriseDefaultRepositoryPermissionSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated base repository permission setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the base repository permission setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseDefaultRepositoryPermissionSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseDefaultRepositoryPermissionSettingPayload(clientMutationId, enterprise, message)
end

"""
Ordering options for Sponsors tiers connections.
"""
mutable struct SponsorsTierOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order tiers by.\n  "
    field::SponsorsTierOrderField.T
end
function SponsorsTierOrder(; direction, field)
    SponsorsTierOrder(direction, field)
end

"""
Autogenerated input type of PinIssue
"""
mutable struct PinIssueInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the issue to be pinned\n  "
    issueId::String
end
function PinIssueInput(; clientMutationId = nothing, issueId)
    PinIssueInput(clientMutationId, issueId)
end

"""
Ordering options for saved reply connections.
"""
mutable struct SavedReplyOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order saved replies by.\n  "
    field::SavedReplyOrderField.T
end
function SavedReplyOrder(; direction, field)
    SavedReplyOrder(direction, field)
end

"""
Autogenerated input type of MoveProjectCard
"""
mutable struct MoveProjectCardInput <: OfficialGithubSchema
    "\n  Place the new card after the card with this id. Pass null to place it at the top.\n  "
    afterCardId::Union{String, Missing, Nothing}
    "\n  The id of the card to move.\n  "
    cardId::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The id of the column to move it into.\n  "
    columnId::String
end
function MoveProjectCardInput(; afterCardId = nothing, cardId, clientMutationId = nothing, columnId)
    MoveProjectCardInput(afterCardId, cardId, clientMutationId, columnId)
end

"""
Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
"""
mutable struct UpdateEnterpriseDefaultRepositoryPermissionSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the base repository permission setting.\n  "
    enterpriseId::String
    "\n  The value for the base repository permission setting on the enterprise.\n  "
    settingValue::EnterpriseDefaultRepositoryPermissionSettingValue.T
end
function UpdateEnterpriseDefaultRepositoryPermissionSettingInput(; clientMutationId = nothing, enterpriseId, settingValue)
    UpdateEnterpriseDefaultRepositoryPermissionSettingInput(clientMutationId, enterpriseId, settingValue)
end

"""
Autogenerated input type of UnmarkIssueAsDuplicate
"""
mutable struct UnmarkIssueAsDuplicateInput <: OfficialGithubSchema
    "\n  ID of the issue or pull request currently considered canonical/authoritative/original.\n  "
    canonicalId::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the issue or pull request currently marked as a duplicate.\n  "
    duplicateId::String
end
function UnmarkIssueAsDuplicateInput(; canonicalId, clientMutationId = nothing, duplicateId)
    UnmarkIssueAsDuplicateInput(canonicalId, clientMutationId, duplicateId)
end

"""
Autogenerated return type of AbortQueuedMigrations
"""
mutable struct AbortQueuedMigrationsPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Did the operation succeed?\n  "
    success::Union{Bool, Missing, Nothing}
end
function AbortQueuedMigrationsPayload(; clientMutationId = nothing, success = nothing)
    AbortQueuedMigrationsPayload(clientMutationId, success)
end

"""
Information from a check run analysis to specific lines of code.
"""
mutable struct CheckAnnotationData <: OfficialGithubSchema
    "\n  Represents an annotation's information level\n  "
    annotationLevel::CheckAnnotationLevel.T
    "\n  The location of the annotation\n  "
    location::CheckAnnotationRange
    "\n  A short description of the feedback for these lines of code.\n  "
    message::String
    "\n  The path of the file to add an annotation to.\n  "
    path::String
    "\n  Details about this annotation.\n  "
    rawDetails::Union{String, Missing, Nothing}
    "\n  The title that represents the annotation.\n  "
    title::Union{String, Missing, Nothing}
end
function CheckAnnotationData(; annotationLevel, location, message, path, rawDetails = nothing, title = nothing)
    CheckAnnotationData(annotationLevel, location, message, path, rawDetails, title)
end

"""
Images attached to the check run output displayed in the GitHub pull request UI.
"""
mutable struct CheckRunOutputImage <: OfficialGithubSchema
    "\n  The alternative text for the image.\n  "
    alt::String
    "\n  A short image description.\n  "
    caption::Union{String, Missing, Nothing}
    "\n  The full URL of the image.\n  "
    imageUrl::URI
end
function CheckRunOutputImage(; alt, caption = nothing, imageUrl)
    CheckRunOutputImage(alt, caption, imageUrl)
end

"""
Descriptive details about the check run.
"""
mutable struct CheckRunOutput <: OfficialGithubSchema
    "\n  The annotations that are made as part of the check run.\n  "
    annotations::Union{Vector{CheckAnnotationData}, Missing, Nothing}
    "\n  Images attached to the check run output displayed in the GitHub pull request UI.\n  "
    images::Union{Vector{CheckRunOutputImage}, Missing, Nothing}
    "\n  The summary of the check run (supports Commonmark).\n  "
    summary::String
    "\n  The details of the check run (supports Commonmark).\n  "
    text::Union{String, Missing, Nothing}
    "\n  A title to provide for this check run.\n  "
    title::String
end
function CheckRunOutput(; annotations = nothing, images = nothing, summary, text = nothing, title)
    CheckRunOutput(annotations, images, summary, text, title)
end

"""
Autogenerated input type of UpdateProject
"""
mutable struct UpdateProjectInput <: OfficialGithubSchema
    "\n  The description of project.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The name of project.\n  "
    name::Union{String, Missing, Nothing}
    "\n  The Project ID to update.\n  "
    projectId::String
    "\n  Whether the project is public or not.\n  "
    public::Union{Bool, Missing, Nothing}
    "\n  Whether the project is open or closed.\n  "
    state::Union{ProjectState.T, Missing, Nothing}
end
function UpdateProjectInput(; body = nothing, clientMutationId = nothing, name = nothing, projectId, public = nothing, state = nothing)
    UpdateProjectInput(body, clientMutationId, name, projectId, public, state)
end

"""
Ways in which lists of releases can be ordered upon return.
"""
mutable struct ReleaseOrder <: OfficialGithubSchema
    "\n  The direction in which to order releases by the specified field.\n  "
    direction::OrderDirection.T
    "\n  The field in which to order releases by.\n  "
    field::ReleaseOrderField.T
end
function ReleaseOrder(; direction, field)
    ReleaseOrder(direction, field)
end

"""
Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
"""
mutable struct RevokeEnterpriseOrganizationsMigratorRoleInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.\n  "
    enterpriseId::String
    "\n  The login of the user to revoke the migrator role\n  "
    login::String
end
function RevokeEnterpriseOrganizationsMigratorRoleInput(; clientMutationId = nothing, enterpriseId, login)
    RevokeEnterpriseOrganizationsMigratorRoleInput(clientMutationId, enterpriseId, login)
end

"""
Autogenerated input type of DeletePackageVersion
"""
mutable struct DeletePackageVersionInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the package version to be deleted.\n  "
    packageVersionId::String
end
function DeletePackageVersionInput(; clientMutationId = nothing, packageVersionId)
    DeletePackageVersionInput(clientMutationId, packageVersionId)
end

"""
Autogenerated return type of CreateEnterpriseOrganization
"""
mutable struct CreateEnterpriseOrganizationPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise that owns the created organization.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  The organization that was created.\n  "
    organization::Union{Organization, Missing, Nothing}
end
function CreateEnterpriseOrganizationPayload(; clientMutationId = nothing, enterprise = nothing, organization = nothing)
    CreateEnterpriseOrganizationPayload(clientMutationId, enterprise, organization)
end

"""
Autogenerated return type of UpdateCheckSuitePreferences
"""
mutable struct UpdateCheckSuitePreferencesPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated repository.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function UpdateCheckSuitePreferencesPayload(; clientMutationId = nothing, repository = nothing)
    UpdateCheckSuitePreferencesPayload(clientMutationId, repository)
end

"""
Autogenerated input type of UnmarkFileAsViewed
"""
mutable struct UnmarkFileAsViewedInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The path of the file to mark as unviewed\n  "
    path::String
    "\n  The Node ID of the pull request.\n  "
    pullRequestId::String
end
function UnmarkFileAsViewedInput(; clientMutationId = nothing, path, pullRequestId)
    UnmarkFileAsViewedInput(clientMutationId, path, pullRequestId)
end

"""
An edge in a connection.
"""
mutable struct SecurityAdvisoryEdge <: OfficialGithubSchema
    "\n  A cursor for use in pagination.\n  "
    cursor::String
    "\n  The item at the end of the edge.\n  "
    node::Union{SecurityAdvisory, Missing, Nothing}
end
function SecurityAdvisoryEdge(; cursor, node = nothing)
    SecurityAdvisoryEdge(cursor, node)
end

"""
Autogenerated input type of UpdateRefs
"""
mutable struct UpdateRefsInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A list of ref updates.\n  "
    refUpdates::Vector{RefUpdate}
    "\n  The Node ID of the repository.\n  "
    repositoryId::String
end
function UpdateRefsInput(; clientMutationId = nothing, refUpdates, repositoryId)
    UpdateRefsInput(clientMutationId, refUpdates, repositoryId)
end

"""
Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole
"""
mutable struct GrantEnterpriseOrganizationsMigratorRolePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The organizations that had the migrator role applied to for the given user.\n  "
    organizations::Union{OrganizationConnection, Missing, Nothing}
end
function GrantEnterpriseOrganizationsMigratorRolePayload(; clientMutationId = nothing, organizations = nothing)
    GrantEnterpriseOrganizationsMigratorRolePayload(clientMutationId, organizations)
end

"""
The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
"""
mutable struct ProjectV2FieldValue <: OfficialGithubSchema
    "\n  The ISO 8601 date to set on the field.\n  "
    date::Union{Date, Missing, Nothing}
    "\n  The id of the iteration to set on the field.\n  "
    iterationId::Union{String, Missing, Nothing}
    "\n  The number to set on the field.\n  "
    number::Union{Float64, Missing, Nothing}
    "\n  The id of the single select option to set on the field.\n  "
    singleSelectOptionId::Union{String, Missing, Nothing}
    "\n  The text to set on the field.\n  "
    text::Union{String, Missing, Nothing}
end
function ProjectV2FieldValue(; date = nothing, iterationId = nothing, number = nothing, singleSelectOptionId = nothing, text = nothing)
    ProjectV2FieldValue(date, iterationId, number, singleSelectOptionId, text)
end

"""
Autogenerated return type of MarkDiscussionCommentAsAnswer
"""
mutable struct MarkDiscussionCommentAsAnswerPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The discussion that includes the chosen comment.\n  "
    discussion::Union{Discussion, Missing, Nothing}
end
function MarkDiscussionCommentAsAnswerPayload(; clientMutationId = nothing, discussion = nothing)
    MarkDiscussionCommentAsAnswerPayload(clientMutationId, discussion)
end

"""
Ways in which lists of projects can be ordered upon return.
"""
mutable struct ProjectV2Order <: OfficialGithubSchema
    "\n  The direction in which to order projects by the specified field.\n  "
    direction::OrderDirection.T
    "\n  The field in which to order projects by.\n  "
    field::ProjectV2OrderField.T
end
function ProjectV2Order(; direction, field)
    ProjectV2Order(direction, field)
end

"""
Represents information about the GitHub instance.
"""
mutable struct GitHubMetadata <: OfficialGithubSchema
    "\n  Returns a String that's a SHA of `github-services`\n  "
    gitHubServicesSha::GitObjectID
    "\n  IP addresses that users connect to for git operations\n  "
    gitIpAddresses::Union{Vector{String}, Missing, Nothing}
    "\n  IP addresses that service hooks are sent from\n  "
    hookIpAddresses::Union{Vector{String}, Missing, Nothing}
    "\n  IP addresses that the importer connects from\n  "
    importerIpAddresses::Union{Vector{String}, Missing, Nothing}
    "\n  Whether or not users are verified\n  "
    isPasswordAuthenticationVerifiable::Bool
    "\n  IP addresses for GitHub Pages' A records\n  "
    pagesIpAddresses::Union{Vector{String}, Missing, Nothing}
end
function GitHubMetadata(; gitHubServicesSha, gitIpAddresses = nothing, hookIpAddresses = nothing, importerIpAddresses = nothing, isPasswordAuthenticationVerifiable, pagesIpAddresses = nothing)
    GitHubMetadata(gitHubServicesSha, gitIpAddresses, hookIpAddresses, importerIpAddresses, isPasswordAuthenticationVerifiable, pagesIpAddresses)
end

"""
Ways in which lists of labels can be ordered upon return.
"""
mutable struct LabelOrder <: OfficialGithubSchema
    "\n  The direction in which to order labels by the specified field.\n  "
    direction::OrderDirection.T
    "\n  The field in which to order labels by.\n  "
    field::LabelOrderField.T
end
function LabelOrder(; direction, field)
    LabelOrder(direction, field)
end

"""
Autogenerated input type of CloneTemplateRepository
"""
mutable struct CloneTemplateRepositoryInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A short description of the new repository.\n  "
    description::Union{String, Missing, Nothing}
    "\n  Whether to copy all branches from the template to the new repository. Defaults\n  to copying only the default branch of the template.\n  "
    includeAllBranches::Union{Bool, Missing, Nothing}
    "\n  The name of the new repository.\n  "
    name::String
    "\n  The ID of the owner for the new repository.\n  "
    ownerId::String
    "\n  The Node ID of the template repository.\n  "
    repositoryId::String
    "\n  Indicates the repository's visibility level.\n  "
    visibility::RepositoryVisibility.T
end
function CloneTemplateRepositoryInput(; clientMutationId = nothing, description = nothing, includeAllBranches = false, name, ownerId, repositoryId, visibility)
    CloneTemplateRepositoryInput(clientMutationId, description, includeAllBranches, name, ownerId, repositoryId, visibility)
end

"""
Autogenerated return type of UpdateSubscription
"""
mutable struct UpdateSubscriptionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The input subscribable entity.\n  "
    subscribable::Union{Subscribable, Missing, Nothing}
end
function UpdateSubscriptionPayload(; clientMutationId = nothing, subscribable = nothing)
    UpdateSubscriptionPayload(clientMutationId, subscribable)
end

"""
Autogenerated return type of UpdateProjectV2DraftIssue
"""
mutable struct UpdateProjectV2DraftIssuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The draft issue updated in the project.\n  "
    draftIssue::Union{DraftIssue, Missing, Nothing}
end
function UpdateProjectV2DraftIssuePayload(; clientMutationId = nothing, draftIssue = nothing)
    UpdateProjectV2DraftIssuePayload(clientMutationId, draftIssue)
end

"""
Autogenerated input type of DeleteProjectCard
"""
mutable struct DeleteProjectCardInput <: OfficialGithubSchema
    "\n  The id of the card to delete.\n  "
    cardId::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function DeleteProjectCardInput(; cardId, clientMutationId = nothing)
    DeleteProjectCardInput(cardId, clientMutationId)
end

"""
Ordering options for project v2 item field value connections
"""
mutable struct ProjectV2ItemFieldValueOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order the project v2 item field values by.\n  "
    field::ProjectV2ItemFieldValueOrderField.T
end
function ProjectV2ItemFieldValueOrder(; direction, field)
    ProjectV2ItemFieldValueOrder(direction, field)
end

"""
Autogenerated input type of UnlinkProjectV2FromRepository
"""
mutable struct UnlinkProjectV2FromRepositoryInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the project to unlink from the repository.\n  "
    projectId::String
    "\n  The ID of the repository to unlink from the project.\n  "
    repositoryId::String
end
function UnlinkProjectV2FromRepositoryInput(; clientMutationId = nothing, projectId, repositoryId)
    UnlinkProjectV2FromRepositoryInput(clientMutationId, projectId, repositoryId)
end

"""
Represents a GPG signature on a Commit or Tag.
"""
mutable struct GpgSignature <: OfficialGithubSchema
    "\n  Email used to sign this object.\n  "
    email::String
    "\n  True if the signature is valid and verified by GitHub.\n  "
    isValid::Bool
    "\n  Hex-encoded ID of the key that signed this object.\n  "
    keyId::Union{String, Missing, Nothing}
    "\n  Payload for GPG signing object. Raw ODB object without the signature header.\n  "
    payload::String
    "\n  ASCII-armored signature header from object.\n  "
    signature::String
    "\n  GitHub user corresponding to the email signing this commit.\n  "
    signer::Union{User, Missing, Nothing}
    "\n  The state of this signature. `VALID` if signature is valid and verified by\n  GitHub, otherwise represents reason why signature is considered invalid.\n  "
    state::GitSignatureState.T
    "\n  True if the signature was made with GitHub's signing key.\n  "
    wasSignedByGitHub::Bool
end
function GpgSignature(; email, isValid, keyId = nothing, payload, signature, signer = nothing, state, wasSignedByGitHub)
    GpgSignature(email, isValid, keyId, payload, signature, signer, state, wasSignedByGitHub)
end

"""
Autogenerated return type of DeleteIssueComment
"""
mutable struct DeleteIssueCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function DeleteIssueCommentPayload(; clientMutationId = nothing)
    DeleteIssueCommentPayload(clientMutationId)
end

"""
Represents a Git tag.
"""
mutable struct Tag <: OfficialGithubSchema
    "\n  An abbreviated version of the Git object ID\n  "
    abbreviatedOid::String
    "\n  The HTTP path for this Git object\n  "
    commitResourcePath::URI
    "\n  The HTTP URL for this Git object\n  "
    commitUrl::URI
    id::String
    "\n  The Git tag message.\n  "
    message::Union{String, Missing, Nothing}
    "\n  The Git tag name.\n  "
    name::String
    "\n  The Git object ID\n  "
    oid::GitObjectID
    "\n  The Repository the Git object belongs to\n  "
    repository::Repository
    "\n  Details about the tag author.\n  "
    tagger::Union{GitActor, Missing, Nothing}
    "\n  The Git object the tag points to.\n  "
    target::GitObject
end
function Tag(; abbreviatedOid, commitResourcePath, commitUrl, id, message = nothing, name, oid, repository, tagger = nothing, target)
    Tag(abbreviatedOid, commitResourcePath, commitUrl, id, message, name, oid, repository, tagger, target)
end

"""
Ways in which team discussion connections can be ordered.
"""
mutable struct TeamDiscussionOrder <: OfficialGithubSchema
    "\n  The direction in which to order nodes.\n  "
    direction::OrderDirection.T
    "\n  The field by which to order nodes.\n  "
    field::TeamDiscussionOrderField.T
end
function TeamDiscussionOrder(; direction, field)
    TeamDiscussionOrder(direction, field)
end

"""
Autogenerated input type of RerequestCheckSuite
"""
mutable struct RerequestCheckSuiteInput <: OfficialGithubSchema
    "\n  The Node ID of the check suite.\n  "
    checkSuiteId::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the repository.\n  "
    repositoryId::String
end
function RerequestCheckSuiteInput(; checkSuiteId, clientMutationId = nothing, repositoryId)
    RerequestCheckSuiteInput(checkSuiteId, clientMutationId, repositoryId)
end

"""
Autogenerated return type of UnfollowOrganization
"""
mutable struct UnfollowOrganizationPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The organization that was unfollowed.\n  "
    organization::Union{Organization, Missing, Nothing}
end
function UnfollowOrganizationPayload(; clientMutationId = nothing, organization = nothing)
    UnfollowOrganizationPayload(clientMutationId, organization)
end

"""
Autogenerated return type of DeleteTeamDiscussionComment
"""
mutable struct DeleteTeamDiscussionCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function DeleteTeamDiscussionCommentPayload(; clientMutationId = nothing)
    DeleteTeamDiscussionCommentPayload(clientMutationId)
end

"""
Autogenerated return type of ImportProject
"""
mutable struct ImportProjectPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new Project!\n  "
    project::Union{Project, Missing, Nothing}
end
function ImportProjectPayload(; clientMutationId = nothing, project = nothing)
    ImportProjectPayload(clientMutationId, project)
end

"""
Autogenerated input type of RemoveEnterpriseIdentityProvider
"""
mutable struct RemoveEnterpriseIdentityProviderInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise from which to remove the identity provider.\n  "
    enterpriseId::String
end
function RemoveEnterpriseIdentityProviderInput(; clientMutationId = nothing, enterpriseId)
    RemoveEnterpriseIdentityProviderInput(clientMutationId, enterpriseId)
end

"""
Autogenerated input type of VerifyVerifiableDomain
"""
mutable struct VerifyVerifiableDomainInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the verifiable domain to verify.\n  "
    id::String
end
function VerifyVerifiableDomainInput(; clientMutationId = nothing, id)
    VerifyVerifiableDomainInput(clientMutationId, id)
end

"""
Autogenerated return type of CreateSponsorship
"""
mutable struct CreateSponsorshipPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The sponsorship that was started.\n  "
    sponsorship::Union{Sponsorship, Missing, Nothing}
end
function CreateSponsorshipPayload(; clientMutationId = nothing, sponsorship = nothing)
    CreateSponsorshipPayload(clientMutationId, sponsorship)
end

"""
Autogenerated return type of UpdateBranchProtectionRule
"""
mutable struct UpdateBranchProtectionRulePayload <: OfficialGithubSchema
    "\n  The newly created BranchProtectionRule.\n  "
    branchProtectionRule::Union{BranchProtectionRule, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function UpdateBranchProtectionRulePayload(; branchProtectionRule = nothing, clientMutationId = nothing)
    UpdateBranchProtectionRulePayload(branchProtectionRule, clientMutationId)
end

"""
Autogenerated input type of AddPullRequestReviewComment
"""
mutable struct AddPullRequestReviewCommentInput <: OfficialGithubSchema
    "\n  The text of the comment.\n  "
    body::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The SHA of the commit to comment on.\n  "
    commitOID::Union{GitObjectID, Missing, Nothing}
    "\n  The comment id to reply to.\n  "
    inReplyTo::Union{String, Missing, Nothing}
    "\n  The relative path of the file to comment on.\n  "
    path::Union{String, Missing, Nothing}
    "\n  The line index in the diff to comment on.\n  "
    position::Union{Int, Missing, Nothing}
    "\n  The node ID of the pull request reviewing\n  "
    pullRequestId::Union{String, Missing, Nothing}
    "\n  The Node ID of the review to modify.\n  "
    pullRequestReviewId::Union{String, Missing, Nothing}
end
function AddPullRequestReviewCommentInput(; body, clientMutationId = nothing, commitOID = nothing, inReplyTo = nothing, path = nothing, position = nothing, pullRequestId = nothing, pullRequestReviewId = nothing)
    AddPullRequestReviewCommentInput(body, clientMutationId, commitOID, inReplyTo, path, position, pullRequestId, pullRequestReviewId)
end

"""
Autogenerated input type of MoveProjectColumn
"""
mutable struct MoveProjectColumnInput <: OfficialGithubSchema
    "\n  Place the new column after the column with this id. Pass null to place it at the front.\n  "
    afterColumnId::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The id of the column to move.\n  "
    columnId::String
end
function MoveProjectColumnInput(; afterColumnId = nothing, clientMutationId = nothing, columnId)
    MoveProjectColumnInput(afterColumnId, clientMutationId, columnId)
end

"""
Ways in which lists of issue comments can be ordered upon return.
"""
mutable struct IssueCommentOrder <: OfficialGithubSchema
    "\n  The direction in which to order issue comments by the specified field.\n  "
    direction::OrderDirection.T
    "\n  The field in which to order issue comments by.\n  "
    field::IssueCommentOrderField.T
end
function IssueCommentOrder(; direction, field)
    IssueCommentOrder(direction, field)
end

"""
Autogenerated input type of CreateTeamDiscussionComment
"""
mutable struct CreateTeamDiscussionCommentInput <: OfficialGithubSchema
    "\n  The content of the comment.\n  "
    body::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the discussion to which the comment belongs.\n  "
    discussionId::String
end
function CreateTeamDiscussionCommentInput(; body, clientMutationId = nothing, discussionId)
    CreateTeamDiscussionCommentInput(body, clientMutationId, discussionId)
end

"""
Autogenerated return type of CreateRepository
"""
mutable struct CreateRepositoryPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new repository.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function CreateRepositoryPayload(; clientMutationId = nothing, repository = nothing)
    CreateRepositoryPayload(clientMutationId, repository)
end

"""
Represents an unknown signature on a Commit or Tag.
"""
mutable struct UnknownSignature <: OfficialGithubSchema
    "\n  Email used to sign this object.\n  "
    email::String
    "\n  True if the signature is valid and verified by GitHub.\n  "
    isValid::Bool
    "\n  Payload for GPG signing object. Raw ODB object without the signature header.\n  "
    payload::String
    "\n  ASCII-armored signature header from object.\n  "
    signature::String
    "\n  GitHub user corresponding to the email signing this commit.\n  "
    signer::Union{User, Missing, Nothing}
    "\n  The state of this signature. `VALID` if signature is valid and verified by\n  GitHub, otherwise represents reason why signature is considered invalid.\n  "
    state::GitSignatureState.T
    "\n  True if the signature was made with GitHub's signing key.\n  "
    wasSignedByGitHub::Bool
end
function UnknownSignature(; email, isValid, payload, signature, signer = nothing, state, wasSignedByGitHub)
    UnknownSignature(email, isValid, payload, signature, signer, state, wasSignedByGitHub)
end

"""
Autogenerated return type of CreateTeamDiscussionComment
"""
mutable struct CreateTeamDiscussionCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new comment.\n  "
    teamDiscussionComment::Union{TeamDiscussionComment, Missing, Nothing}
end
function CreateTeamDiscussionCommentPayload(; clientMutationId = nothing, teamDiscussionComment = nothing)
    CreateTeamDiscussionCommentPayload(clientMutationId, teamDiscussionComment)
end

"""
Autogenerated input type of AbortQueuedMigrations
"""
mutable struct AbortQueuedMigrationsInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the organization that is running the migrations.\n  "
    ownerId::String
end
function AbortQueuedMigrationsInput(; clientMutationId = nothing, ownerId)
    AbortQueuedMigrationsInput(clientMutationId, ownerId)
end

"""
Autogenerated input type of FollowOrganization
"""
mutable struct FollowOrganizationInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the organization to follow.\n  "
    organizationId::String
end
function FollowOrganizationInput(; clientMutationId = nothing, organizationId)
    FollowOrganizationInput(clientMutationId, organizationId)
end

"""
Ordering options for contribution connections.
"""
mutable struct ContributionOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
end
function ContributionOrder(; direction)
    ContributionOrder(direction)
end

"""
Autogenerated input type of CancelSponsorship
"""
mutable struct CancelSponsorshipInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the user or organization who is acting as the sponsor, paying for\n  the sponsorship. Required if sponsorLogin is not given.\n  "
    sponsorId::Union{String, Missing, Nothing}
    "\n  The username of the user or organization who is acting as the sponsor, paying\n  for the sponsorship. Required if sponsorId is not given.\n  "
    sponsorLogin::Union{String, Missing, Nothing}
    "\n  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.\n  "
    sponsorableId::Union{String, Missing, Nothing}
    "\n  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.\n  "
    sponsorableLogin::Union{String, Missing, Nothing}
end
function CancelSponsorshipInput(; clientMutationId = nothing, sponsorId = nothing, sponsorLogin = nothing, sponsorableId = nothing, sponsorableLogin = nothing)
    CancelSponsorshipInput(clientMutationId, sponsorId, sponsorLogin, sponsorableId, sponsorableLogin)
end

"""
Autogenerated input type of UnarchiveRepository
"""
mutable struct UnarchiveRepositoryInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the repository to unarchive.\n  "
    repositoryId::String
end
function UnarchiveRepositoryInput(; clientMutationId = nothing, repositoryId)
    UnarchiveRepositoryInput(clientMutationId, repositoryId)
end

"""
Autogenerated return type of UpdateProjectCard
"""
mutable struct UpdateProjectCardPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated ProjectCard.\n  "
    projectCard::Union{ProjectCard, Missing, Nothing}
end
function UpdateProjectCardPayload(; clientMutationId = nothing, projectCard = nothing)
    UpdateProjectCardPayload(clientMutationId, projectCard)
end

"""
Autogenerated input type of AddDiscussionComment
"""
mutable struct AddDiscussionCommentInput <: OfficialGithubSchema
    "\n  The contents of the comment.\n  "
    body::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the discussion to comment on.\n  "
    discussionId::String
    "\n  The Node ID of the discussion comment within this discussion to reply to.\n  "
    replyToId::Union{String, Missing, Nothing}
end
function AddDiscussionCommentInput(; body, clientMutationId = nothing, discussionId, replyToId = nothing)
    AddDiscussionCommentInput(body, clientMutationId, discussionId, replyToId)
end

"""
Autogenerated return type of EnablePullRequestAutoMerge
"""
mutable struct EnablePullRequestAutoMergePayload <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The pull request auto-merge was enabled on.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
end
function EnablePullRequestAutoMergePayload(; actor = nothing, clientMutationId = nothing, pullRequest = nothing)
    EnablePullRequestAutoMergePayload(actor, clientMutationId, pullRequest)
end

"""
Autogenerated return type of UpdateTeamsRepository
"""
mutable struct UpdateTeamsRepositoryPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The repository that was updated.\n  "
    repository::Union{Repository, Missing, Nothing}
    "\n  The teams granted permission on the repository.\n  "
    teams::Union{Vector{Team}, Missing, Nothing}
end
function UpdateTeamsRepositoryPayload(; clientMutationId = nothing, repository = nothing, teams = nothing)
    UpdateTeamsRepositoryPayload(clientMutationId, repository, teams)
end

"""
Ordering options for Enterprise Server user accounts upload connections.
"""
mutable struct EnterpriseServerUserAccountsUploadOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order user accounts uploads by.\n  "
    field::EnterpriseServerUserAccountsUploadOrderField.T
end
function EnterpriseServerUserAccountsUploadOrder(; direction, field)
    EnterpriseServerUserAccountsUploadOrder(direction, field)
end

"""
Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
"""
mutable struct UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated allow private repository forking setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the allow private repository forking setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated input type of ConvertProjectCardNoteToIssue
"""
mutable struct ConvertProjectCardNoteToIssueInput <: OfficialGithubSchema
    "\n  The body of the newly created issue.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ProjectCard ID to convert.\n  "
    projectCardId::String
    "\n  The ID of the repository to create the issue in.\n  "
    repositoryId::String
    "\n  The title of the newly created issue. Defaults to the card's note text.\n  "
    title::Union{String, Missing, Nothing}
end
function ConvertProjectCardNoteToIssueInput(; body = nothing, clientMutationId = nothing, projectCardId, repositoryId, title = nothing)
    ConvertProjectCardNoteToIssueInput(body, clientMutationId, projectCardId, repositoryId, title)
end

"""
Autogenerated return type of UpdateTeamReviewAssignment
"""
mutable struct UpdateTeamReviewAssignmentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The team that was modified\n  "
    team::Union{Team, Missing, Nothing}
end
function UpdateTeamReviewAssignmentPayload(; clientMutationId = nothing, team = nothing)
    UpdateTeamReviewAssignmentPayload(clientMutationId, team)
end

"""
Autogenerated return type of AcceptEnterpriseAdministratorInvitation
"""
mutable struct AcceptEnterpriseAdministratorInvitationPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The invitation that was accepted.\n  "
    invitation::Union{EnterpriseAdministratorInvitation, Missing, Nothing}
    "\n  A message confirming the result of accepting an administrator invitation.\n  "
    message::Union{String, Missing, Nothing}
end
function AcceptEnterpriseAdministratorInvitationPayload(; clientMutationId = nothing, invitation = nothing, message = nothing)
    AcceptEnterpriseAdministratorInvitationPayload(clientMutationId, invitation, message)
end

"""
Autogenerated return type of RemoveEnterpriseAdmin
"""
mutable struct RemoveEnterpriseAdminPayload <: OfficialGithubSchema
    "\n  The user who was removed as an administrator.\n  "
    admin::Union{User, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated enterprise.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of removing an administrator.\n  "
    message::Union{String, Missing, Nothing}
    "\n  The viewer performing the mutation.\n  "
    viewer::Union{User, Missing, Nothing}
end
function RemoveEnterpriseAdminPayload(; admin = nothing, clientMutationId = nothing, enterprise = nothing, message = nothing, viewer = nothing)
    RemoveEnterpriseAdminPayload(admin, clientMutationId, enterprise, message, viewer)
end

"""
Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
"""
mutable struct UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated members can delete repositories setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the members can delete repositories setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated return type of UpdateSponsorshipPreferences
"""
mutable struct UpdateSponsorshipPreferencesPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The sponsorship that was updated.\n  "
    sponsorship::Union{Sponsorship, Missing, Nothing}
end
function UpdateSponsorshipPreferencesPayload(; clientMutationId = nothing, sponsorship = nothing)
    UpdateSponsorshipPreferencesPayload(clientMutationId, sponsorship)
end

"""
Autogenerated return type of ReopenPullRequest
"""
mutable struct ReopenPullRequestPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The pull request that was reopened.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
end
function ReopenPullRequestPayload(; clientMutationId = nothing, pullRequest = nothing)
    ReopenPullRequestPayload(clientMutationId, pullRequest)
end

"""
Autogenerated return type of UpdateRepository
"""
mutable struct UpdateRepositoryPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated repository.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function UpdateRepositoryPayload(; clientMutationId = nothing, repository = nothing)
    UpdateRepositoryPayload(clientMutationId, repository)
end

"""
Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
"""
mutable struct UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A message confirming the result of updating the allow private repository forking setting.\n  "
    message::Union{String, Missing, Nothing}
    "\n  The organization with the updated allow private repository forking setting.\n  "
    organization::Union{Organization, Missing, Nothing}
end
function UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload(; clientMutationId = nothing, message = nothing, organization = nothing)
    UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload(clientMutationId, message, organization)
end

"""
Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting
"""
mutable struct UpdateEnterpriseRepositoryProjectsSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated repository projects setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the repository projects setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseRepositoryProjectsSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseRepositoryProjectsSettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated return type of DeleteProjectV2Item
"""
mutable struct DeleteProjectV2ItemPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the deleted item.\n  "
    deletedItemId::Union{String, Missing, Nothing}
end
function DeleteProjectV2ItemPayload(; clientMutationId = nothing, deletedItemId = nothing)
    DeleteProjectV2ItemPayload(clientMutationId, deletedItemId)
end

"""
Autogenerated return type of AddReaction
"""
mutable struct AddReactionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The reaction object.\n  "
    reaction::Union{Reaction, Missing, Nothing}
    "\n  The reactable subject.\n  "
    subject::Union{Reactable, Missing, Nothing}
end
function AddReactionPayload(; clientMutationId = nothing, reaction = nothing, subject = nothing)
    AddReactionPayload(clientMutationId, reaction, subject)
end

"""
Autogenerated return type of UpdatePullRequest
"""
mutable struct UpdatePullRequestPayload <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated pull request.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
end
function UpdatePullRequestPayload(; actor = nothing, clientMutationId = nothing, pullRequest = nothing)
    UpdatePullRequestPayload(actor, clientMutationId, pullRequest)
end

"""
Autogenerated return type of DeleteDiscussionComment
"""
mutable struct DeleteDiscussionCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The discussion comment that was just deleted.\n  "
    comment::Union{DiscussionComment, Missing, Nothing}
end
function DeleteDiscussionCommentPayload(; clientMutationId = nothing, comment = nothing)
    DeleteDiscussionCommentPayload(clientMutationId, comment)
end

"""
Autogenerated return type of RemoveLabelsFromLabelable
"""
mutable struct RemoveLabelsFromLabelablePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Labelable the labels were removed from.\n  "
    labelable::Union{Labelable, Missing, Nothing}
end
function RemoveLabelsFromLabelablePayload(; clientMutationId = nothing, labelable = nothing)
    RemoveLabelsFromLabelablePayload(clientMutationId, labelable)
end

"""
Autogenerated return type of UpdateProjectV2ItemPosition
"""
mutable struct UpdateProjectV2ItemPositionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The items in the new order\n  "
    items::Union{ProjectV2ItemConnection, Missing, Nothing}
end
function UpdateProjectV2ItemPositionPayload(; clientMutationId = nothing, items = nothing)
    UpdateProjectV2ItemPositionPayload(clientMutationId, items)
end

"""
Autogenerated return type of DeleteVerifiableDomain
"""
mutable struct DeleteVerifiableDomainPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The owning account from which the domain was deleted.\n  "
    owner::Union{VerifiableDomainOwner, Missing, Nothing}
end
function DeleteVerifiableDomainPayload(; clientMutationId = nothing, owner = nothing)
    DeleteVerifiableDomainPayload(clientMutationId, owner)
end

"""
Autogenerated return type of RegenerateVerifiableDomainToken
"""
mutable struct RegenerateVerifiableDomainTokenPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The verification token that was generated.\n  "
    verificationToken::Union{String, Missing, Nothing}
end
function RegenerateVerifiableDomainTokenPayload(; clientMutationId = nothing, verificationToken = nothing)
    RegenerateVerifiableDomainTokenPayload(clientMutationId, verificationToken)
end

"""
Autogenerated return type of AddComment
"""
mutable struct AddCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The edge from the subject's comment connection.\n  "
    commentEdge::Union{IssueCommentEdge, Missing, Nothing}
    "\n  The subject\n  "
    subject::Union{Node, Missing, Nothing}
    "\n  The edge from the subject's timeline connection.\n  "
    timelineEdge::Union{IssueTimelineItemEdge, Missing, Nothing}
end
function AddCommentPayload(; clientMutationId = nothing, commentEdge = nothing, subject = nothing, timelineEdge = nothing)
    AddCommentPayload(clientMutationId, commentEdge, subject, timelineEdge)
end

"""
Autogenerated return type of AddProjectDraftIssue
"""
mutable struct AddProjectDraftIssuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The draft issue added to the project.\n  "
    projectNextItem::Union{ProjectNextItem, Missing, Nothing}
end
function AddProjectDraftIssuePayload(; clientMutationId = nothing, projectNextItem = nothing)
    AddProjectDraftIssuePayload(clientMutationId, projectNextItem)
end

"""
Autogenerated return type of AddProjectColumn
"""
mutable struct AddProjectColumnPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The edge from the project's column connection.\n  "
    columnEdge::Union{ProjectColumnEdge, Missing, Nothing}
    "\n  The project\n  "
    project::Union{Project, Missing, Nothing}
end
function AddProjectColumnPayload(; clientMutationId = nothing, columnEdge = nothing, project = nothing)
    AddProjectColumnPayload(clientMutationId, columnEdge, project)
end

"""
Autogenerated return type of LinkProjectV2ToTeam
"""
mutable struct LinkProjectV2ToTeamPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The team the project is linked to\n  "
    team::Union{Team, Missing, Nothing}
end
function LinkProjectV2ToTeamPayload(; clientMutationId = nothing, team = nothing)
    LinkProjectV2ToTeamPayload(clientMutationId, team)
end

"""
Autogenerated return type of CreateTeamDiscussion
"""
mutable struct CreateTeamDiscussionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new discussion.\n  "
    teamDiscussion::Union{TeamDiscussion, Missing, Nothing}
end
function CreateTeamDiscussionPayload(; clientMutationId = nothing, teamDiscussion = nothing)
    CreateTeamDiscussionPayload(clientMutationId, teamDiscussion)
end

"""
Autogenerated return type of DeleteDeployment
"""
mutable struct DeleteDeploymentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function DeleteDeploymentPayload(; clientMutationId = nothing)
    DeleteDeploymentPayload(clientMutationId)
end

"""
Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
"""
mutable struct UpdateOrganizationWebCommitSignoffSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A message confirming the result of updating the web commit signoff setting.\n  "
    message::Union{String, Missing, Nothing}
    "\n  The organization with the updated web commit signoff setting.\n  "
    organization::Union{Organization, Missing, Nothing}
end
function UpdateOrganizationWebCommitSignoffSettingPayload(; clientMutationId = nothing, message = nothing, organization = nothing)
    UpdateOrganizationWebCommitSignoffSettingPayload(clientMutationId, message, organization)
end

"""
Autogenerated return type of MergePullRequest
"""
mutable struct MergePullRequestPayload <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The pull request that was merged.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
end
function MergePullRequestPayload(; actor = nothing, clientMutationId = nothing, pullRequest = nothing)
    MergePullRequestPayload(actor, clientMutationId, pullRequest)
end

"""
Autogenerated return type of DeleteBranchProtectionRule
"""
mutable struct DeleteBranchProtectionRulePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function DeleteBranchProtectionRulePayload(; clientMutationId = nothing)
    DeleteBranchProtectionRulePayload(clientMutationId)
end

"""
Autogenerated return type of RerequestCheckSuite
"""
mutable struct RerequestCheckSuitePayload <: OfficialGithubSchema
    "\n  The requested check suite.\n  "
    checkSuite::Union{CheckSuite, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function RerequestCheckSuitePayload(; checkSuite = nothing, clientMutationId = nothing)
    RerequestCheckSuitePayload(checkSuite, clientMutationId)
end

"""
Autogenerated return type of DeleteTeamDiscussion
"""
mutable struct DeleteTeamDiscussionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function DeleteTeamDiscussionPayload(; clientMutationId = nothing)
    DeleteTeamDiscussionPayload(clientMutationId)
end

"""
Autogenerated return type of AddPullRequestReviewThread
"""
mutable struct AddPullRequestReviewThreadPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The newly created thread.\n  "
    thread::Union{PullRequestReviewThread, Missing, Nothing}
end
function AddPullRequestReviewThreadPayload(; clientMutationId = nothing, thread = nothing)
    AddPullRequestReviewThreadPayload(clientMutationId, thread)
end

"""
Autogenerated return type of DeleteProject
"""
mutable struct DeleteProjectPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The repository or organization the project was removed from.\n  "
    owner::Union{ProjectOwner, Missing, Nothing}
end
function DeleteProjectPayload(; clientMutationId = nothing, owner = nothing)
    DeleteProjectPayload(clientMutationId, owner)
end

"""
Autogenerated return type of UpdateIssueComment
"""
mutable struct UpdateIssueCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated comment.\n  "
    issueComment::Union{IssueComment, Missing, Nothing}
end
function UpdateIssueCommentPayload(; clientMutationId = nothing, issueComment = nothing)
    UpdateIssueCommentPayload(clientMutationId, issueComment)
end

"""
Autogenerated return type of UpdateProjectV2ItemFieldValue
"""
mutable struct UpdateProjectV2ItemFieldValuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated item.\n  "
    projectV2Item::Union{ProjectV2Item, Missing, Nothing}
end
function UpdateProjectV2ItemFieldValuePayload(; clientMutationId = nothing, projectV2Item = nothing)
    UpdateProjectV2ItemFieldValuePayload(clientMutationId, projectV2Item)
end

"""
Autogenerated return type of AddEnterpriseOrganizationMember
"""
mutable struct AddEnterpriseOrganizationMemberPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The users who were added to the organization.\n  "
    users::Union{Vector{User}, Missing, Nothing}
end
function AddEnterpriseOrganizationMemberPayload(; clientMutationId = nothing, users = nothing)
    AddEnterpriseOrganizationMemberPayload(clientMutationId, users)
end

"""
Autogenerated return type of UpdateProjectNext
"""
mutable struct UpdateProjectNextPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated Project.\n  "
    projectNext::Union{ProjectNext, Missing, Nothing}
end
function UpdateProjectNextPayload(; clientMutationId = nothing, projectNext = nothing)
    UpdateProjectNextPayload(clientMutationId, projectNext)
end

"""
Autogenerated return type of UpdateDiscussion
"""
mutable struct UpdateDiscussionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The modified discussion.\n  "
    discussion::Union{Discussion, Missing, Nothing}
end
function UpdateDiscussionPayload(; clientMutationId = nothing, discussion = nothing)
    UpdateDiscussionPayload(clientMutationId, discussion)
end

"""
Autogenerated return type of UnlinkRepositoryFromProject
"""
mutable struct UnlinkRepositoryFromProjectPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The linked Project.\n  "
    project::Union{Project, Missing, Nothing}
    "\n  The linked Repository.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function UnlinkRepositoryFromProjectPayload(; clientMutationId = nothing, project = nothing, repository = nothing)
    UnlinkRepositoryFromProjectPayload(clientMutationId, project, repository)
end

"""
Autogenerated return type of CreateEnvironment
"""
mutable struct CreateEnvironmentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new or existing environment.\n  "
    environment::Union{Environment, Missing, Nothing}
end
function CreateEnvironmentPayload(; clientMutationId = nothing, environment = nothing)
    CreateEnvironmentPayload(clientMutationId, environment)
end

"""
Autogenerated return type of UnresolveReviewThread
"""
mutable struct UnresolveReviewThreadPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The thread to resolve.\n  "
    thread::Union{PullRequestReviewThread, Missing, Nothing}
end
function UnresolveReviewThreadPayload(; clientMutationId = nothing, thread = nothing)
    UnresolveReviewThreadPayload(clientMutationId, thread)
end

"""
Autogenerated return type of DeletePullRequestReviewComment
"""
mutable struct DeletePullRequestReviewCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The pull request review the deleted comment belonged to.\n  "
    pullRequestReview::Union{PullRequestReview, Missing, Nothing}
    "\n  The deleted pull request review comment.\n  "
    pullRequestReviewComment::Union{PullRequestReviewComment, Missing, Nothing}
end
function DeletePullRequestReviewCommentPayload(; clientMutationId = nothing, pullRequestReview = nothing, pullRequestReviewComment = nothing)
    DeletePullRequestReviewCommentPayload(clientMutationId, pullRequestReview, pullRequestReviewComment)
end

"""
Autogenerated return type of CreateCheckSuite
"""
mutable struct CreateCheckSuitePayload <: OfficialGithubSchema
    "\n  The newly created check suite.\n  "
    checkSuite::Union{CheckSuite, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function CreateCheckSuitePayload(; checkSuite = nothing, clientMutationId = nothing)
    CreateCheckSuitePayload(checkSuite, clientMutationId)
end

"""
Autogenerated return type of CreateProject
"""
mutable struct CreateProjectPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new project.\n  "
    project::Union{Project, Missing, Nothing}
end
function CreateProjectPayload(; clientMutationId = nothing, project = nothing)
    CreateProjectPayload(clientMutationId, project)
end

"""
Autogenerated return type of PinIssue
"""
mutable struct PinIssuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The issue that was pinned\n  "
    issue::Union{Issue, Missing, Nothing}
end
function PinIssuePayload(; clientMutationId = nothing, issue = nothing)
    PinIssuePayload(clientMutationId, issue)
end

"""
Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
"""
mutable struct UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated members can change repository visibility setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the members can change repository visibility setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated return type of SetOrganizationInteractionLimit
"""
mutable struct SetOrganizationInteractionLimitPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The organization that the interaction limit was set for.\n  "
    organization::Union{Organization, Missing, Nothing}
end
function SetOrganizationInteractionLimitPayload(; clientMutationId = nothing, organization = nothing)
    SetOrganizationInteractionLimitPayload(clientMutationId, organization)
end

"""
Autogenerated return type of TransferEnterpriseOrganization
"""
mutable struct TransferEnterpriseOrganizationPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The organization for which a transfer was initiated.\n  "
    organization::Union{Organization, Missing, Nothing}
end
function TransferEnterpriseOrganizationPayload(; clientMutationId = nothing, organization = nothing)
    TransferEnterpriseOrganizationPayload(clientMutationId, organization)
end

"""
Autogenerated return type of DeleteIpAllowListEntry
"""
mutable struct DeleteIpAllowListEntryPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The IP allow list entry that was deleted.\n  "
    ipAllowListEntry::Union{IpAllowListEntry, Missing, Nothing}
end
function DeleteIpAllowListEntryPayload(; clientMutationId = nothing, ipAllowListEntry = nothing)
    DeleteIpAllowListEntryPayload(clientMutationId, ipAllowListEntry)
end

"""
Autogenerated return type of ChangeUserStatus
"""
mutable struct ChangeUserStatusPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Your updated status.\n  "
    status::Union{UserStatus, Missing, Nothing}
end
function ChangeUserStatusPayload(; clientMutationId = nothing, status = nothing)
    ChangeUserStatusPayload(clientMutationId, status)
end

"""
Autogenerated return type of ApproveVerifiableDomain
"""
mutable struct ApproveVerifiableDomainPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The verifiable domain that was approved.\n  "
    domain::Union{VerifiableDomain, Missing, Nothing}
end
function ApproveVerifiableDomainPayload(; clientMutationId = nothing, domain = nothing)
    ApproveVerifiableDomainPayload(clientMutationId, domain)
end

"""
Autogenerated return type of RequestReviews
"""
mutable struct RequestReviewsPayload <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The pull request that is getting requests.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
    "\n  The edge from the pull request to the requested reviewers.\n  "
    requestedReviewersEdge::Union{UserEdge, Missing, Nothing}
end
function RequestReviewsPayload(; actor = nothing, clientMutationId = nothing, pullRequest = nothing, requestedReviewersEdge = nothing)
    RequestReviewsPayload(actor, clientMutationId, pullRequest, requestedReviewersEdge)
end

"""
Autogenerated return type of UnpinIssue
"""
mutable struct UnpinIssuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The issue that was unpinned\n  "
    issue::Union{Issue, Missing, Nothing}
end
function UnpinIssuePayload(; clientMutationId = nothing, issue = nothing)
    UnpinIssuePayload(clientMutationId, issue)
end

"""
Autogenerated return type of DeleteProjectNextItem
"""
mutable struct DeleteProjectNextItemPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the deleted item.\n  "
    deletedItemId::Union{String, Missing, Nothing}
end
function DeleteProjectNextItemPayload(; clientMutationId = nothing, deletedItemId = nothing)
    DeleteProjectNextItemPayload(clientMutationId, deletedItemId)
end

"""
Autogenerated return type of RemoveEnterpriseOrganization
"""
mutable struct RemoveEnterpriseOrganizationPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated enterprise.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  The organization that was removed from the enterprise.\n  "
    organization::Union{Organization, Missing, Nothing}
    "\n  The viewer performing the mutation.\n  "
    viewer::Union{User, Missing, Nothing}
end
function RemoveEnterpriseOrganizationPayload(; clientMutationId = nothing, enterprise = nothing, organization = nothing, viewer = nothing)
    RemoveEnterpriseOrganizationPayload(clientMutationId, enterprise, organization, viewer)
end

"""
Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
"""
mutable struct UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated members can create repositories setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the members can create repositories setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated return type of UnlockLockable
"""
mutable struct UnlockLockablePayload <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The item that was unlocked.\n  "
    unlockedRecord::Union{Lockable, Missing, Nothing}
end
function UnlockLockablePayload(; actor = nothing, clientMutationId = nothing, unlockedRecord = nothing)
    UnlockLockablePayload(actor, clientMutationId, unlockedRecord)
end

"""
Autogenerated return type of CreateIssue
"""
mutable struct CreateIssuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new issue.\n  "
    issue::Union{Issue, Missing, Nothing}
end
function CreateIssuePayload(; clientMutationId = nothing, issue = nothing)
    CreateIssuePayload(clientMutationId, issue)
end

"""
Autogenerated return type of UpdateTeamDiscussionComment
"""
mutable struct UpdateTeamDiscussionCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated comment.\n  "
    teamDiscussionComment::Union{TeamDiscussionComment, Missing, Nothing}
end
function UpdateTeamDiscussionCommentPayload(; clientMutationId = nothing, teamDiscussionComment = nothing)
    UpdateTeamDiscussionCommentPayload(clientMutationId, teamDiscussionComment)
end

"""
Autogenerated return type of RemoveAssigneesFromAssignable
"""
mutable struct RemoveAssigneesFromAssignablePayload <: OfficialGithubSchema
    "\n  The item that was unassigned.\n  "
    assignable::Union{Assignable, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function RemoveAssigneesFromAssignablePayload(; assignable = nothing, clientMutationId = nothing)
    RemoveAssigneesFromAssignablePayload(assignable, clientMutationId)
end

"""
Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
"""
mutable struct UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated members can invite collaborators setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the members can invite collaborators setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated return type of UpdateIpAllowListEntry
"""
mutable struct UpdateIpAllowListEntryPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The IP allow list entry that was updated.\n  "
    ipAllowListEntry::Union{IpAllowListEntry, Missing, Nothing}
end
function UpdateIpAllowListEntryPayload(; clientMutationId = nothing, ipAllowListEntry = nothing)
    UpdateIpAllowListEntryPayload(clientMutationId, ipAllowListEntry)
end

"""
Autogenerated return type of AddProjectV2DraftIssue
"""
mutable struct AddProjectV2DraftIssuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The draft issue added to the project.\n  "
    projectItem::Union{ProjectV2Item, Missing, Nothing}
end
function AddProjectV2DraftIssuePayload(; clientMutationId = nothing, projectItem = nothing)
    AddProjectV2DraftIssuePayload(clientMutationId, projectItem)
end

"""
Autogenerated return type of ResolveReviewThread
"""
mutable struct ResolveReviewThreadPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The thread to resolve.\n  "
    thread::Union{PullRequestReviewThread, Missing, Nothing}
end
function ResolveReviewThreadPayload(; clientMutationId = nothing, thread = nothing)
    ResolveReviewThreadPayload(clientMutationId, thread)
end

"""
Autogenerated return type of UpdateRef
"""
mutable struct UpdateRefPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated Ref.\n  "
    ref::Union{Ref, Missing, Nothing}
end
function UpdateRefPayload(; clientMutationId = nothing, ref = nothing)
    UpdateRefPayload(clientMutationId, ref)
end

"""
Autogenerated return type of FollowOrganization
"""
mutable struct FollowOrganizationPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The organization that was followed.\n  "
    organization::Union{Organization, Missing, Nothing}
end
function FollowOrganizationPayload(; clientMutationId = nothing, organization = nothing)
    FollowOrganizationPayload(clientMutationId, organization)
end

"""
Autogenerated return type of DismissRepositoryVulnerabilityAlert
"""
mutable struct DismissRepositoryVulnerabilityAlertPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Dependabot alert that was dismissed\n  "
    repositoryVulnerabilityAlert::Union{RepositoryVulnerabilityAlert, Missing, Nothing}
end
function DismissRepositoryVulnerabilityAlertPayload(; clientMutationId = nothing, repositoryVulnerabilityAlert = nothing)
    DismissRepositoryVulnerabilityAlertPayload(clientMutationId, repositoryVulnerabilityAlert)
end

"""
Autogenerated return type of StartRepositoryMigration
"""
mutable struct StartRepositoryMigrationPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new Octoshift repository migration.\n  "
    repositoryMigration::Union{RepositoryMigration, Missing, Nothing}
end
function StartRepositoryMigrationPayload(; clientMutationId = nothing, repositoryMigration = nothing)
    StartRepositoryMigrationPayload(clientMutationId, repositoryMigration)
end

"""
Autogenerated return type of DeleteDiscussion
"""
mutable struct DeleteDiscussionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The discussion that was just deleted.\n  "
    discussion::Union{Discussion, Missing, Nothing}
end
function DeleteDiscussionPayload(; clientMutationId = nothing, discussion = nothing)
    DeleteDiscussionPayload(clientMutationId, discussion)
end

"""
Autogenerated return type of UpdateProjectDraftIssue
"""
mutable struct UpdateProjectDraftIssuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The draft issue updated in the project.\n  "
    draftIssue::Union{DraftIssue, Missing, Nothing}
end
function UpdateProjectDraftIssuePayload(; clientMutationId = nothing, draftIssue = nothing)
    UpdateProjectDraftIssuePayload(clientMutationId, draftIssue)
end

"""
Autogenerated return type of ClearLabelsFromLabelable
"""
mutable struct ClearLabelsFromLabelablePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The item that was unlabeled.\n  "
    labelable::Union{Labelable, Missing, Nothing}
end
function ClearLabelsFromLabelablePayload(; clientMutationId = nothing, labelable = nothing)
    ClearLabelsFromLabelablePayload(clientMutationId, labelable)
end

"""
Autogenerated return type of ReopenIssue
"""
mutable struct ReopenIssuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The issue that was opened.\n  "
    issue::Union{Issue, Missing, Nothing}
end
function ReopenIssuePayload(; clientMutationId = nothing, issue = nothing)
    ReopenIssuePayload(clientMutationId, issue)
end

"""
Autogenerated return type of AddUpvote
"""
mutable struct AddUpvotePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The votable subject.\n  "
    subject::Union{Votable, Missing, Nothing}
end
function AddUpvotePayload(; clientMutationId = nothing, subject = nothing)
    AddUpvotePayload(clientMutationId, subject)
end

"""
Autogenerated return type of DeleteIssue
"""
mutable struct DeleteIssuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The repository the issue belonged to\n  "
    repository::Union{Repository, Missing, Nothing}
end
function DeleteIssuePayload(; clientMutationId = nothing, repository = nothing)
    DeleteIssuePayload(clientMutationId, repository)
end

"""
Autogenerated return type of MarkPullRequestReadyForReview
"""
mutable struct MarkPullRequestReadyForReviewPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The pull request that is ready for review.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
end
function MarkPullRequestReadyForReviewPayload(; clientMutationId = nothing, pullRequest = nothing)
    MarkPullRequestReadyForReviewPayload(clientMutationId, pullRequest)
end

"""
Autogenerated return type of CreateLabel
"""
mutable struct CreateLabelPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new label.\n  "
    label::Union{Label, Missing, Nothing}
end
function CreateLabelPayload(; clientMutationId = nothing, label = nothing)
    CreateLabelPayload(clientMutationId, label)
end

"""
Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
"""
mutable struct RevokeEnterpriseOrganizationsMigratorRolePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The organizations that had the migrator role revoked for the given user.\n  "
    organizations::Union{OrganizationConnection, Missing, Nothing}
end
function RevokeEnterpriseOrganizationsMigratorRolePayload(; clientMutationId = nothing, organizations = nothing)
    RevokeEnterpriseOrganizationsMigratorRolePayload(clientMutationId, organizations)
end

"""
Autogenerated return type of UpdateNotificationRestrictionSetting
"""
mutable struct UpdateNotificationRestrictionSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The owner on which the setting was updated.\n  "
    owner::Union{VerifiableDomainOwner, Missing, Nothing}
end
function UpdateNotificationRestrictionSettingPayload(; clientMutationId = nothing, owner = nothing)
    UpdateNotificationRestrictionSettingPayload(clientMutationId, owner)
end

"""
Autogenerated return type of GrantMigratorRole
"""
mutable struct GrantMigratorRolePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Did the operation succeed?\n  "
    success::Union{Bool, Missing, Nothing}
end
function GrantMigratorRolePayload(; clientMutationId = nothing, success = nothing)
    GrantMigratorRolePayload(clientMutationId, success)
end

"""
Autogenerated return type of DeleteLabel
"""
mutable struct DeleteLabelPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function DeleteLabelPayload(; clientMutationId = nothing)
    DeleteLabelPayload(clientMutationId)
end

"""
Autogenerated return type of AddEnterpriseSupportEntitlement
"""
mutable struct AddEnterpriseSupportEntitlementPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A message confirming the result of adding the support entitlement.\n  "
    message::Union{String, Missing, Nothing}
end
function AddEnterpriseSupportEntitlementPayload(; clientMutationId = nothing, message = nothing)
    AddEnterpriseSupportEntitlementPayload(clientMutationId, message)
end

"""
Autogenerated return type of DisablePullRequestAutoMerge
"""
mutable struct DisablePullRequestAutoMergePayload <: OfficialGithubSchema
    "\n  Identifies the actor who performed the event.\n  "
    actor::Union{Actor, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The pull request auto merge was disabled on.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
end
function DisablePullRequestAutoMergePayload(; actor = nothing, clientMutationId = nothing, pullRequest = nothing)
    DisablePullRequestAutoMergePayload(actor, clientMutationId, pullRequest)
end

"""
Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
"""
mutable struct UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated members can view dependency insights setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the members can view dependency insights setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated return type of SetRepositoryInteractionLimit
"""
mutable struct SetRepositoryInteractionLimitPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The repository that the interaction limit was set for.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function SetRepositoryInteractionLimitPayload(; clientMutationId = nothing, repository = nothing)
    SetRepositoryInteractionLimitPayload(clientMutationId, repository)
end

"""
Autogenerated return type of UpdateProject
"""
mutable struct UpdateProjectPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated project.\n  "
    project::Union{Project, Missing, Nothing}
end
function UpdateProjectPayload(; clientMutationId = nothing, project = nothing)
    UpdateProjectPayload(clientMutationId, project)
end

"""
Autogenerated return type of CreateCommitOnBranch
"""
mutable struct CreateCommitOnBranchPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new commit.\n  "
    commit::Union{Commit, Missing, Nothing}
    "\n  The ref which has been updated to point to the new commit.\n  "
    ref::Union{Ref, Missing, Nothing}
end
function CreateCommitOnBranchPayload(; clientMutationId = nothing, commit = nothing, ref = nothing)
    CreateCommitOnBranchPayload(clientMutationId, commit, ref)
end

"""
Autogenerated return type of DeclineTopicSuggestion
"""
mutable struct DeclineTopicSuggestionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The declined topic.\n  "
    topic::Union{Topic, Missing, Nothing}
end
function DeclineTopicSuggestionPayload(; clientMutationId = nothing, topic = nothing)
    DeclineTopicSuggestionPayload(clientMutationId, topic)
end

"""
Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
"""
mutable struct RegenerateEnterpriseIdentityProviderRecoveryCodesPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The identity provider for the enterprise.\n  "
    identityProvider::Union{EnterpriseIdentityProvider, Missing, Nothing}
end
function RegenerateEnterpriseIdentityProviderRecoveryCodesPayload(; clientMutationId = nothing, identityProvider = nothing)
    RegenerateEnterpriseIdentityProviderRecoveryCodesPayload(clientMutationId, identityProvider)
end

"""
Autogenerated return type of ConvertPullRequestToDraft
"""
mutable struct ConvertPullRequestToDraftPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The pull request that is now a draft.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
end
function ConvertPullRequestToDraftPayload(; clientMutationId = nothing, pullRequest = nothing)
    ConvertPullRequestToDraftPayload(clientMutationId, pullRequest)
end

"""
Autogenerated return type of ApproveDeployments
"""
mutable struct ApproveDeploymentsPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The affected deployments.\n  "
    deployments::Union{Vector{Deployment}, Missing, Nothing}
end
function ApproveDeploymentsPayload(; clientMutationId = nothing, deployments = nothing)
    ApproveDeploymentsPayload(clientMutationId, deployments)
end

"""
Autogenerated return type of RejectDeployments
"""
mutable struct RejectDeploymentsPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The affected deployments.\n  "
    deployments::Union{Vector{Deployment}, Missing, Nothing}
end
function RejectDeploymentsPayload(; clientMutationId = nothing, deployments = nothing)
    RejectDeploymentsPayload(clientMutationId, deployments)
end

"""
Autogenerated return type of CreateDiscussion
"""
mutable struct CreateDiscussionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The discussion that was just created.\n  "
    discussion::Union{Discussion, Missing, Nothing}
end
function CreateDiscussionPayload(; clientMutationId = nothing, discussion = nothing)
    CreateDiscussionPayload(clientMutationId, discussion)
end

"""
Autogenerated return type of UpdateProjectNextItemField
"""
mutable struct UpdateProjectNextItemFieldPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated item.\n  "
    projectNextItem::Union{ProjectNextItem, Missing, Nothing}
end
function UpdateProjectNextItemFieldPayload(; clientMutationId = nothing, projectNextItem = nothing)
    UpdateProjectNextItemFieldPayload(clientMutationId, projectNextItem)
end

"""
Autogenerated return type of CancelSponsorship
"""
mutable struct CancelSponsorshipPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The tier that was being used at the time of cancellation.\n  "
    sponsorsTier::Union{SponsorsTier, Missing, Nothing}
end
function CancelSponsorshipPayload(; clientMutationId = nothing, sponsorsTier = nothing)
    CancelSponsorshipPayload(clientMutationId, sponsorsTier)
end

"""
Autogenerated return type of CreatePullRequest
"""
mutable struct CreatePullRequestPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new pull request.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
end
function CreatePullRequestPayload(; clientMutationId = nothing, pullRequest = nothing)
    CreatePullRequestPayload(clientMutationId, pullRequest)
end

"""
Autogenerated return type of UpdateTopics
"""
mutable struct UpdateTopicsPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Names of the provided topics that are not valid.\n  "
    invalidTopicNames::Union{Vector{String}, Missing, Nothing}
    "\n  The updated repository.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function UpdateTopicsPayload(; clientMutationId = nothing, invalidTopicNames = nothing, repository = nothing)
    UpdateTopicsPayload(clientMutationId, invalidTopicNames, repository)
end

"""
Autogenerated return type of CloseIssue
"""
mutable struct CloseIssuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The issue that was closed.\n  "
    issue::Union{Issue, Missing, Nothing}
end
function CloseIssuePayload(; clientMutationId = nothing, issue = nothing)
    CloseIssuePayload(clientMutationId, issue)
end

"""
Autogenerated return type of SetUserInteractionLimit
"""
mutable struct SetUserInteractionLimitPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The user that the interaction limit was set for.\n  "
    user::Union{User, Missing, Nothing}
end
function SetUserInteractionLimitPayload(; clientMutationId = nothing, user = nothing)
    SetUserInteractionLimitPayload(clientMutationId, user)
end

"""
Autogenerated return type of UpdateProjectColumn
"""
mutable struct UpdateProjectColumnPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated project column.\n  "
    projectColumn::Union{ProjectColumn, Missing, Nothing}
end
function UpdateProjectColumnPayload(; clientMutationId = nothing, projectColumn = nothing)
    UpdateProjectColumnPayload(clientMutationId, projectColumn)
end

"""
Autogenerated return type of CreateCheckRun
"""
mutable struct CreateCheckRunPayload <: OfficialGithubSchema
    "\n  The newly created check run.\n  "
    checkRun::Union{CheckRun, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function CreateCheckRunPayload(; checkRun = nothing, clientMutationId = nothing)
    CreateCheckRunPayload(checkRun, clientMutationId)
end

"""
Autogenerated return type of UnmarkFileAsViewed
"""
mutable struct UnmarkFileAsViewedPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated pull request.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
end
function UnmarkFileAsViewedPayload(; clientMutationId = nothing, pullRequest = nothing)
    UnmarkFileAsViewedPayload(clientMutationId, pullRequest)
end

"""
Autogenerated return type of AddStar
"""
mutable struct AddStarPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The starrable.\n  "
    starrable::Union{Starrable, Missing, Nothing}
end
function AddStarPayload(; clientMutationId = nothing, starrable = nothing)
    AddStarPayload(clientMutationId, starrable)
end

"""
Autogenerated return type of UpdateEnterpriseAdministratorRole
"""
mutable struct UpdateEnterpriseAdministratorRolePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A message confirming the result of changing the administrator's role.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseAdministratorRolePayload(; clientMutationId = nothing, message = nothing)
    UpdateEnterpriseAdministratorRolePayload(clientMutationId, message)
end

"""
Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
"""
mutable struct UpdateEnterpriseMembersCanMakePurchasesSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated members can make purchases setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the members can make purchases setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseMembersCanMakePurchasesSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseMembersCanMakePurchasesSettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated return type of UnlinkProjectV2FromRepository
"""
mutable struct UnlinkProjectV2FromRepositoryPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The repository the project is no longer linked to.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function UnlinkProjectV2FromRepositoryPayload(; clientMutationId = nothing, repository = nothing)
    UnlinkProjectV2FromRepositoryPayload(clientMutationId, repository)
end

"""
Autogenerated return type of SetEnterpriseIdentityProvider
"""
mutable struct SetEnterpriseIdentityProviderPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The identity provider for the enterprise.\n  "
    identityProvider::Union{EnterpriseIdentityProvider, Missing, Nothing}
end
function SetEnterpriseIdentityProviderPayload(; clientMutationId = nothing, identityProvider = nothing)
    SetEnterpriseIdentityProviderPayload(clientMutationId, identityProvider)
end

"""
Autogenerated return type of CreateMigrationSource
"""
mutable struct CreateMigrationSourcePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The created Octoshift migration source.\n  "
    migrationSource::Union{MigrationSource, Missing, Nothing}
end
function CreateMigrationSourcePayload(; clientMutationId = nothing, migrationSource = nothing)
    CreateMigrationSourcePayload(clientMutationId, migrationSource)
end

"""
Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
"""
mutable struct UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated members can update protected branches setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the members can update protected branches setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated return type of RemoveUpvote
"""
mutable struct RemoveUpvotePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The votable subject.\n  "
    subject::Union{Votable, Missing, Nothing}
end
function RemoveUpvotePayload(; clientMutationId = nothing, subject = nothing)
    RemoveUpvotePayload(clientMutationId, subject)
end

"""
Autogenerated return type of ConvertProjectCardNoteToIssue
"""
mutable struct ConvertProjectCardNoteToIssuePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated ProjectCard.\n  "
    projectCard::Union{ProjectCard, Missing, Nothing}
end
function ConvertProjectCardNoteToIssuePayload(; clientMutationId = nothing, projectCard = nothing)
    ConvertProjectCardNoteToIssuePayload(clientMutationId, projectCard)
end

"""
Autogenerated return type of AddDiscussionComment
"""
mutable struct AddDiscussionCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The newly created discussion comment.\n  "
    comment::Union{DiscussionComment, Missing, Nothing}
end
function AddDiscussionCommentPayload(; clientMutationId = nothing, comment = nothing)
    AddDiscussionCommentPayload(clientMutationId, comment)
end

"""
Autogenerated return type of AddVerifiableDomain
"""
mutable struct AddVerifiableDomainPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The verifiable domain that was added.\n  "
    domain::Union{VerifiableDomain, Missing, Nothing}
end
function AddVerifiableDomainPayload(; clientMutationId = nothing, domain = nothing)
    AddVerifiableDomainPayload(clientMutationId, domain)
end

"""
Autogenerated return type of CloneProject
"""
mutable struct CloneProjectPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The id of the JobStatus for populating cloned fields.\n  "
    jobStatusId::Union{String, Missing, Nothing}
    "\n  The new cloned project.\n  "
    project::Union{Project, Missing, Nothing}
end
function CloneProjectPayload(; clientMutationId = nothing, jobStatusId = nothing, project = nothing)
    CloneProjectPayload(clientMutationId, jobStatusId, project)
end

"""
Autogenerated return type of DismissPullRequestReview
"""
mutable struct DismissPullRequestReviewPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The dismissed pull request review.\n  "
    pullRequestReview::Union{PullRequestReview, Missing, Nothing}
end
function DismissPullRequestReviewPayload(; clientMutationId = nothing, pullRequestReview = nothing)
    DismissPullRequestReviewPayload(clientMutationId, pullRequestReview)
end

"""
Autogenerated return type of MoveProjectColumn
"""
mutable struct MoveProjectColumnPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new edge of the moved column.\n  "
    columnEdge::Union{ProjectColumnEdge, Missing, Nothing}
end
function MoveProjectColumnPayload(; clientMutationId = nothing, columnEdge = nothing)
    MoveProjectColumnPayload(clientMutationId, columnEdge)
end

"""
Autogenerated return type of UpdatePullRequestReviewComment
"""
mutable struct UpdatePullRequestReviewCommentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated comment.\n  "
    pullRequestReviewComment::Union{PullRequestReviewComment, Missing, Nothing}
end
function UpdatePullRequestReviewCommentPayload(; clientMutationId = nothing, pullRequestReviewComment = nothing)
    UpdatePullRequestReviewCommentPayload(clientMutationId, pullRequestReviewComment)
end

"""
Autogenerated return type of UpdateLabel
"""
mutable struct UpdateLabelPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated label.\n  "
    label::Union{Label, Missing, Nothing}
end
function UpdateLabelPayload(; clientMutationId = nothing, label = nothing)
    UpdateLabelPayload(clientMutationId, label)
end

"""
Autogenerated return type of AddLabelsToLabelable
"""
mutable struct AddLabelsToLabelablePayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The item that was labeled.\n  "
    labelable::Union{Labelable, Missing, Nothing}
end
function AddLabelsToLabelablePayload(; clientMutationId = nothing, labelable = nothing)
    AddLabelsToLabelablePayload(clientMutationId, labelable)
end

"""
Autogenerated return type of DeleteEnvironment
"""
mutable struct DeleteEnvironmentPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function DeleteEnvironmentPayload(; clientMutationId = nothing)
    DeleteEnvironmentPayload(clientMutationId)
end

"""
Autogenerated return type of CreateSponsorsTier
"""
mutable struct CreateSponsorsTierPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new tier.\n  "
    sponsorsTier::Union{SponsorsTier, Missing, Nothing}
end
function CreateSponsorsTierPayload(; clientMutationId = nothing, sponsorsTier = nothing)
    CreateSponsorsTierPayload(clientMutationId, sponsorsTier)
end

"""
Autogenerated return type of SubmitPullRequestReview
"""
mutable struct SubmitPullRequestReviewPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The submitted pull request review.\n  "
    pullRequestReview::Union{PullRequestReview, Missing, Nothing}
end
function SubmitPullRequestReviewPayload(; clientMutationId = nothing, pullRequestReview = nothing)
    SubmitPullRequestReviewPayload(clientMutationId, pullRequestReview)
end

"""
Autogenerated return type of UpdateTeamDiscussion
"""
mutable struct UpdateTeamDiscussionPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated discussion.\n  "
    teamDiscussion::Union{TeamDiscussion, Missing, Nothing}
end
function UpdateTeamDiscussionPayload(; clientMutationId = nothing, teamDiscussion = nothing)
    UpdateTeamDiscussionPayload(clientMutationId, teamDiscussion)
end

"""
Autogenerated return type of FollowUser
"""
mutable struct FollowUserPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The user that was followed.\n  "
    user::Union{User, Missing, Nothing}
end
function FollowUserPayload(; clientMutationId = nothing, user = nothing)
    FollowUserPayload(clientMutationId, user)
end

"""
Autogenerated return type of CreateProjectV2
"""
mutable struct CreateProjectV2Payload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The new project.\n  "
    projectV2::Union{ProjectV2, Missing, Nothing}
end
function CreateProjectV2Payload(; clientMutationId = nothing, projectV2 = nothing)
    CreateProjectV2Payload(clientMutationId, projectV2)
end

"""
Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting
"""
mutable struct UpdateEnterpriseTeamDiscussionsSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The enterprise with the updated team discussions setting.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  A message confirming the result of updating the team discussions setting.\n  "
    message::Union{String, Missing, Nothing}
end
function UpdateEnterpriseTeamDiscussionsSettingPayload(; clientMutationId = nothing, enterprise = nothing, message = nothing)
    UpdateEnterpriseTeamDiscussionsSettingPayload(clientMutationId, enterprise, message)
end

"""
Autogenerated return type of UnlinkProjectV2FromTeam
"""
mutable struct UnlinkProjectV2FromTeamPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The team the project is unlinked from\n  "
    team::Union{Team, Missing, Nothing}
end
function UnlinkProjectV2FromTeamPayload(; clientMutationId = nothing, team = nothing)
    UnlinkProjectV2FromTeamPayload(clientMutationId, team)
end

"""
Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
"""
mutable struct UpdateRepositoryWebCommitSignoffSettingPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A message confirming the result of updating the web commit signoff setting.\n  "
    message::Union{String, Missing, Nothing}
    "\n  The updated repository.\n  "
    repository::Union{Repository, Missing, Nothing}
end
function UpdateRepositoryWebCommitSignoffSettingPayload(; clientMutationId = nothing, message = nothing, repository = nothing)
    UpdateRepositoryWebCommitSignoffSettingPayload(clientMutationId, message, repository)
end

"""
Autogenerated return type of RemoveEnterpriseSupportEntitlement
"""
mutable struct RemoveEnterpriseSupportEntitlementPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A message confirming the result of removing the support entitlement.\n  "
    message::Union{String, Missing, Nothing}
end
function RemoveEnterpriseSupportEntitlementPayload(; clientMutationId = nothing, message = nothing)
    RemoveEnterpriseSupportEntitlementPayload(clientMutationId, message)
end

"""
Autogenerated return type of MarkFileAsViewed
"""
mutable struct MarkFileAsViewedPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated pull request.\n  "
    pullRequest::Union{PullRequest, Missing, Nothing}
end
function MarkFileAsViewedPayload(; clientMutationId = nothing, pullRequest = nothing)
    MarkFileAsViewedPayload(clientMutationId, pullRequest)
end

"""
Autogenerated return type of UnmarkDiscussionCommentAsAnswer
"""
mutable struct UnmarkDiscussionCommentAsAnswerPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The discussion that includes the comment.\n  "
    discussion::Union{Discussion, Missing, Nothing}
end
function UnmarkDiscussionCommentAsAnswerPayload(; clientMutationId = nothing, discussion = nothing)
    UnmarkDiscussionCommentAsAnswerPayload(clientMutationId, discussion)
end

"""
Autogenerated return type of DeleteLinkedBranch
"""
mutable struct DeleteLinkedBranchPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The issue the linked branch was unlinked from.\n  "
    issue::Union{Issue, Missing, Nothing}
end
function DeleteLinkedBranchPayload(; clientMutationId = nothing, issue = nothing)
    DeleteLinkedBranchPayload(clientMutationId, issue)
end

"""
Autogenerated return type of DeleteRef
"""
mutable struct DeleteRefPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function DeleteRefPayload(; clientMutationId = nothing)
    DeleteRefPayload(clientMutationId)
end

"""
Autogenerated return type of UpdatePullRequestReview
"""
mutable struct UpdatePullRequestReviewPayload <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The updated pull request review.\n  "
    pullRequestReview::Union{PullRequestReview, Missing, Nothing}
end
function UpdatePullRequestReviewPayload(; clientMutationId = nothing, pullRequestReview = nothing)
    UpdatePullRequestReviewPayload(clientMutationId, pullRequestReview)
end

"""
The root query for implementing GraphQL mutations.
"""
mutable struct Mutation <: OfficialGithubSchema
    "\n  Clear all of a customer's queued migrations\n  "
    abortQueuedMigrations::Union{AbortQueuedMigrationsPayload, Missing, Nothing}
    "\n  Accepts a pending invitation for a user to become an administrator of an enterprise.\n  "
    acceptEnterpriseAdministratorInvitation::Union{AcceptEnterpriseAdministratorInvitationPayload, Missing, Nothing}
    "\n  Applies a suggested topic to the repository.\n  "
    acceptTopicSuggestion::Union{AcceptTopicSuggestionPayload, Missing, Nothing}
    "\n  Adds assignees to an assignable object.\n  "
    addAssigneesToAssignable::Union{AddAssigneesToAssignablePayload, Missing, Nothing}
    "\n  Adds a comment to an Issue or Pull Request.\n  "
    addComment::Union{AddCommentPayload, Missing, Nothing}
    "\n  Adds a comment to a Discussion, possibly as a reply to another comment.\n  "
    addDiscussionComment::Union{AddDiscussionCommentPayload, Missing, Nothing}
    "\n  Vote for an option in a discussion poll.\n  "
    addDiscussionPollVote::Union{AddDiscussionPollVotePayload, Missing, Nothing}
    "\n  Adds enterprise members to an organization within the enterprise.\n  "
    addEnterpriseOrganizationMember::Union{AddEnterpriseOrganizationMemberPayload, Missing, Nothing}
    "\n  Adds a support entitlement to an enterprise member.\n  "
    addEnterpriseSupportEntitlement::Union{AddEnterpriseSupportEntitlementPayload, Missing, Nothing}
    "\n  Adds labels to a labelable object.\n  "
    addLabelsToLabelable::Union{AddLabelsToLabelablePayload, Missing, Nothing}
    "\n  Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.\n  "
    addProjectCard::Union{AddProjectCardPayload, Missing, Nothing}
    "\n  Adds a column to a Project.\n  "
    addProjectColumn::Union{AddProjectColumnPayload, Missing, Nothing}
    "\n  Creates a new draft issue and add it to a Project.\n  "
    addProjectDraftIssue::Union{AddProjectDraftIssuePayload, Missing, Nothing}
    "\n  Adds an existing item (Issue or PullRequest) to a Project.\n  "
    addProjectNextItem::Union{AddProjectNextItemPayload, Missing, Nothing}
    "\n  Creates a new draft issue and add it to a Project.\n  "
    addProjectV2DraftIssue::Union{AddProjectV2DraftIssuePayload, Missing, Nothing}
    "\n  Links an existing content instance to a Project.\n  "
    addProjectV2ItemById::Union{AddProjectV2ItemByIdPayload, Missing, Nothing}
    "\n  Adds a review to a Pull Request.\n  "
    addPullRequestReview::Union{AddPullRequestReviewPayload, Missing, Nothing}
    "\n  Adds a comment to a review.\n  "
    addPullRequestReviewComment::Union{AddPullRequestReviewCommentPayload, Missing, Nothing}
    "\n  Adds a new thread to a pending Pull Request Review.\n  "
    addPullRequestReviewThread::Union{AddPullRequestReviewThreadPayload, Missing, Nothing}
    "\n  Adds a reaction to a subject.\n  "
    addReaction::Union{AddReactionPayload, Missing, Nothing}
    "\n  Adds a star to a Starrable.\n  "
    addStar::Union{AddStarPayload, Missing, Nothing}
    "\n  Add an upvote to a discussion or discussion comment.\n  "
    addUpvote::Union{AddUpvotePayload, Missing, Nothing}
    "\n  Adds a verifiable domain to an owning account.\n  "
    addVerifiableDomain::Union{AddVerifiableDomainPayload, Missing, Nothing}
    "\n  Approve all pending deployments under one or more environments\n  "
    approveDeployments::Union{ApproveDeploymentsPayload, Missing, Nothing}
    "\n  Approve a verifiable domain for notification delivery.\n  "
    approveVerifiableDomain::Union{ApproveVerifiableDomainPayload, Missing, Nothing}
    "\n  Archives a ProjectV2Item\n  "
    archiveProjectV2Item::Union{ArchiveProjectV2ItemPayload, Missing, Nothing}
    "\n  Marks a repository as archived.\n  "
    archiveRepository::Union{ArchiveRepositoryPayload, Missing, Nothing}
    "\n  Cancels a pending invitation for an administrator to join an enterprise.\n  "
    cancelEnterpriseAdminInvitation::Union{CancelEnterpriseAdminInvitationPayload, Missing, Nothing}
    "\n  Cancel an active sponsorship.\n  "
    cancelSponsorship::Union{CancelSponsorshipPayload, Missing, Nothing}
    "\n  Update your status on GitHub.\n  "
    changeUserStatus::Union{ChangeUserStatusPayload, Missing, Nothing}
    "\n  Clears all labels from a labelable object.\n  "
    clearLabelsFromLabelable::Union{ClearLabelsFromLabelablePayload, Missing, Nothing}
    "\n  This mutation clears the value of a field for an item in a Project. Currently\n  only text, number, date, assignees, labels, single-select, iteration and\n  milestone fields are supported.\n  "
    clearProjectV2ItemFieldValue::Union{ClearProjectV2ItemFieldValuePayload, Missing, Nothing}
    "\n  Creates a new project by cloning configuration from an existing project.\n  "
    cloneProject::Union{CloneProjectPayload, Missing, Nothing}
    "\n  Create a new repository with the same files and directory structure as a template repository.\n  "
    cloneTemplateRepository::Union{CloneTemplateRepositoryPayload, Missing, Nothing}
    "\n  Close an issue.\n  "
    closeIssue::Union{CloseIssuePayload, Missing, Nothing}
    "\n  Close a pull request.\n  "
    closePullRequest::Union{ClosePullRequestPayload, Missing, Nothing}
    "\n  Convert a project note card to one associated with a newly created issue.\n  "
    convertProjectCardNoteToIssue::Union{ConvertProjectCardNoteToIssuePayload, Missing, Nothing}
    "\n  Converts a pull request to draft\n  "
    convertPullRequestToDraft::Union{ConvertPullRequestToDraftPayload, Missing, Nothing}
    "\n  Create a new branch protection rule\n  "
    createBranchProtectionRule::Union{CreateBranchProtectionRulePayload, Missing, Nothing}
    "\n  Create a check run.\n  "
    createCheckRun::Union{CreateCheckRunPayload, Missing, Nothing}
    "\n  Create a check suite\n  "
    createCheckSuite::Union{CreateCheckSuitePayload, Missing, Nothing}
    "\n  Appends a commit to the given branch as the authenticated user.\n\n  This mutation creates a commit whose parent is the HEAD of the provided\n  branch and also updates that branch to point to the new commit.\n  It can be thought of as similar to `git commit`.\n\n  ### Locating a Branch\n\n  Commits are appended to a `branch` of type `Ref`.\n  This must refer to a git branch (i.e.  the fully qualified path must\n  begin with `refs/heads/`, although including this prefix is optional.\n\n  Callers may specify the `branch` to commit to either by its global node\n  ID or by passing both of `repositoryNameWithOwner` and `refName`.  For\n  more details see the documentation for `CommittableBranch`.\n\n  ### Describing Changes\n\n  `fileChanges` are specified as a `FilesChanges` object describing\n  `FileAdditions` and `FileDeletions`.\n\n  Please see the documentation for `FileChanges` for more information on\n  how to use this argument to describe any set of file changes.\n\n  ### Authorship\n\n  Similar to the web commit interface, this mutation does not support\n  specifying the author or committer of the commit and will not add\n  support for this in the future.\n\n  A commit created by a successful execution of this mutation will be\n  authored by the owner of the credential which authenticates the API\n  request.  The committer will be identical to that of commits authored\n  using the web interface.\n\n  If you need full control over author and committer information, please\n  use the Git Database REST API instead.\n\n  ### Commit Signing\n\n  Commits made using this mutation are automatically signed by GitHub if\n  supported and will be marked as verified in the user interface.\n  "
    createCommitOnBranch::Union{CreateCommitOnBranchPayload, Missing, Nothing}
    "\n  Creates a new deployment event.\n  "
    createDeployment::Union{CreateDeploymentPayload, Missing, Nothing}
    "\n  Create a deployment status.\n  "
    createDeploymentStatus::Union{CreateDeploymentStatusPayload, Missing, Nothing}
    "\n  Create a discussion.\n  "
    createDiscussion::Union{CreateDiscussionPayload, Missing, Nothing}
    "\n  Creates an organization as part of an enterprise account.\n  "
    createEnterpriseOrganization::Union{CreateEnterpriseOrganizationPayload, Missing, Nothing}
    "\n  Creates an environment or simply returns it if already exists.\n  "
    createEnvironment::Union{CreateEnvironmentPayload, Missing, Nothing}
    "\n  Creates a new IP allow list entry.\n  "
    createIpAllowListEntry::Union{CreateIpAllowListEntryPayload, Missing, Nothing}
    "\n  Creates a new issue.\n  "
    createIssue::Union{CreateIssuePayload, Missing, Nothing}
    "\n  Creates a new label.\n  "
    createLabel::Union{CreateLabelPayload, Missing, Nothing}
    "\n  Create a branch linked to an issue.\n  "
    createLinkedBranch::Union{CreateLinkedBranchPayload, Missing, Nothing}
    "\n  Creates an Octoshift migration source.\n  "
    createMigrationSource::Union{CreateMigrationSourcePayload, Missing, Nothing}
    "\n  Creates a new project.\n  "
    createProject::Union{CreateProjectPayload, Missing, Nothing}
    "\n  Creates a new project.\n  "
    createProjectV2::Union{CreateProjectV2Payload, Missing, Nothing}
    "\n  Create a new pull request\n  "
    createPullRequest::Union{CreatePullRequestPayload, Missing, Nothing}
    "\n  Create a new Git Ref.\n  "
    createRef::Union{CreateRefPayload, Missing, Nothing}
    "\n  Create a new repository.\n  "
    createRepository::Union{CreateRepositoryPayload, Missing, Nothing}
    "\n  Create a new payment tier for your GitHub Sponsors profile.\n  "
    createSponsorsTier::Union{CreateSponsorsTierPayload, Missing, Nothing}
    "\n  Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship.\n  "
    createSponsorship::Union{CreateSponsorshipPayload, Missing, Nothing}
    "\n  Creates a new team discussion.\n  "
    createTeamDiscussion::Union{CreateTeamDiscussionPayload, Missing, Nothing}
    "\n  Creates a new team discussion comment.\n  "
    createTeamDiscussionComment::Union{CreateTeamDiscussionCommentPayload, Missing, Nothing}
    "\n  Rejects a suggested topic for the repository.\n  "
    declineTopicSuggestion::Union{DeclineTopicSuggestionPayload, Missing, Nothing}
    "\n  Delete a branch protection rule\n  "
    deleteBranchProtectionRule::Union{DeleteBranchProtectionRulePayload, Missing, Nothing}
    "\n  Deletes a deployment.\n  "
    deleteDeployment::Union{DeleteDeploymentPayload, Missing, Nothing}
    "\n  Delete a discussion and all of its replies.\n  "
    deleteDiscussion::Union{DeleteDiscussionPayload, Missing, Nothing}
    "\n  Delete a discussion comment. If it has replies, wipe it instead.\n  "
    deleteDiscussionComment::Union{DeleteDiscussionCommentPayload, Missing, Nothing}
    "\n  Deletes an environment\n  "
    deleteEnvironment::Union{DeleteEnvironmentPayload, Missing, Nothing}
    "\n  Deletes an IP allow list entry.\n  "
    deleteIpAllowListEntry::Union{DeleteIpAllowListEntryPayload, Missing, Nothing}
    "\n  Deletes an Issue object.\n  "
    deleteIssue::Union{DeleteIssuePayload, Missing, Nothing}
    "\n  Deletes an IssueComment object.\n  "
    deleteIssueComment::Union{DeleteIssueCommentPayload, Missing, Nothing}
    "\n  Deletes a label.\n  "
    deleteLabel::Union{DeleteLabelPayload, Missing, Nothing}
    "\n  Unlink a branch from an issue.\n  "
    deleteLinkedBranch::Union{DeleteLinkedBranchPayload, Missing, Nothing}
    "\n  Delete a package version.\n  "
    deletePackageVersion::Union{DeletePackageVersionPayload, Missing, Nothing}
    "\n  Deletes a project.\n  "
    deleteProject::Union{DeleteProjectPayload, Missing, Nothing}
    "\n  Deletes a project card.\n  "
    deleteProjectCard::Union{DeleteProjectCardPayload, Missing, Nothing}
    "\n  Deletes a project column.\n  "
    deleteProjectColumn::Union{DeleteProjectColumnPayload, Missing, Nothing}
    "\n  Deletes an item from a Project.\n  "
    deleteProjectNextItem::Union{DeleteProjectNextItemPayload, Missing, Nothing}
    "\n  Deletes an item from a Project.\n  "
    deleteProjectV2Item::Union{DeleteProjectV2ItemPayload, Missing, Nothing}
    "\n  Deletes a pull request review.\n  "
    deletePullRequestReview::Union{DeletePullRequestReviewPayload, Missing, Nothing}
    "\n  Deletes a pull request review comment.\n  "
    deletePullRequestReviewComment::Union{DeletePullRequestReviewCommentPayload, Missing, Nothing}
    "\n  Delete a Git Ref.\n  "
    deleteRef::Union{DeleteRefPayload, Missing, Nothing}
    "\n  Deletes a team discussion.\n  "
    deleteTeamDiscussion::Union{DeleteTeamDiscussionPayload, Missing, Nothing}
    "\n  Deletes a team discussion comment.\n  "
    deleteTeamDiscussionComment::Union{DeleteTeamDiscussionCommentPayload, Missing, Nothing}
    "\n  Deletes a verifiable domain.\n  "
    deleteVerifiableDomain::Union{DeleteVerifiableDomainPayload, Missing, Nothing}
    "\n  Disable auto merge on the given pull request\n  "
    disablePullRequestAutoMerge::Union{DisablePullRequestAutoMergePayload, Missing, Nothing}
    "\n  Dismisses an approved or rejected pull request review.\n  "
    dismissPullRequestReview::Union{DismissPullRequestReviewPayload, Missing, Nothing}
    "\n  Dismisses the Dependabot alert.\n  "
    dismissRepositoryVulnerabilityAlert::Union{DismissRepositoryVulnerabilityAlertPayload, Missing, Nothing}
    "\n  Enable the default auto-merge on a pull request.\n  "
    enablePullRequestAutoMerge::Union{EnablePullRequestAutoMergePayload, Missing, Nothing}
    "\n  Follow an organization.\n  "
    followOrganization::Union{FollowOrganizationPayload, Missing, Nothing}
    "\n  Follow a user.\n  "
    followUser::Union{FollowUserPayload, Missing, Nothing}
    "\n  Grant the migrator role to a user for all organizations under an enterprise account.\n  "
    grantEnterpriseOrganizationsMigratorRole::Union{GrantEnterpriseOrganizationsMigratorRolePayload, Missing, Nothing}
    "\n  Grant the migrator role to a user or a team.\n  "
    grantMigratorRole::Union{GrantMigratorRolePayload, Missing, Nothing}
    "\n  Creates a new project by importing columns and a list of issues/PRs.\n  "
    importProject::Union{ImportProjectPayload, Missing, Nothing}
    "\n  Invite someone to become an administrator of the enterprise.\n  "
    inviteEnterpriseAdmin::Union{InviteEnterpriseAdminPayload, Missing, Nothing}
    "\n  Links a project to a repository.\n  "
    linkProjectV2ToRepository::Union{LinkProjectV2ToRepositoryPayload, Missing, Nothing}
    "\n  Links a project to a team.\n  "
    linkProjectV2ToTeam::Union{LinkProjectV2ToTeamPayload, Missing, Nothing}
    "\n  Creates a repository link for a project.\n  "
    linkRepositoryToProject::Union{LinkRepositoryToProjectPayload, Missing, Nothing}
    "\n  Lock a lockable object\n  "
    lockLockable::Union{LockLockablePayload, Missing, Nothing}
    "\n  Mark a discussion comment as the chosen answer for discussions in an answerable category.\n  "
    markDiscussionCommentAsAnswer::Union{MarkDiscussionCommentAsAnswerPayload, Missing, Nothing}
    "\n  Mark a pull request file as viewed\n  "
    markFileAsViewed::Union{MarkFileAsViewedPayload, Missing, Nothing}
    "\n  Marks a pull request ready for review.\n  "
    markPullRequestReadyForReview::Union{MarkPullRequestReadyForReviewPayload, Missing, Nothing}
    "\n  Merge a head into a branch.\n  "
    mergeBranch::Union{MergeBranchPayload, Missing, Nothing}
    "\n  Merge a pull request.\n  "
    mergePullRequest::Union{MergePullRequestPayload, Missing, Nothing}
    "\n  Minimizes a comment on an Issue, Commit, Pull Request, or Gist\n  "
    minimizeComment::Union{MinimizeCommentPayload, Missing, Nothing}
    "\n  Moves a project card to another place.\n  "
    moveProjectCard::Union{MoveProjectCardPayload, Missing, Nothing}
    "\n  Moves a project column to another place.\n  "
    moveProjectColumn::Union{MoveProjectColumnPayload, Missing, Nothing}
    "\n  Pin an issue to a repository\n  "
    pinIssue::Union{PinIssuePayload, Missing, Nothing}
    "\n  Regenerates the identity provider recovery codes for an enterprise\n  "
    regenerateEnterpriseIdentityProviderRecoveryCodes::Union{RegenerateEnterpriseIdentityProviderRecoveryCodesPayload, Missing, Nothing}
    "\n  Regenerates a verifiable domain's verification token.\n  "
    regenerateVerifiableDomainToken::Union{RegenerateVerifiableDomainTokenPayload, Missing, Nothing}
    "\n  Reject all pending deployments under one or more environments\n  "
    rejectDeployments::Union{RejectDeploymentsPayload, Missing, Nothing}
    "\n  Removes assignees from an assignable object.\n  "
    removeAssigneesFromAssignable::Union{RemoveAssigneesFromAssignablePayload, Missing, Nothing}
    "\n  Removes an administrator from the enterprise.\n  "
    removeEnterpriseAdmin::Union{RemoveEnterpriseAdminPayload, Missing, Nothing}
    "\n  Removes the identity provider from an enterprise\n  "
    removeEnterpriseIdentityProvider::Union{RemoveEnterpriseIdentityProviderPayload, Missing, Nothing}
    "\n  Removes an organization from the enterprise\n  "
    removeEnterpriseOrganization::Union{RemoveEnterpriseOrganizationPayload, Missing, Nothing}
    "\n  Removes a support entitlement from an enterprise member.\n  "
    removeEnterpriseSupportEntitlement::Union{RemoveEnterpriseSupportEntitlementPayload, Missing, Nothing}
    "\n  Removes labels from a Labelable object.\n  "
    removeLabelsFromLabelable::Union{RemoveLabelsFromLabelablePayload, Missing, Nothing}
    "\n  Removes outside collaborator from all repositories in an organization.\n  "
    removeOutsideCollaborator::Union{RemoveOutsideCollaboratorPayload, Missing, Nothing}
    "\n  Removes a reaction from a subject.\n  "
    removeReaction::Union{RemoveReactionPayload, Missing, Nothing}
    "\n  Removes a star from a Starrable.\n  "
    removeStar::Union{RemoveStarPayload, Missing, Nothing}
    "\n  Remove an upvote to a discussion or discussion comment.\n  "
    removeUpvote::Union{RemoveUpvotePayload, Missing, Nothing}
    "\n  Reopen a issue.\n  "
    reopenIssue::Union{ReopenIssuePayload, Missing, Nothing}
    "\n  Reopen a pull request.\n  "
    reopenPullRequest::Union{ReopenPullRequestPayload, Missing, Nothing}
    "\n  Set review requests on a pull request.\n  "
    requestReviews::Union{RequestReviewsPayload, Missing, Nothing}
    "\n  Rerequests an existing check suite.\n  "
    rerequestCheckSuite::Union{RerequestCheckSuitePayload, Missing, Nothing}
    "\n  Marks a review thread as resolved.\n  "
    resolveReviewThread::Union{ResolveReviewThreadPayload, Missing, Nothing}
    "\n  Revoke the migrator role to a user for all organizations under an enterprise account.\n  "
    revokeEnterpriseOrganizationsMigratorRole::Union{RevokeEnterpriseOrganizationsMigratorRolePayload, Missing, Nothing}
    "\n  Revoke the migrator role from a user or a team.\n  "
    revokeMigratorRole::Union{RevokeMigratorRolePayload, Missing, Nothing}
    "\n  Creates or updates the identity provider for an enterprise.\n  "
    setEnterpriseIdentityProvider::Union{SetEnterpriseIdentityProviderPayload, Missing, Nothing}
    "\n  Set an organization level interaction limit for an organization's public repositories.\n  "
    setOrganizationInteractionLimit::Union{SetOrganizationInteractionLimitPayload, Missing, Nothing}
    "\n  Sets an interaction limit setting for a repository.\n  "
    setRepositoryInteractionLimit::Union{SetRepositoryInteractionLimitPayload, Missing, Nothing}
    "\n  Set a user level interaction limit for an user's public repositories.\n  "
    setUserInteractionLimit::Union{SetUserInteractionLimitPayload, Missing, Nothing}
    "\n  Start a repository migration.\n  "
    startRepositoryMigration::Union{StartRepositoryMigrationPayload, Missing, Nothing}
    "\n  Submits a pending pull request review.\n  "
    submitPullRequestReview::Union{SubmitPullRequestReviewPayload, Missing, Nothing}
    "\n  Transfer an organization from one enterprise to another enterprise.\n  "
    transferEnterpriseOrganization::Union{TransferEnterpriseOrganizationPayload, Missing, Nothing}
    "\n  Transfer an issue to a different repository\n  "
    transferIssue::Union{TransferIssuePayload, Missing, Nothing}
    "\n  Unarchives a ProjectV2Item\n  "
    unarchiveProjectV2Item::Union{UnarchiveProjectV2ItemPayload, Missing, Nothing}
    "\n  Unarchives a repository.\n  "
    unarchiveRepository::Union{UnarchiveRepositoryPayload, Missing, Nothing}
    "\n  Unfollow an organization.\n  "
    unfollowOrganization::Union{UnfollowOrganizationPayload, Missing, Nothing}
    "\n  Unfollow a user.\n  "
    unfollowUser::Union{UnfollowUserPayload, Missing, Nothing}
    "\n  Unlinks a project from a repository.\n  "
    unlinkProjectV2FromRepository::Union{UnlinkProjectV2FromRepositoryPayload, Missing, Nothing}
    "\n  Unlinks a project to a team.\n  "
    unlinkProjectV2FromTeam::Union{UnlinkProjectV2FromTeamPayload, Missing, Nothing}
    "\n  Deletes a repository link from a project.\n  "
    unlinkRepositoryFromProject::Union{UnlinkRepositoryFromProjectPayload, Missing, Nothing}
    "\n  Unlock a lockable object\n  "
    unlockLockable::Union{UnlockLockablePayload, Missing, Nothing}
    "\n  Unmark a discussion comment as the chosen answer for discussions in an answerable category.\n  "
    unmarkDiscussionCommentAsAnswer::Union{UnmarkDiscussionCommentAsAnswerPayload, Missing, Nothing}
    "\n  Unmark a pull request file as viewed\n  "
    unmarkFileAsViewed::Union{UnmarkFileAsViewedPayload, Missing, Nothing}
    "\n  Unmark an issue as a duplicate of another issue.\n  "
    unmarkIssueAsDuplicate::Union{UnmarkIssueAsDuplicatePayload, Missing, Nothing}
    "\n  Unminimizes a comment on an Issue, Commit, Pull Request, or Gist\n  "
    unminimizeComment::Union{UnminimizeCommentPayload, Missing, Nothing}
    "\n  Unpin a pinned issue from a repository\n  "
    unpinIssue::Union{UnpinIssuePayload, Missing, Nothing}
    "\n  Marks a review thread as unresolved.\n  "
    unresolveReviewThread::Union{UnresolveReviewThreadPayload, Missing, Nothing}
    "\n  Update a branch protection rule\n  "
    updateBranchProtectionRule::Union{UpdateBranchProtectionRulePayload, Missing, Nothing}
    "\n  Update a check run\n  "
    updateCheckRun::Union{UpdateCheckRunPayload, Missing, Nothing}
    "\n  Modifies the settings of an existing check suite\n  "
    updateCheckSuitePreferences::Union{UpdateCheckSuitePreferencesPayload, Missing, Nothing}
    "\n  Update a discussion\n  "
    updateDiscussion::Union{UpdateDiscussionPayload, Missing, Nothing}
    "\n  Update the contents of a comment on a Discussion\n  "
    updateDiscussionComment::Union{UpdateDiscussionCommentPayload, Missing, Nothing}
    "\n  Updates the role of an enterprise administrator.\n  "
    updateEnterpriseAdministratorRole::Union{UpdateEnterpriseAdministratorRolePayload, Missing, Nothing}
    "\n  Sets whether private repository forks are enabled for an enterprise.\n  "
    updateEnterpriseAllowPrivateRepositoryForkingSetting::Union{UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload, Missing, Nothing}
    "\n  Sets the base repository permission for organizations in an enterprise.\n  "
    updateEnterpriseDefaultRepositoryPermissionSetting::Union{UpdateEnterpriseDefaultRepositoryPermissionSettingPayload, Missing, Nothing}
    "\n  Sets whether organization members with admin permissions on a repository can change repository visibility.\n  "
    updateEnterpriseMembersCanChangeRepositoryVisibilitySetting::Union{UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload, Missing, Nothing}
    "\n  Sets the members can create repositories setting for an enterprise.\n  "
    updateEnterpriseMembersCanCreateRepositoriesSetting::Union{UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload, Missing, Nothing}
    "\n  Sets the members can delete issues setting for an enterprise.\n  "
    updateEnterpriseMembersCanDeleteIssuesSetting::Union{UpdateEnterpriseMembersCanDeleteIssuesSettingPayload, Missing, Nothing}
    "\n  Sets the members can delete repositories setting for an enterprise.\n  "
    updateEnterpriseMembersCanDeleteRepositoriesSetting::Union{UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload, Missing, Nothing}
    "\n  Sets whether members can invite collaborators are enabled for an enterprise.\n  "
    updateEnterpriseMembersCanInviteCollaboratorsSetting::Union{UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload, Missing, Nothing}
    "\n  Sets whether or not an organization admin can make purchases.\n  "
    updateEnterpriseMembersCanMakePurchasesSetting::Union{UpdateEnterpriseMembersCanMakePurchasesSettingPayload, Missing, Nothing}
    "\n  Sets the members can update protected branches setting for an enterprise.\n  "
    updateEnterpriseMembersCanUpdateProtectedBranchesSetting::Union{UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload, Missing, Nothing}
    "\n  Sets the members can view dependency insights for an enterprise.\n  "
    updateEnterpriseMembersCanViewDependencyInsightsSetting::Union{UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload, Missing, Nothing}
    "\n  Sets whether organization projects are enabled for an enterprise.\n  "
    updateEnterpriseOrganizationProjectsSetting::Union{UpdateEnterpriseOrganizationProjectsSettingPayload, Missing, Nothing}
    "\n  Updates the role of an enterprise owner with an organization.\n  "
    updateEnterpriseOwnerOrganizationRole::Union{UpdateEnterpriseOwnerOrganizationRolePayload, Missing, Nothing}
    "\n  Updates an enterprise's profile.\n  "
    updateEnterpriseProfile::Union{UpdateEnterpriseProfilePayload, Missing, Nothing}
    "\n  Sets whether repository projects are enabled for a enterprise.\n  "
    updateEnterpriseRepositoryProjectsSetting::Union{UpdateEnterpriseRepositoryProjectsSettingPayload, Missing, Nothing}
    "\n  Sets whether team discussions are enabled for an enterprise.\n  "
    updateEnterpriseTeamDiscussionsSetting::Union{UpdateEnterpriseTeamDiscussionsSettingPayload, Missing, Nothing}
    "\n  Sets whether two factor authentication is required for all users in an enterprise.\n  "
    updateEnterpriseTwoFactorAuthenticationRequiredSetting::Union{UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload, Missing, Nothing}
    "\n  Updates an environment.\n  "
    updateEnvironment::Union{UpdateEnvironmentPayload, Missing, Nothing}
    "\n  Sets whether an IP allow list is enabled on an owner.\n  "
    updateIpAllowListEnabledSetting::Union{UpdateIpAllowListEnabledSettingPayload, Missing, Nothing}
    "\n  Updates an IP allow list entry.\n  "
    updateIpAllowListEntry::Union{UpdateIpAllowListEntryPayload, Missing, Nothing}
    "\n  Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner.\n  "
    updateIpAllowListForInstalledAppsEnabledSetting::Union{UpdateIpAllowListForInstalledAppsEnabledSettingPayload, Missing, Nothing}
    "\n  Updates an Issue.\n  "
    updateIssue::Union{UpdateIssuePayload, Missing, Nothing}
    "\n  Updates an IssueComment object.\n  "
    updateIssueComment::Union{UpdateIssueCommentPayload, Missing, Nothing}
    "\n  Updates an existing label.\n  "
    updateLabel::Union{UpdateLabelPayload, Missing, Nothing}
    "\n  Update the setting to restrict notifications to only verified or approved domains available to an owner.\n  "
    updateNotificationRestrictionSetting::Union{UpdateNotificationRestrictionSettingPayload, Missing, Nothing}
    "\n  Sets whether private repository forks are enabled for an organization.\n  "
    updateOrganizationAllowPrivateRepositoryForkingSetting::Union{UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload, Missing, Nothing}
    "\n  Sets whether contributors are required to sign off on web-based commits for repositories in an organization.\n  "
    updateOrganizationWebCommitSignoffSetting::Union{UpdateOrganizationWebCommitSignoffSettingPayload, Missing, Nothing}
    "\n  Updates an existing project.\n  "
    updateProject::Union{UpdateProjectPayload, Missing, Nothing}
    "\n  Updates an existing project card.\n  "
    updateProjectCard::Union{UpdateProjectCardPayload, Missing, Nothing}
    "\n  Updates an existing project column.\n  "
    updateProjectColumn::Union{UpdateProjectColumnPayload, Missing, Nothing}
    "\n  Updates a draft issue within a Project.\n  "
    updateProjectDraftIssue::Union{UpdateProjectDraftIssuePayload, Missing, Nothing}
    "\n  Updates an existing project (beta).\n  "
    updateProjectNext::Union{UpdateProjectNextPayload, Missing, Nothing}
    "\n  Updates a field of an item from a Project.\n  "
    updateProjectNextItemField::Union{UpdateProjectNextItemFieldPayload, Missing, Nothing}
    "\n  Updates an existing project (beta).\n  "
    updateProjectV2::Union{UpdateProjectV2Payload, Missing, Nothing}
    "\n  Updates a draft issue within a Project.\n  "
    updateProjectV2DraftIssue::Union{UpdateProjectV2DraftIssuePayload, Missing, Nothing}
    "\n  This mutation updates the value of a field for an item in a Project. Currently\n  only single-select, text, number, date, and iteration fields are supported.\n  "
    updateProjectV2ItemFieldValue::Union{UpdateProjectV2ItemFieldValuePayload, Missing, Nothing}
    "\n  This mutation updates the position of the item in the project, where the position represents the priority of an item.\n  "
    updateProjectV2ItemPosition::Union{UpdateProjectV2ItemPositionPayload, Missing, Nothing}
    "\n  Update a pull request\n  "
    updatePullRequest::Union{UpdatePullRequestPayload, Missing, Nothing}
    "\n  Merge or Rebase HEAD from upstream branch into pull request branch\n  "
    updatePullRequestBranch::Union{UpdatePullRequestBranchPayload, Missing, Nothing}
    "\n  Updates the body of a pull request review.\n  "
    updatePullRequestReview::Union{UpdatePullRequestReviewPayload, Missing, Nothing}
    "\n  Updates a pull request review comment.\n  "
    updatePullRequestReviewComment::Union{UpdatePullRequestReviewCommentPayload, Missing, Nothing}
    "\n  Update a Git Ref.\n  "
    updateRef::Union{UpdateRefPayload, Missing, Nothing}
    "\n  Creates, updates and/or deletes multiple refs in a repository.\n\n  This mutation takes a list of `RefUpdate`s and performs these updates\n  on the repository. All updates are performed atomically, meaning that\n  if one of them is rejected, no other ref will be modified.\n\n  `RefUpdate.beforeOid` specifies that the given reference needs to point\n  to the given value before performing any updates. A value of\n  `0000000000000000000000000000000000000000` can be used to verify that\n  the references should not exist.\n\n  `RefUpdate.afterOid` specifies the value that the given reference\n  will point to after performing all updates. A value of\n  `0000000000000000000000000000000000000000` can be used to delete a\n  reference.\n\n  If `RefUpdate.force` is set to `true`, a non-fast-forward updates\n  for the given reference will be allowed.\n  "
    updateRefs::Union{UpdateRefsPayload, Missing, Nothing}
    "\n  Update information about a repository.\n  "
    updateRepository::Union{UpdateRepositoryPayload, Missing, Nothing}
    "\n  Sets whether contributors are required to sign off on web-based commits for a repository.\n  "
    updateRepositoryWebCommitSignoffSetting::Union{UpdateRepositoryWebCommitSignoffSettingPayload, Missing, Nothing}
    "\n  Change visibility of your sponsorship and opt in or out of email updates from the maintainer.\n  "
    updateSponsorshipPreferences::Union{UpdateSponsorshipPreferencesPayload, Missing, Nothing}
    "\n  Updates the state for subscribable subjects.\n  "
    updateSubscription::Union{UpdateSubscriptionPayload, Missing, Nothing}
    "\n  Updates a team discussion.\n  "
    updateTeamDiscussion::Union{UpdateTeamDiscussionPayload, Missing, Nothing}
    "\n  Updates a discussion comment.\n  "
    updateTeamDiscussionComment::Union{UpdateTeamDiscussionCommentPayload, Missing, Nothing}
    "\n  Updates team review assignment.\n  "
    updateTeamReviewAssignment::Union{UpdateTeamReviewAssignmentPayload, Missing, Nothing}
    "\n  Update team repository.\n  "
    updateTeamsRepository::Union{UpdateTeamsRepositoryPayload, Missing, Nothing}
    "\n  Replaces the repository's topics with the given topics.\n  "
    updateTopics::Union{UpdateTopicsPayload, Missing, Nothing}
    "\n  Verify that a verifiable domain has the expected DNS record.\n  "
    verifyVerifiableDomain::Union{VerifyVerifiableDomainPayload, Missing, Nothing}
end
function Mutation(; abortQueuedMigrations = nothing, acceptEnterpriseAdministratorInvitation = nothing, acceptTopicSuggestion = nothing, addAssigneesToAssignable = nothing, addComment = nothing, addDiscussionComment = nothing, addDiscussionPollVote = nothing, addEnterpriseOrganizationMember = nothing, addEnterpriseSupportEntitlement = nothing, addLabelsToLabelable = nothing, addProjectCard = nothing, addProjectColumn = nothing, addProjectDraftIssue = nothing, addProjectNextItem = nothing, addProjectV2DraftIssue = nothing, addProjectV2ItemById = nothing, addPullRequestReview = nothing, addPullRequestReviewComment = nothing, addPullRequestReviewThread = nothing, addReaction = nothing, addStar = nothing, addUpvote = nothing, addVerifiableDomain = nothing, approveDeployments = nothing, approveVerifiableDomain = nothing, archiveProjectV2Item = nothing, archiveRepository = nothing, cancelEnterpriseAdminInvitation = nothing, cancelSponsorship = nothing, changeUserStatus = nothing, clearLabelsFromLabelable = nothing, clearProjectV2ItemFieldValue = nothing, cloneProject = nothing, cloneTemplateRepository = nothing, closeIssue = nothing, closePullRequest = nothing, convertProjectCardNoteToIssue = nothing, convertPullRequestToDraft = nothing, createBranchProtectionRule = nothing, createCheckRun = nothing, createCheckSuite = nothing, createCommitOnBranch = nothing, createDeployment = nothing, createDeploymentStatus = nothing, createDiscussion = nothing, createEnterpriseOrganization = nothing, createEnvironment = nothing, createIpAllowListEntry = nothing, createIssue = nothing, createLabel = nothing, createLinkedBranch = nothing, createMigrationSource = nothing, createProject = nothing, createProjectV2 = nothing, createPullRequest = nothing, createRef = nothing, createRepository = nothing, createSponsorsTier = nothing, createSponsorship = nothing, createTeamDiscussion = nothing, createTeamDiscussionComment = nothing, declineTopicSuggestion = nothing, deleteBranchProtectionRule = nothing, deleteDeployment = nothing, deleteDiscussion = nothing, deleteDiscussionComment = nothing, deleteEnvironment = nothing, deleteIpAllowListEntry = nothing, deleteIssue = nothing, deleteIssueComment = nothing, deleteLabel = nothing, deleteLinkedBranch = nothing, deletePackageVersion = nothing, deleteProject = nothing, deleteProjectCard = nothing, deleteProjectColumn = nothing, deleteProjectNextItem = nothing, deleteProjectV2Item = nothing, deletePullRequestReview = nothing, deletePullRequestReviewComment = nothing, deleteRef = nothing, deleteTeamDiscussion = nothing, deleteTeamDiscussionComment = nothing, deleteVerifiableDomain = nothing, disablePullRequestAutoMerge = nothing, dismissPullRequestReview = nothing, dismissRepositoryVulnerabilityAlert = nothing, enablePullRequestAutoMerge = nothing, followOrganization = nothing, followUser = nothing, grantEnterpriseOrganizationsMigratorRole = nothing, grantMigratorRole = nothing, importProject = nothing, inviteEnterpriseAdmin = nothing, linkProjectV2ToRepository = nothing, linkProjectV2ToTeam = nothing, linkRepositoryToProject = nothing, lockLockable = nothing, markDiscussionCommentAsAnswer = nothing, markFileAsViewed = nothing, markPullRequestReadyForReview = nothing, mergeBranch = nothing, mergePullRequest = nothing, minimizeComment = nothing, moveProjectCard = nothing, moveProjectColumn = nothing, pinIssue = nothing, regenerateEnterpriseIdentityProviderRecoveryCodes = nothing, regenerateVerifiableDomainToken = nothing, rejectDeployments = nothing, removeAssigneesFromAssignable = nothing, removeEnterpriseAdmin = nothing, removeEnterpriseIdentityProvider = nothing, removeEnterpriseOrganization = nothing, removeEnterpriseSupportEntitlement = nothing, removeLabelsFromLabelable = nothing, removeOutsideCollaborator = nothing, removeReaction = nothing, removeStar = nothing, removeUpvote = nothing, reopenIssue = nothing, reopenPullRequest = nothing, requestReviews = nothing, rerequestCheckSuite = nothing, resolveReviewThread = nothing, revokeEnterpriseOrganizationsMigratorRole = nothing, revokeMigratorRole = nothing, setEnterpriseIdentityProvider = nothing, setOrganizationInteractionLimit = nothing, setRepositoryInteractionLimit = nothing, setUserInteractionLimit = nothing, startRepositoryMigration = nothing, submitPullRequestReview = nothing, transferEnterpriseOrganization = nothing, transferIssue = nothing, unarchiveProjectV2Item = nothing, unarchiveRepository = nothing, unfollowOrganization = nothing, unfollowUser = nothing, unlinkProjectV2FromRepository = nothing, unlinkProjectV2FromTeam = nothing, unlinkRepositoryFromProject = nothing, unlockLockable = nothing, unmarkDiscussionCommentAsAnswer = nothing, unmarkFileAsViewed = nothing, unmarkIssueAsDuplicate = nothing, unminimizeComment = nothing, unpinIssue = nothing, unresolveReviewThread = nothing, updateBranchProtectionRule = nothing, updateCheckRun = nothing, updateCheckSuitePreferences = nothing, updateDiscussion = nothing, updateDiscussionComment = nothing, updateEnterpriseAdministratorRole = nothing, updateEnterpriseAllowPrivateRepositoryForkingSetting = nothing, updateEnterpriseDefaultRepositoryPermissionSetting = nothing, updateEnterpriseMembersCanChangeRepositoryVisibilitySetting = nothing, updateEnterpriseMembersCanCreateRepositoriesSetting = nothing, updateEnterpriseMembersCanDeleteIssuesSetting = nothing, updateEnterpriseMembersCanDeleteRepositoriesSetting = nothing, updateEnterpriseMembersCanInviteCollaboratorsSetting = nothing, updateEnterpriseMembersCanMakePurchasesSetting = nothing, updateEnterpriseMembersCanUpdateProtectedBranchesSetting = nothing, updateEnterpriseMembersCanViewDependencyInsightsSetting = nothing, updateEnterpriseOrganizationProjectsSetting = nothing, updateEnterpriseOwnerOrganizationRole = nothing, updateEnterpriseProfile = nothing, updateEnterpriseRepositoryProjectsSetting = nothing, updateEnterpriseTeamDiscussionsSetting = nothing, updateEnterpriseTwoFactorAuthenticationRequiredSetting = nothing, updateEnvironment = nothing, updateIpAllowListEnabledSetting = nothing, updateIpAllowListEntry = nothing, updateIpAllowListForInstalledAppsEnabledSetting = nothing, updateIssue = nothing, updateIssueComment = nothing, updateLabel = nothing, updateNotificationRestrictionSetting = nothing, updateOrganizationAllowPrivateRepositoryForkingSetting = nothing, updateOrganizationWebCommitSignoffSetting = nothing, updateProject = nothing, updateProjectCard = nothing, updateProjectColumn = nothing, updateProjectDraftIssue = nothing, updateProjectNext = nothing, updateProjectNextItemField = nothing, updateProjectV2 = nothing, updateProjectV2DraftIssue = nothing, updateProjectV2ItemFieldValue = nothing, updateProjectV2ItemPosition = nothing, updatePullRequest = nothing, updatePullRequestBranch = nothing, updatePullRequestReview = nothing, updatePullRequestReviewComment = nothing, updateRef = nothing, updateRefs = nothing, updateRepository = nothing, updateRepositoryWebCommitSignoffSetting = nothing, updateSponsorshipPreferences = nothing, updateSubscription = nothing, updateTeamDiscussion = nothing, updateTeamDiscussionComment = nothing, updateTeamReviewAssignment = nothing, updateTeamsRepository = nothing, updateTopics = nothing, verifyVerifiableDomain = nothing)
    Mutation(abortQueuedMigrations, acceptEnterpriseAdministratorInvitation, acceptTopicSuggestion, addAssigneesToAssignable, addComment, addDiscussionComment, addDiscussionPollVote, addEnterpriseOrganizationMember, addEnterpriseSupportEntitlement, addLabelsToLabelable, addProjectCard, addProjectColumn, addProjectDraftIssue, addProjectNextItem, addProjectV2DraftIssue, addProjectV2ItemById, addPullRequestReview, addPullRequestReviewComment, addPullRequestReviewThread, addReaction, addStar, addUpvote, addVerifiableDomain, approveDeployments, approveVerifiableDomain, archiveProjectV2Item, archiveRepository, cancelEnterpriseAdminInvitation, cancelSponsorship, changeUserStatus, clearLabelsFromLabelable, clearProjectV2ItemFieldValue, cloneProject, cloneTemplateRepository, closeIssue, closePullRequest, convertProjectCardNoteToIssue, convertPullRequestToDraft, createBranchProtectionRule, createCheckRun, createCheckSuite, createCommitOnBranch, createDeployment, createDeploymentStatus, createDiscussion, createEnterpriseOrganization, createEnvironment, createIpAllowListEntry, createIssue, createLabel, createLinkedBranch, createMigrationSource, createProject, createProjectV2, createPullRequest, createRef, createRepository, createSponsorsTier, createSponsorship, createTeamDiscussion, createTeamDiscussionComment, declineTopicSuggestion, deleteBranchProtectionRule, deleteDeployment, deleteDiscussion, deleteDiscussionComment, deleteEnvironment, deleteIpAllowListEntry, deleteIssue, deleteIssueComment, deleteLabel, deleteLinkedBranch, deletePackageVersion, deleteProject, deleteProjectCard, deleteProjectColumn, deleteProjectNextItem, deleteProjectV2Item, deletePullRequestReview, deletePullRequestReviewComment, deleteRef, deleteTeamDiscussion, deleteTeamDiscussionComment, deleteVerifiableDomain, disablePullRequestAutoMerge, dismissPullRequestReview, dismissRepositoryVulnerabilityAlert, enablePullRequestAutoMerge, followOrganization, followUser, grantEnterpriseOrganizationsMigratorRole, grantMigratorRole, importProject, inviteEnterpriseAdmin, linkProjectV2ToRepository, linkProjectV2ToTeam, linkRepositoryToProject, lockLockable, markDiscussionCommentAsAnswer, markFileAsViewed, markPullRequestReadyForReview, mergeBranch, mergePullRequest, minimizeComment, moveProjectCard, moveProjectColumn, pinIssue, regenerateEnterpriseIdentityProviderRecoveryCodes, regenerateVerifiableDomainToken, rejectDeployments, removeAssigneesFromAssignable, removeEnterpriseAdmin, removeEnterpriseIdentityProvider, removeEnterpriseOrganization, removeEnterpriseSupportEntitlement, removeLabelsFromLabelable, removeOutsideCollaborator, removeReaction, removeStar, removeUpvote, reopenIssue, reopenPullRequest, requestReviews, rerequestCheckSuite, resolveReviewThread, revokeEnterpriseOrganizationsMigratorRole, revokeMigratorRole, setEnterpriseIdentityProvider, setOrganizationInteractionLimit, setRepositoryInteractionLimit, setUserInteractionLimit, startRepositoryMigration, submitPullRequestReview, transferEnterpriseOrganization, transferIssue, unarchiveProjectV2Item, unarchiveRepository, unfollowOrganization, unfollowUser, unlinkProjectV2FromRepository, unlinkProjectV2FromTeam, unlinkRepositoryFromProject, unlockLockable, unmarkDiscussionCommentAsAnswer, unmarkFileAsViewed, unmarkIssueAsDuplicate, unminimizeComment, unpinIssue, unresolveReviewThread, updateBranchProtectionRule, updateCheckRun, updateCheckSuitePreferences, updateDiscussion, updateDiscussionComment, updateEnterpriseAdministratorRole, updateEnterpriseAllowPrivateRepositoryForkingSetting, updateEnterpriseDefaultRepositoryPermissionSetting, updateEnterpriseMembersCanChangeRepositoryVisibilitySetting, updateEnterpriseMembersCanCreateRepositoriesSetting, updateEnterpriseMembersCanDeleteIssuesSetting, updateEnterpriseMembersCanDeleteRepositoriesSetting, updateEnterpriseMembersCanInviteCollaboratorsSetting, updateEnterpriseMembersCanMakePurchasesSetting, updateEnterpriseMembersCanUpdateProtectedBranchesSetting, updateEnterpriseMembersCanViewDependencyInsightsSetting, updateEnterpriseOrganizationProjectsSetting, updateEnterpriseOwnerOrganizationRole, updateEnterpriseProfile, updateEnterpriseRepositoryProjectsSetting, updateEnterpriseTeamDiscussionsSetting, updateEnterpriseTwoFactorAuthenticationRequiredSetting, updateEnvironment, updateIpAllowListEnabledSetting, updateIpAllowListEntry, updateIpAllowListForInstalledAppsEnabledSetting, updateIssue, updateIssueComment, updateLabel, updateNotificationRestrictionSetting, updateOrganizationAllowPrivateRepositoryForkingSetting, updateOrganizationWebCommitSignoffSetting, updateProject, updateProjectCard, updateProjectColumn, updateProjectDraftIssue, updateProjectNext, updateProjectNextItemField, updateProjectV2, updateProjectV2DraftIssue, updateProjectV2ItemFieldValue, updateProjectV2ItemPosition, updatePullRequest, updatePullRequestBranch, updatePullRequestReview, updatePullRequestReviewComment, updateRef, updateRefs, updateRepository, updateRepositoryWebCommitSignoffSetting, updateSponsorshipPreferences, updateSubscription, updateTeamDiscussion, updateTeamDiscussionComment, updateTeamReviewAssignment, updateTeamsRepository, updateTopics, verifyVerifiableDomain)
end

"""
Autogenerated input type of DeleteDiscussion
"""
mutable struct DeleteDiscussionInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The id of the discussion to delete.\n  "
    id::String
end
function DeleteDiscussionInput(; clientMutationId = nothing, id)
    DeleteDiscussionInput(clientMutationId, id)
end

"""
Autogenerated input type of DeleteBranchProtectionRule
"""
mutable struct DeleteBranchProtectionRuleInput <: OfficialGithubSchema
    "\n  The global relay id of the branch protection rule to be deleted.\n  "
    branchProtectionRuleId::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function DeleteBranchProtectionRuleInput(; branchProtectionRuleId, clientMutationId = nothing)
    DeleteBranchProtectionRuleInput(branchProtectionRuleId, clientMutationId)
end

"""
Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
"""
mutable struct UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the members can update protected branches setting.\n  "
    enterpriseId::String
    "\n  The value for the members can update protected branches setting on the enterprise.\n  "
    settingValue::EnterpriseEnabledDisabledSettingValue.T
end
function UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput(; clientMutationId = nothing, enterpriseId, settingValue)
    UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput(clientMutationId, enterpriseId, settingValue)
end

"""
Autogenerated input type of AddProjectNextItem
"""
mutable struct AddProjectNextItemInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The content id of the item (Issue or PullRequest). This field is required.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `contentId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    contentId::Union{String, Missing, Nothing}
    "\n  The ID of the Project to add the item to. This field is required.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    projectId::Union{String, Missing, Nothing}
end
function AddProjectNextItemInput(; clientMutationId = nothing, contentId = nothing, projectId = nothing)
    AddProjectNextItemInput(clientMutationId, contentId, projectId)
end

"""
Represents an SSH signature on a Commit or Tag.
"""
mutable struct SshSignature <: OfficialGithubSchema
    "\n  Email used to sign this object.\n  "
    email::String
    "\n  True if the signature is valid and verified by GitHub.\n  "
    isValid::Bool
    "\n  Hex-encoded fingerprint of the key that signed this object.\n  "
    keyFingerprint::Union{String, Missing, Nothing}
    "\n  Payload for GPG signing object. Raw ODB object without the signature header.\n  "
    payload::String
    "\n  ASCII-armored signature header from object.\n  "
    signature::String
    "\n  GitHub user corresponding to the email signing this commit.\n  "
    signer::Union{User, Missing, Nothing}
    "\n  The state of this signature. `VALID` if signature is valid and verified by\n  GitHub, otherwise represents reason why signature is considered invalid.\n  "
    state::GitSignatureState.T
    "\n  True if the signature was made with GitHub's signing key.\n  "
    wasSignedByGitHub::Bool
end
function SshSignature(; email, isValid, keyFingerprint = nothing, payload, signature, signer = nothing, state, wasSignedByGitHub)
    SshSignature(email, isValid, keyFingerprint, payload, signature, signer, state, wasSignedByGitHub)
end

"""
Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
"""
mutable struct UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the members can change repository visibility setting.\n  "
    enterpriseId::String
    "\n  The value for the members can change repository visibility setting on the enterprise.\n  "
    settingValue::EnterpriseEnabledDisabledSettingValue.T
end
function UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput(; clientMutationId = nothing, enterpriseId, settingValue)
    UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput(clientMutationId, enterpriseId, settingValue)
end

"""
Autogenerated input type of ClearProjectV2ItemFieldValue
"""
mutable struct ClearProjectV2ItemFieldValueInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the field to be cleared.\n  "
    fieldId::String
    "\n  The ID of the item to be cleared.\n  "
    itemId::String
    "\n  The ID of the Project.\n  "
    projectId::String
end
function ClearProjectV2ItemFieldValueInput(; clientMutationId = nothing, fieldId, itemId, projectId)
    ClearProjectV2ItemFieldValueInput(clientMutationId, fieldId, itemId, projectId)
end

"""
Ordering options for commit contribution connections.
"""
mutable struct CommitContributionOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field by which to order commit contributions.\n  "
    field::CommitContributionOrderField.T
end
function CommitContributionOrder(; direction, field)
    CommitContributionOrder(direction, field)
end

"""
Autogenerated input type of CreateProject
"""
mutable struct CreateProjectInput <: OfficialGithubSchema
    "\n  The description of project.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The name of project.\n  "
    name::String
    "\n  The owner ID to create the project under.\n  "
    ownerId::String
    "\n  A list of repository IDs to create as linked repositories for the project\n  "
    repositoryIds::Union{Vector{String}, Missing, Nothing}
    "\n  The name of the GitHub-provided template.\n  "
    template::Union{ProjectTemplate.T, Missing, Nothing}
end
function CreateProjectInput(; body = nothing, clientMutationId = nothing, name, ownerId, repositoryIds = nothing, template = nothing)
    CreateProjectInput(body, clientMutationId, name, ownerId, repositoryIds, template)
end

"""
Ordering options for repository invitation connections.
"""
mutable struct RepositoryInvitationOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order repository invitations by.\n  "
    field::RepositoryInvitationOrderField.T
end
function RepositoryInvitationOrder(; direction, field)
    RepositoryInvitationOrder(direction, field)
end

"""
Ways in which team discussion comment connections can be ordered.
"""
mutable struct TeamDiscussionCommentOrder <: OfficialGithubSchema
    "\n  The direction in which to order nodes.\n  "
    direction::OrderDirection.T
    "\n  The field by which to order nodes.\n  "
    field::TeamDiscussionCommentOrderField.T
end
function TeamDiscussionCommentOrder(; direction, field)
    TeamDiscussionCommentOrder(direction, field)
end

"""
Autogenerated input type of DeleteLinkedBranch
"""
mutable struct DeleteLinkedBranchInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the linked branch\n  "
    linkedBranchId::String
end
function DeleteLinkedBranchInput(; clientMutationId = nothing, linkedBranchId)
    DeleteLinkedBranchInput(clientMutationId, linkedBranchId)
end

"""
Autogenerated input type of UnlinkRepositoryFromProject
"""
mutable struct UnlinkRepositoryFromProjectInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the Project linked to the Repository.\n  "
    projectId::String
    "\n  The ID of the Repository linked to the Project.\n  "
    repositoryId::String
end
function UnlinkRepositoryFromProjectInput(; clientMutationId = nothing, projectId, repositoryId)
    UnlinkRepositoryFromProjectInput(clientMutationId, projectId, repositoryId)
end

"""
Specifies a review comment to be left with a Pull Request Review.
"""
mutable struct DraftPullRequestReviewComment <: OfficialGithubSchema
    "\n  Body of the comment to leave.\n  "
    body::String
    "\n  Path to the file being commented on.\n  "
    path::String
    "\n  Position in the file to leave a comment on.\n  "
    position::Int
end
function DraftPullRequestReviewComment(; body, path, position)
    DraftPullRequestReviewComment(body, path, position)
end

"""
Specifies a review comment thread to be left with a Pull Request Review.
"""
mutable struct DraftPullRequestReviewThread <: OfficialGithubSchema
    "\n  Body of the comment to leave.\n  "
    body::String
    "\n  The line of the blob to which the thread refers. The end of the line range for multi-line comments.\n  "
    line::Int
    "\n  Path to the file being commented on.\n  "
    path::String
    "\n  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.\n  "
    side::Union{DiffSide.T, Missing, Nothing}
    "\n  The first line of the range to which the comment refers.\n  "
    startLine::Union{Int, Missing, Nothing}
    "\n  The side of the diff on which the start line resides.\n  "
    startSide::Union{DiffSide.T, Missing, Nothing}
end
function DraftPullRequestReviewThread(; body, line, path, side = RIGHT, startLine = nothing, startSide = RIGHT)
    DraftPullRequestReviewThread(body, line, path, side, startLine, startSide)
end

"""
Autogenerated input type of AddPullRequestReview
"""
mutable struct AddPullRequestReviewInput <: OfficialGithubSchema
    "\n  The contents of the review body comment.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The review line comments.\n  "
    comments::Union{Vector{Union{DraftPullRequestReviewComment, Missing, Nothing}}, Missing, Nothing}
    "\n  The commit OID the review pertains to.\n  "
    commitOID::Union{GitObjectID, Missing, Nothing}
    "\n  The event to perform on the pull request review.\n  "
    event::Union{PullRequestReviewEvent.T, Missing, Nothing}
    "\n  The Node ID of the pull request to modify.\n  "
    pullRequestId::String
    "\n  The review line comment threads.\n  "
    threads::Union{Vector{Union{DraftPullRequestReviewThread, Missing, Nothing}}, Missing, Nothing}
end
function AddPullRequestReviewInput(; body = nothing, clientMutationId = nothing, comments = nothing, commitOID = nothing, event = nothing, pullRequestId, threads = nothing)
    AddPullRequestReviewInput(body, clientMutationId, comments, commitOID, event, pullRequestId, threads)
end

"""
Autogenerated input type of CreatePullRequest
"""
mutable struct CreatePullRequestInput <: OfficialGithubSchema
    "\n  The name of the branch you want your changes pulled into. This should be an existing branch\n  on the current repository. You cannot update the base branch on a pull request to point\n  to another repository.\n  "
    baseRefName::String
    "\n  The contents of the pull request.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Indicates whether this pull request should be a draft.\n  "
    draft::Union{Bool, Missing, Nothing}
    "\n  The name of the branch where your changes are implemented. For cross-repository pull requests\n  in the same network, namespace `head_ref_name` with a user like this: `username:branch`.\n  "
    headRefName::String
    "\n  Indicates whether maintainers can modify the pull request.\n  "
    maintainerCanModify::Union{Bool, Missing, Nothing}
    "\n  The Node ID of the repository.\n  "
    repositoryId::String
    "\n  The title of the pull request.\n  "
    title::String
end
function CreatePullRequestInput(; baseRefName, body = nothing, clientMutationId = nothing, draft = false, headRefName, maintainerCanModify = true, repositoryId, title)
    CreatePullRequestInput(baseRefName, body, clientMutationId, draft, headRefName, maintainerCanModify, repositoryId, title)
end

"""
Autogenerated input type of RemoveReaction
"""
mutable struct RemoveReactionInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The name of the emoji reaction to remove.\n  "
    content::ReactionContent.T
    "\n  The Node ID of the subject to modify.\n  "
    subjectId::String
end
function RemoveReactionInput(; clientMutationId = nothing, content, subjectId)
    RemoveReactionInput(clientMutationId, content, subjectId)
end

"""
The filters that are available when fetching check runs.
"""
mutable struct CheckRunFilter <: OfficialGithubSchema
    "\n  Filters the check runs created by this application ID.\n  "
    appId::Union{Int, Missing, Nothing}
    "\n  Filters the check runs by this name.\n  "
    checkName::Union{String, Missing, Nothing}
    "\n  Filters the check runs by this type.\n  "
    checkType::Union{CheckRunType.T, Missing, Nothing}
    "\n  Filters the check runs by these conclusions.\n  "
    conclusions::Union{Vector{CheckConclusionState.T}, Missing, Nothing}
    "\n  Filters the check runs by this status. Superceded by statuses.\n  "
    status::Union{CheckStatusState.T, Missing, Nothing}
    "\n  Filters the check runs by this status. Overrides status.\n  "
    statuses::Union{Vector{CheckStatusState.T}, Missing, Nothing}
end
function CheckRunFilter(; appId = nothing, checkName = nothing, checkType = nothing, conclusions = nothing, status = nothing, statuses = nothing)
    CheckRunFilter(appId, checkName, checkType, conclusions, status, statuses)
end

"""
Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
"""
mutable struct UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the members can view dependency insights setting.\n  "
    enterpriseId::String
    "\n  The value for the members can view dependency insights setting on the enterprise.\n  "
    settingValue::EnterpriseEnabledDisabledSettingValue.T
end
function UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput(; clientMutationId = nothing, enterpriseId, settingValue)
    UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput(clientMutationId, enterpriseId, settingValue)
end

"""
An organization list hovercard context
"""
mutable struct OrganizationsHovercardContext <: OfficialGithubSchema
    "\n  A string describing this context\n  "
    message::String
    "\n  An octicon to accompany this context\n  "
    octicon::String
    "\n  Organizations this user is a member of that are relevant\n  "
    relevantOrganizations::OrganizationConnection
    "\n  The total number of organizations this user is in\n  "
    totalOrganizationCount::Int
end
function OrganizationsHovercardContext(; message, octicon, relevantOrganizations, totalOrganizationCount)
    OrganizationsHovercardContext(message, octicon, relevantOrganizations, totalOrganizationCount)
end

"""
Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting
"""
mutable struct UpdateEnterpriseRepositoryProjectsSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the repository projects setting.\n  "
    enterpriseId::String
    "\n  The value for the repository projects setting on the enterprise.\n  "
    settingValue::EnterpriseEnabledDisabledSettingValue.T
end
function UpdateEnterpriseRepositoryProjectsSettingInput(; clientMutationId = nothing, enterpriseId, settingValue)
    UpdateEnterpriseRepositoryProjectsSettingInput(clientMutationId, enterpriseId, settingValue)
end

"""
Autogenerated input type of ApproveVerifiableDomain
"""
mutable struct ApproveVerifiableDomainInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the verifiable domain to approve.\n  "
    id::String
end
function ApproveVerifiableDomainInput(; clientMutationId = nothing, id)
    ApproveVerifiableDomainInput(clientMutationId, id)
end

"""
Autogenerated input type of UpdateIssue
"""
mutable struct UpdateIssueInput <: OfficialGithubSchema
    "\n  An array of Node IDs of users for this issue.\n  "
    assigneeIds::Union{Vector{String}, Missing, Nothing}
    "\n  The body for the issue description.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the Issue to modify.\n  "
    id::String
    "\n  An array of Node IDs of labels for this issue.\n  "
    labelIds::Union{Vector{String}, Missing, Nothing}
    "\n  The Node ID of the milestone for this issue.\n  "
    milestoneId::Union{String, Missing, Nothing}
    "\n  An array of Node IDs for projects associated with this issue.\n  "
    projectIds::Union{Vector{String}, Missing, Nothing}
    "\n  The desired issue state.\n  "
    state::Union{IssueState.T, Missing, Nothing}
    "\n  The title for the issue.\n  "
    title::Union{String, Missing, Nothing}
end
function UpdateIssueInput(; assigneeIds = nothing, body = nothing, clientMutationId = nothing, id, labelIds = nothing, milestoneId = nothing, projectIds = nothing, state = nothing, title = nothing)
    UpdateIssueInput(assigneeIds, body, clientMutationId, id, labelIds, milestoneId, projectIds, state, title)
end

"""
Autogenerated input type of SetRepositoryInteractionLimit
"""
mutable struct SetRepositoryInteractionLimitInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  When this limit should expire.\n  "
    expiry::Union{RepositoryInteractionLimitExpiry.T, Missing, Nothing}
    "\n  The limit to set.\n  "
    limit::RepositoryInteractionLimit.T
    "\n  The ID of the repository to set a limit for.\n  "
    repositoryId::String
end
function SetRepositoryInteractionLimitInput(; clientMutationId = nothing, expiry = nothing, limit, repositoryId)
    SetRepositoryInteractionLimitInput(clientMutationId, expiry, limit, repositoryId)
end

"""
Autogenerated input type of UnfollowUser
"""
mutable struct UnfollowUserInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the user to unfollow.\n  "
    userId::String
end
function UnfollowUserInput(; clientMutationId = nothing, userId)
    UnfollowUserInput(clientMutationId, userId)
end

"""
Autogenerated input type of UpdateEnvironment
"""
mutable struct UpdateEnvironmentInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The node ID of the environment.\n  "
    environmentId::String
    "\n  The ids of users or teams that can approve deployments to this environment\n  "
    reviewers::Union{Vector{String}, Missing, Nothing}
    "\n  The wait timer in minutes.\n  "
    waitTimer::Union{Int, Missing, Nothing}
end
function UpdateEnvironmentInput(; clientMutationId = nothing, environmentId, reviewers = nothing, waitTimer = nothing)
    UpdateEnvironmentInput(clientMutationId, environmentId, reviewers, waitTimer)
end

"""
Autogenerated input type of UpdatePullRequest
"""
mutable struct UpdatePullRequestInput <: OfficialGithubSchema
    "\n  An array of Node IDs of users for this pull request.\n  "
    assigneeIds::Union{Vector{String}, Missing, Nothing}
    "\n  The name of the branch you want your changes pulled into. This should be an existing branch\n  on the current repository.\n  "
    baseRefName::Union{String, Missing, Nothing}
    "\n  The contents of the pull request.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  An array of Node IDs of labels for this pull request.\n  "
    labelIds::Union{Vector{String}, Missing, Nothing}
    "\n  Indicates whether maintainers can modify the pull request.\n  "
    maintainerCanModify::Union{Bool, Missing, Nothing}
    "\n  The Node ID of the milestone for this pull request.\n  "
    milestoneId::Union{String, Missing, Nothing}
    "\n  An array of Node IDs for projects associated with this pull request.\n  "
    projectIds::Union{Vector{String}, Missing, Nothing}
    "\n  The Node ID of the pull request.\n  "
    pullRequestId::String
    "\n  The target state of the pull request.\n  "
    state::Union{PullRequestUpdateState.T, Missing, Nothing}
    "\n  The title of the pull request.\n  "
    title::Union{String, Missing, Nothing}
end
function UpdatePullRequestInput(; assigneeIds = nothing, baseRefName = nothing, body = nothing, clientMutationId = nothing, labelIds = nothing, maintainerCanModify = nothing, milestoneId = nothing, projectIds = nothing, pullRequestId, state = nothing, title = nothing)
    UpdatePullRequestInput(assigneeIds, baseRefName, body, clientMutationId, labelIds, maintainerCanModify, milestoneId, projectIds, pullRequestId, state, title)
end

"""
Possible further actions the integrator can perform.
"""
mutable struct CheckRunAction <: OfficialGithubSchema
    "\n  A short explanation of what this action would do.\n  "
    description::String
    "\n  A reference for the action on the integrator's system.\n  "
    identifier::String
    "\n  The text to be displayed on a button in the web UI.\n  "
    label::String
end
function CheckRunAction(; description, identifier, label)
    CheckRunAction(description, identifier, label)
end

"""
Autogenerated input type of MarkFileAsViewed
"""
mutable struct MarkFileAsViewedInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The path of the file to mark as viewed\n  "
    path::String
    "\n  The Node ID of the pull request.\n  "
    pullRequestId::String
end
function MarkFileAsViewedInput(; clientMutationId = nothing, path, pullRequestId)
    MarkFileAsViewedInput(clientMutationId, path, pullRequestId)
end

"""
Ordering options for enterprise member connections.
"""
mutable struct EnterpriseMemberOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order enterprise members by.\n  "
    field::EnterpriseMemberOrderField.T
end
function EnterpriseMemberOrder(; direction, field)
    EnterpriseMemberOrder(direction, field)
end

"""
Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
"""
mutable struct UpdateEnterpriseMembersCanCreateRepositoriesSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the members can create repositories setting.\n  "
    enterpriseId::String
    "\n  Allow members to create internal repositories. Defaults to current value.\n  "
    membersCanCreateInternalRepositories::Union{Bool, Missing, Nothing}
    "\n  Allow members to create private repositories. Defaults to current value.\n  "
    membersCanCreatePrivateRepositories::Union{Bool, Missing, Nothing}
    "\n  Allow members to create public repositories. Defaults to current value.\n  "
    membersCanCreatePublicRepositories::Union{Bool, Missing, Nothing}
    "\n  When false, allow member organizations to set their own repository creation member privileges.\n  "
    membersCanCreateRepositoriesPolicyEnabled::Union{Bool, Missing, Nothing}
    "\n  Value for the members can create repositories setting on the enterprise. This\n  or the granular public/private/internal allowed fields (but not both) must be provided.\n  "
    settingValue::Union{EnterpriseMembersCanCreateRepositoriesSettingValue.T, Missing, Nothing}
end
function UpdateEnterpriseMembersCanCreateRepositoriesSettingInput(; clientMutationId = nothing, enterpriseId, membersCanCreateInternalRepositories = nothing, membersCanCreatePrivateRepositories = nothing, membersCanCreatePublicRepositories = nothing, membersCanCreateRepositoriesPolicyEnabled = nothing, settingValue = nothing)
    UpdateEnterpriseMembersCanCreateRepositoriesSettingInput(clientMutationId, enterpriseId, membersCanCreateInternalRepositories, membersCanCreatePrivateRepositories, membersCanCreatePublicRepositories, membersCanCreateRepositoriesPolicyEnabled, settingValue)
end

"""
Autogenerated input type of DeleteIssueComment
"""
mutable struct DeleteIssueCommentInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the comment to delete.\n  "
    id::String
end
function DeleteIssueCommentInput(; clientMutationId = nothing, id)
    DeleteIssueCommentInput(clientMutationId, id)
end

"""
Represents a Git blob.
"""
mutable struct Blob <: OfficialGithubSchema
    "\n  An abbreviated version of the Git object ID\n  "
    abbreviatedOid::String
    "\n  Byte size of Blob object\n  "
    byteSize::Int
    "\n  The HTTP path for this Git object\n  "
    commitResourcePath::URI
    "\n  The HTTP URL for this Git object\n  "
    commitUrl::URI
    id::String
    "\n  Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.\n  "
    isBinary::Union{Bool, Missing, Nothing}
    "\n  Indicates whether the contents is truncated\n  "
    isTruncated::Bool
    "\n  The Git object ID\n  "
    oid::GitObjectID
    "\n  The Repository the Git object belongs to\n  "
    repository::Repository
    "\n  UTF8 text data or null if the Blob is binary\n  "
    text::Union{String, Missing, Nothing}
end
function Blob(; abbreviatedOid, byteSize, commitResourcePath, commitUrl, id, isBinary = nothing, isTruncated, oid, repository, text = nothing)
    Blob(abbreviatedOid, byteSize, commitResourcePath, commitUrl, id, isBinary, isTruncated, oid, repository, text)
end

"""
Ways in which lists of workflow runs can be ordered upon return.
"""
mutable struct WorkflowRunOrder <: OfficialGithubSchema
    "\n  The direction in which to order workflow runs by the specified field.\n  "
    direction::OrderDirection.T
    "\n  The field by which to order workflows.\n  "
    field::WorkflowRunOrderField.T
end
function WorkflowRunOrder(; direction, field)
    WorkflowRunOrder(direction, field)
end

"""
Autogenerated input type of AddVerifiableDomain
"""
mutable struct AddVerifiableDomainInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The URL of the domain\n  "
    domain::URI
    "\n  The ID of the owner to add the domain to\n  "
    ownerId::String
end
function AddVerifiableDomainInput(; clientMutationId = nothing, domain, ownerId)
    AddVerifiableDomainInput(clientMutationId, domain, ownerId)
end

"""
Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
"""
mutable struct UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the allow private repository forking setting.\n  "
    enterpriseId::String
    "\n  The value for the allow private repository forking policy on the enterprise.\n  "
    policyValue::Union{EnterpriseAllowPrivateRepositoryForkingPolicyValue.T, Missing, Nothing}
    "\n  The value for the allow private repository forking setting on the enterprise.\n  "
    settingValue::EnterpriseEnabledDisabledSettingValue.T
end
function UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput(; clientMutationId = nothing, enterpriseId, policyValue = nothing, settingValue)
    UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput(clientMutationId, enterpriseId, policyValue, settingValue)
end

"""
Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
"""
mutable struct UpdateOrganizationAllowPrivateRepositoryForkingSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Enable forking of private repositories in the organization?\n  "
    forkingEnabled::Bool
    "\n  The ID of the organization on which to set the allow private repository forking setting.\n  "
    organizationId::String
end
function UpdateOrganizationAllowPrivateRepositoryForkingSettingInput(; clientMutationId = nothing, forkingEnabled, organizationId)
    UpdateOrganizationAllowPrivateRepositoryForkingSettingInput(clientMutationId, forkingEnabled, organizationId)
end

"""
Ordering options for team member connections
"""
mutable struct TeamMemberOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order team members by.\n  "
    field::TeamMemberOrderField.T
end
function TeamMemberOrder(; direction, field)
    TeamMemberOrder(direction, field)
end

"""
Ways in which lists of package versions can be ordered upon return.
"""
mutable struct PackageVersionOrder <: OfficialGithubSchema
    "\n  The direction in which to order package versions by the specified field.\n  "
    direction::Union{OrderDirection.T, Missing, Nothing}
    "\n  The field in which to order package versions by.\n  "
    field::Union{PackageVersionOrderField.T, Missing, Nothing}
end
function PackageVersionOrder(; direction = nothing, field = nothing)
    PackageVersionOrder(direction, field)
end

"""
Autogenerated input type of UnarchiveProjectV2Item
"""
mutable struct UnarchiveProjectV2ItemInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the ProjectV2Item to unarchive.\n  "
    itemId::String
    "\n  The ID of the Project to archive the item from.\n  "
    projectId::String
end
function UnarchiveProjectV2ItemInput(; clientMutationId = nothing, itemId, projectId)
    UnarchiveProjectV2ItemInput(clientMutationId, itemId, projectId)
end

"""
The connection type for SponsorableItem.
"""
mutable struct SponsorableItemConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{SponsorableItemEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{SponsorableItem, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function SponsorableItemConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    SponsorableItemConnection(edges, nodes, pageInfo, totalCount)
end

"""
Autogenerated input type of DisablePullRequestAutoMerge
"""
mutable struct DisablePullRequestAutoMergeInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the pull request to disable auto merge on.\n  "
    pullRequestId::String
end
function DisablePullRequestAutoMergeInput(; clientMutationId = nothing, pullRequestId)
    DisablePullRequestAutoMergeInput(clientMutationId, pullRequestId)
end

"""
Autogenerated input type of DeleteDiscussionComment
"""
mutable struct DeleteDiscussionCommentInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node id of the discussion comment to delete.\n  "
    id::String
end
function DeleteDiscussionCommentInput(; clientMutationId = nothing, id)
    DeleteDiscussionCommentInput(clientMutationId, id)
end

"""
Ordering options for Enterprise Server user account email connections.
"""
mutable struct EnterpriseServerUserAccountEmailOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order emails by.\n  "
    field::EnterpriseServerUserAccountEmailOrderField.T
end
function EnterpriseServerUserAccountEmailOrder(; direction, field)
    EnterpriseServerUserAccountEmailOrder(direction, field)
end

"""
A hovercard context with a message describing how the viewer is related.
"""
mutable struct ViewerHovercardContext <: OfficialGithubSchema
    "\n  A string describing this context\n  "
    message::String
    "\n  An octicon to accompany this context\n  "
    octicon::String
    "\n  Identifies the user who is related to this context.\n  "
    viewer::User
end
function ViewerHovercardContext(; message, octicon, viewer)
    ViewerHovercardContext(message, octicon, viewer)
end

"""
Autogenerated input type of CreateDeployment
"""
mutable struct CreateDeploymentInput <: OfficialGithubSchema
    "\n  Attempt to automatically merge the default branch into the requested ref, defaults to true.\n  "
    autoMerge::Union{Bool, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Short description of the deployment.\n  "
    description::Union{String, Missing, Nothing}
    "\n  Name for the target deployment environment.\n  "
    environment::Union{String, Missing, Nothing}
    "\n  JSON payload with extra information about the deployment.\n  "
    payload::Union{String, Missing, Nothing}
    "\n  The node ID of the ref to be deployed.\n  "
    refId::String
    "\n  The node ID of the repository.\n  "
    repositoryId::String
    "\n  The status contexts to verify against commit status checks. To bypass required\n  contexts, pass an empty array. Defaults to all unique contexts.\n  "
    requiredContexts::Union{Vector{String}, Missing, Nothing}
    "\n  Specifies a task to execute.\n  "
    task::Union{String, Missing, Nothing}
end
function CreateDeploymentInput(; autoMerge = true, clientMutationId = nothing, description = "", environment = "production", payload = "{}", refId, repositoryId, requiredContexts = nothing, task = "deploy")
    CreateDeploymentInput(autoMerge, clientMutationId, description, environment, payload, refId, repositoryId, requiredContexts, task)
end

"""
Ways in which to filter lists of projects.
"""
mutable struct ProjectV2Filters <: OfficialGithubSchema
    "\n  List project v2 filtered by the state given.\n  "
    state::Union{ProjectV2State.T, Missing, Nothing}
end
function ProjectV2Filters(; state = nothing)
    ProjectV2Filters(state)
end

"""
Autogenerated input type of RemoveLabelsFromLabelable
"""
mutable struct RemoveLabelsFromLabelableInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ids of labels to remove.\n  "
    labelIds::Vector{String}
    "\n  The id of the Labelable to remove labels from.\n  "
    labelableId::String
end
function RemoveLabelsFromLabelableInput(; clientMutationId = nothing, labelIds, labelableId)
    RemoveLabelsFromLabelableInput(clientMutationId, labelIds, labelableId)
end

"""
Autogenerated input type of InviteEnterpriseAdmin
"""
mutable struct InviteEnterpriseAdminInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The email of the person to invite as an administrator.\n  "
    email::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise to which you want to invite an administrator.\n  "
    enterpriseId::String
    "\n  The login of a user to invite as an administrator.\n  "
    invitee::Union{String, Missing, Nothing}
    "\n  The role of the administrator.\n  "
    role::Union{EnterpriseAdministratorRole.T, Missing, Nothing}
end
function InviteEnterpriseAdminInput(; clientMutationId = nothing, email = nothing, enterpriseId, invitee = nothing, role = nothing)
    InviteEnterpriseAdminInput(clientMutationId, email, enterpriseId, invitee, role)
end

"""
Autogenerated input type of DismissPullRequestReview
"""
mutable struct DismissPullRequestReviewInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The contents of the pull request review dismissal message.\n  "
    message::String
    "\n  The Node ID of the pull request review to modify.\n  "
    pullRequestReviewId::String
end
function DismissPullRequestReviewInput(; clientMutationId = nothing, message, pullRequestReviewId)
    DismissPullRequestReviewInput(clientMutationId, message, pullRequestReviewId)
end

"""
Autogenerated input type of RemoveAssigneesFromAssignable
"""
mutable struct RemoveAssigneesFromAssignableInput <: OfficialGithubSchema
    "\n  The id of the assignable object to remove assignees from.\n  "
    assignableId::String
    "\n  The id of users to remove as assignees.\n  "
    assigneeIds::Vector{String}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function RemoveAssigneesFromAssignableInput(; assignableId, assigneeIds, clientMutationId = nothing)
    RemoveAssigneesFromAssignableInput(assignableId, assigneeIds, clientMutationId)
end

"""
Ways in which lists of discussions can be ordered upon return.
"""
mutable struct DiscussionOrder <: OfficialGithubSchema
    "\n  The direction in which to order discussions by the specified field.\n  "
    direction::OrderDirection.T
    "\n  The field by which to order discussions.\n  "
    field::DiscussionOrderField.T
end
function DiscussionOrder(; direction, field)
    DiscussionOrder(direction, field)
end

"""
Autogenerated input type of ClearLabelsFromLabelable
"""
mutable struct ClearLabelsFromLabelableInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The id of the labelable object to clear the labels from.\n  "
    labelableId::String
end
function ClearLabelsFromLabelableInput(; clientMutationId = nothing, labelableId)
    ClearLabelsFromLabelableInput(clientMutationId, labelableId)
end

"""
Autogenerated input type of CreateIpAllowListEntry
"""
mutable struct CreateIpAllowListEntryInput <: OfficialGithubSchema
    "\n  An IP address or range of addresses in CIDR notation.\n  "
    allowListValue::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Whether the IP allow list entry is active when an IP allow list is enabled.\n  "
    isActive::Bool
    "\n  An optional name for the IP allow list entry.\n  "
    name::Union{String, Missing, Nothing}
    "\n  The ID of the owner for which to create the new IP allow list entry.\n  "
    ownerId::String
end
function CreateIpAllowListEntryInput(; allowListValue, clientMutationId = nothing, isActive, name = nothing, ownerId)
    CreateIpAllowListEntryInput(allowListValue, clientMutationId, isActive, name, ownerId)
end

"""
Ordering options for security vulnerability connections
"""
mutable struct SecurityVulnerabilityOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order security vulnerabilities by.\n  "
    field::SecurityVulnerabilityOrderField.T
end
function SecurityVulnerabilityOrder(; direction, field)
    SecurityVulnerabilityOrder(direction, field)
end

"""
Autogenerated input type of UpdateProjectColumn
"""
mutable struct UpdateProjectColumnInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The name of project column.\n  "
    name::String
    "\n  The ProjectColumn ID to update.\n  "
    projectColumnId::String
end
function UpdateProjectColumnInput(; clientMutationId = nothing, name, projectColumnId)
    UpdateProjectColumnInput(clientMutationId, name, projectColumnId)
end

"""
Autogenerated input type of SetOrganizationInteractionLimit
"""
mutable struct SetOrganizationInteractionLimitInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  When this limit should expire.\n  "
    expiry::Union{RepositoryInteractionLimitExpiry.T, Missing, Nothing}
    "\n  The limit to set.\n  "
    limit::RepositoryInteractionLimit.T
    "\n  The ID of the organization to set a limit for.\n  "
    organizationId::String
end
function SetOrganizationInteractionLimitInput(; clientMutationId = nothing, expiry = nothing, limit, organizationId)
    SetOrganizationInteractionLimitInput(clientMutationId, expiry, limit, organizationId)
end

"""
Autogenerated input type of MinimizeComment
"""
mutable struct MinimizeCommentInput <: OfficialGithubSchema
    "\n  The classification of comment\n  "
    classifier::ReportedContentClassifiers.T
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the subject to modify.\n  "
    subjectId::String
end
function MinimizeCommentInput(; classifier, clientMutationId = nothing, subjectId)
    MinimizeCommentInput(classifier, clientMutationId, subjectId)
end

"""
Autogenerated input type of UpdateProjectV2
"""
mutable struct UpdateProjectV2Input <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Set the project to closed or open.\n  "
    closed::Union{Bool, Missing, Nothing}
    "\n  The ID of the Project to update.\n  "
    projectId::String
    "\n  Set the project to public or private.\n  "
    public::Union{Bool, Missing, Nothing}
    "\n  Set the readme description of the project.\n  "
    readme::Union{String, Missing, Nothing}
    "\n  Set the short description of the project.\n  "
    shortDescription::Union{String, Missing, Nothing}
    "\n  Set the title of the project.\n  "
    title::Union{String, Missing, Nothing}
end
function UpdateProjectV2Input(; clientMutationId = nothing, closed = nothing, projectId, public = nothing, readme = nothing, shortDescription = nothing, title = nothing)
    UpdateProjectV2Input(clientMutationId, closed, projectId, public, readme, shortDescription, title)
end

"""
Autogenerated input type of UpdateTeamsRepository
"""
mutable struct UpdateTeamsRepositoryInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Permission that should be granted to the teams.\n  "
    permission::RepositoryPermission.T
    "\n  Repository ID being granted access to.\n  "
    repositoryId::String
    "\n  A list of teams being granted access. Limit: 10\n  "
    teamIds::Vector{String}
end
function UpdateTeamsRepositoryInput(; clientMutationId = nothing, permission, repositoryId, teamIds)
    UpdateTeamsRepositoryInput(clientMutationId, permission, repositoryId, teamIds)
end

"""
Autogenerated input type of ClosePullRequest
"""
mutable struct ClosePullRequestInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the pull request to be closed.\n  "
    pullRequestId::String
end
function ClosePullRequestInput(; clientMutationId = nothing, pullRequestId)
    ClosePullRequestInput(clientMutationId, pullRequestId)
end

"""
Ordering options for project v2 view connections
"""
mutable struct ProjectV2ViewOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order the project v2 views by.\n  "
    field::ProjectV2ViewOrderField.T
end
function ProjectV2ViewOrder(; direction, field)
    ProjectV2ViewOrder(direction, field)
end

"""
Autogenerated input type of ArchiveRepository
"""
mutable struct ArchiveRepositoryInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the repository to mark as archived.\n  "
    repositoryId::String
end
function ArchiveRepositoryInput(; clientMutationId = nothing, repositoryId)
    ArchiveRepositoryInput(clientMutationId, repositoryId)
end

"""
Autogenerated input type of ArchiveProjectV2Item
"""
mutable struct ArchiveProjectV2ItemInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the ProjectV2Item to archive.\n  "
    itemId::String
    "\n  The ID of the Project to archive the item from.\n  "
    projectId::String
end
function ArchiveProjectV2ItemInput(; clientMutationId = nothing, itemId, projectId)
    ArchiveProjectV2ItemInput(clientMutationId, itemId, projectId)
end

"""
Autogenerated input type of CreateLinkedBranch
"""
mutable struct CreateLinkedBranchInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the issue to link to.\n  "
    issueId::String
    "\n  The name of the new branch. Defaults to issue number and title.\n  "
    name::Union{String, Missing, Nothing}
    "\n  The commit SHA to base the new branch on.\n  "
    oid::GitObjectID
    "\n  ID of the repository to create the branch in. Defaults to the issue repository.\n  "
    repositoryId::Union{String, Missing, Nothing}
end
function CreateLinkedBranchInput(; clientMutationId = nothing, issueId, name = nothing, oid, repositoryId = nothing)
    CreateLinkedBranchInput(clientMutationId, issueId, name, oid, repositoryId)
end

"""
Ordering options for sponsorship connections.
"""
mutable struct SponsorshipOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order sponsorship by.\n  "
    field::SponsorshipOrderField.T
end
function SponsorshipOrder(; direction, field)
    SponsorshipOrder(direction, field)
end

"""
Autogenerated input type of RemoveEnterpriseSupportEntitlement
"""
mutable struct RemoveEnterpriseSupportEntitlementInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the Enterprise which the admin belongs to.\n  "
    enterpriseId::String
    "\n  The login of a member who will lose the support entitlement.\n  "
    login::String
end
function RemoveEnterpriseSupportEntitlementInput(; clientMutationId = nothing, enterpriseId, login)
    RemoveEnterpriseSupportEntitlementInput(clientMutationId, enterpriseId, login)
end

"""
Ordering options for repository connections
"""
mutable struct RepositoryOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order repositories by.\n  "
    field::RepositoryOrderField.T
end
function RepositoryOrder(; direction, field)
    RepositoryOrder(direction, field)
end

"""
Autogenerated input type of LinkProjectV2ToTeam
"""
mutable struct LinkProjectV2ToTeamInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the project to link to the team.\n  "
    projectId::String
    "\n  The ID of the team to link to the project.\n  "
    teamId::String
end
function LinkProjectV2ToTeamInput(; clientMutationId = nothing, projectId, teamId)
    LinkProjectV2ToTeamInput(clientMutationId, projectId, teamId)
end

"""
Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
"""
mutable struct RegenerateEnterpriseIdentityProviderRecoveryCodesInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set an identity provider.\n  "
    enterpriseId::String
end
function RegenerateEnterpriseIdentityProviderRecoveryCodesInput(; clientMutationId = nothing, enterpriseId)
    RegenerateEnterpriseIdentityProviderRecoveryCodesInput(clientMutationId, enterpriseId)
end

"""
Autogenerated input type of MergeBranch
"""
mutable struct MergeBranchInput <: OfficialGithubSchema
    "\n  The email address to associate with this commit.\n  "
    authorEmail::Union{String, Missing, Nothing}
    "\n  The name of the base branch that the provided head will be merged into.\n  "
    base::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Message to use for the merge commit. If omitted, a default will be used.\n  "
    commitMessage::Union{String, Missing, Nothing}
    "\n  The head to merge into the base branch. This can be a branch name or a commit GitObjectID.\n  "
    head::String
    "\n  The Node ID of the Repository containing the base branch that will be modified.\n  "
    repositoryId::String
end
function MergeBranchInput(; authorEmail = nothing, base, clientMutationId = nothing, commitMessage = nothing, head, repositoryId)
    MergeBranchInput(authorEmail, base, clientMutationId, commitMessage, head, repositoryId)
end

"""
Autogenerated input type of UpdateCheckRun
"""
mutable struct UpdateCheckRunInput <: OfficialGithubSchema
    "\n  Possible further actions the integrator can perform, which a user may trigger.\n  "
    actions::Union{Vector{CheckRunAction}, Missing, Nothing}
    "\n  The node of the check.\n  "
    checkRunId::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The time that the check run finished.\n  "
    completedAt::Union{DateTime, Missing, Nothing}
    "\n  The final conclusion of the check.\n  "
    conclusion::Union{CheckConclusionState.T, Missing, Nothing}
    "\n  The URL of the integrator's site that has the full details of the check.\n  "
    detailsUrl::Union{URI, Missing, Nothing}
    "\n  A reference for the run on the integrator's system.\n  "
    externalId::Union{String, Missing, Nothing}
    "\n  The name of the check.\n  "
    name::Union{String, Missing, Nothing}
    "\n  Descriptive details about the run.\n  "
    output::Union{CheckRunOutput, Missing, Nothing}
    "\n  The node ID of the repository.\n  "
    repositoryId::String
    "\n  The time that the check run began.\n  "
    startedAt::Union{DateTime, Missing, Nothing}
    "\n  The current status.\n  "
    status::Union{RequestableCheckStatusState.T, Missing, Nothing}
end
function UpdateCheckRunInput(; actions = nothing, checkRunId, clientMutationId = nothing, completedAt = nothing, conclusion = nothing, detailsUrl = nothing, externalId = nothing, name = nothing, output = nothing, repositoryId, startedAt = nothing, status = nothing)
    UpdateCheckRunInput(actions, checkRunId, clientMutationId, completedAt, conclusion, detailsUrl, externalId, name, output, repositoryId, startedAt, status)
end

"""
Ordering options for repository migrations.
"""
mutable struct RepositoryMigrationOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::RepositoryMigrationOrderDirection.T
    "\n  The field to order repository migrations by.\n  "
    field::RepositoryMigrationOrderField.T
end
function RepositoryMigrationOrder(; direction, field)
    RepositoryMigrationOrder(direction, field)
end

"""
Autogenerated input type of AddProjectV2ItemById
"""
mutable struct AddProjectV2ItemByIdInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The id of the Issue or Pull Request to add.\n  "
    contentId::String
    "\n  The ID of the Project to add the item to.\n  "
    projectId::String
end
function AddProjectV2ItemByIdInput(; clientMutationId = nothing, contentId, projectId)
    AddProjectV2ItemByIdInput(clientMutationId, contentId, projectId)
end

"""
Autogenerated input type of AddPullRequestReviewThread
"""
mutable struct AddPullRequestReviewThreadInput <: OfficialGithubSchema
    "\n  Body of the thread's first comment.\n  "
    body::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The line of the blob to which the thread refers. The end of the line range for multi-line comments.\n  "
    line::Int
    "\n  Path to the file being commented on.\n  "
    path::String
    "\n  The node ID of the pull request reviewing\n  "
    pullRequestId::Union{String, Missing, Nothing}
    "\n  The Node ID of the review to modify.\n  "
    pullRequestReviewId::Union{String, Missing, Nothing}
    "\n  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.\n  "
    side::Union{DiffSide.T, Missing, Nothing}
    "\n  The first line of the range to which the comment refers.\n  "
    startLine::Union{Int, Missing, Nothing}
    "\n  The side of the diff on which the start line resides.\n  "
    startSide::Union{DiffSide.T, Missing, Nothing}
end
function AddPullRequestReviewThreadInput(; body, clientMutationId = nothing, line, path, pullRequestId = nothing, pullRequestReviewId = nothing, side = RIGHT, startLine = nothing, startSide = RIGHT)
    AddPullRequestReviewThreadInput(body, clientMutationId, line, path, pullRequestId, pullRequestReviewId, side, startLine, startSide)
end

"""
Specifies an author for filtering Git commits.
"""
mutable struct CommitAuthor <: OfficialGithubSchema
    "\n  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.\n  "
    emails::Union{Vector{String}, Missing, Nothing}
    "\n  ID of a User to filter by. If non-null, only commits authored by this user\n  will be returned. This field takes precedence over emails.\n  "
    id::Union{String, Missing, Nothing}
end
function CommitAuthor(; emails = nothing, id = nothing)
    CommitAuthor(emails, id)
end

"""
Autogenerated input type of CreateTeamDiscussion
"""
mutable struct CreateTeamDiscussionInput <: OfficialGithubSchema
    "\n  The content of the discussion.\n  "
    body::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  If true, restricts the visibility of this discussion to team members and\n  organization admins. If false or not specified, allows any organization member\n  to view this discussion.\n  "
    private::Union{Bool, Missing, Nothing}
    "\n  The ID of the team to which the discussion belongs.\n  "
    teamId::String
    "\n  The title of the discussion.\n  "
    title::String
end
function CreateTeamDiscussionInput(; body, clientMutationId = nothing, private = nothing, teamId, title)
    CreateTeamDiscussionInput(body, clientMutationId, private, teamId, title)
end

"""
Autogenerated input type of UpdateProjectNext
"""
mutable struct UpdateProjectNextInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Set the project to closed or open.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `closed` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    closed::Union{Bool, Missing, Nothing}
    "\n  Set the readme description of the project.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `description` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    description::Union{String, Missing, Nothing}
    "\n  The ID of the Project to update. This field is required.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    projectId::Union{String, Missing, Nothing}
    "\n  Set the project to public or private.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `public` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    public::Union{Bool, Missing, Nothing}
    "\n  Set the short description of the project.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `shortDescription` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    shortDescription::Union{String, Missing, Nothing}
    "\n  Set the title of the project.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `title` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    title::Union{String, Missing, Nothing}
end
function UpdateProjectNextInput(; clientMutationId = nothing, closed = nothing, description = nothing, projectId = nothing, public = nothing, shortDescription = nothing, title = nothing)
    UpdateProjectNextInput(clientMutationId, closed, description, projectId, public, shortDescription, title)
end

"""
Autogenerated input type of SubmitPullRequestReview
"""
mutable struct SubmitPullRequestReviewInput <: OfficialGithubSchema
    "\n  The text field to set on the Pull Request Review.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The event to send to the Pull Request Review.\n  "
    event::PullRequestReviewEvent.T
    "\n  The Pull Request ID to submit any pending reviews.\n  "
    pullRequestId::Union{String, Missing, Nothing}
    "\n  The Pull Request Review ID to submit.\n  "
    pullRequestReviewId::Union{String, Missing, Nothing}
end
function SubmitPullRequestReviewInput(; body = nothing, clientMutationId = nothing, event, pullRequestId = nothing, pullRequestReviewId = nothing)
    SubmitPullRequestReviewInput(body, clientMutationId, event, pullRequestId, pullRequestReviewId)
end

"""
Autogenerated input type of AddReaction
"""
mutable struct AddReactionInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The name of the emoji to react with.\n  "
    content::ReactionContent.T
    "\n  The Node ID of the subject to modify.\n  "
    subjectId::String
end
function AddReactionInput(; clientMutationId = nothing, content, subjectId)
    AddReactionInput(clientMutationId, content, subjectId)
end

"""
Autogenerated input type of DeleteIpAllowListEntry
"""
mutable struct DeleteIpAllowListEntryInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the IP allow list entry to delete.\n  "
    ipAllowListEntryId::String
end
function DeleteIpAllowListEntryInput(; clientMutationId = nothing, ipAllowListEntryId)
    DeleteIpAllowListEntryInput(clientMutationId, ipAllowListEntryId)
end

"""
Autogenerated input type of UpdateProjectV2ItemFieldValue
"""
mutable struct UpdateProjectV2ItemFieldValueInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the field to be updated.\n  "
    fieldId::String
    "\n  The ID of the item to be updated.\n  "
    itemId::String
    "\n  The ID of the Project.\n  "
    projectId::String
    "\n  The value which will be set on the field.\n  "
    value::ProjectV2FieldValue
end
function UpdateProjectV2ItemFieldValueInput(; clientMutationId = nothing, fieldId, itemId, projectId, value)
    UpdateProjectV2ItemFieldValueInput(clientMutationId, fieldId, itemId, projectId, value)
end

"""
Ways in which lists of reactions can be ordered upon return.
"""
mutable struct ReactionOrder <: OfficialGithubSchema
    "\n  The direction in which to order reactions by the specified field.\n  "
    direction::OrderDirection.T
    "\n  The field in which to order reactions by.\n  "
    field::ReactionOrderField.T
end
function ReactionOrder(; direction, field)
    ReactionOrder(direction, field)
end

"""
Autogenerated input type of UpdateTopics
"""
mutable struct UpdateTopicsInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the repository.\n  "
    repositoryId::String
    "\n  An array of topic names.\n  "
    topicNames::Vector{String}
end
function UpdateTopicsInput(; clientMutationId = nothing, repositoryId, topicNames)
    UpdateTopicsInput(clientMutationId, repositoryId, topicNames)
end

"""
Autogenerated input type of UpdateLabel
"""
mutable struct UpdateLabelInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A 6 character hex code, without the leading #, identifying the updated color of the label.\n  "
    color::Union{String, Missing, Nothing}
    "\n  A brief description of the label, such as its purpose.\n  "
    description::Union{String, Missing, Nothing}
    "\n  The Node ID of the label to be updated.\n  "
    id::String
    "\n  The updated name of the label.\n  "
    name::Union{String, Missing, Nothing}
end
function UpdateLabelInput(; clientMutationId = nothing, color = nothing, description = nothing, id, name = nothing)
    UpdateLabelInput(clientMutationId, color, description, id, name)
end

"""
The connection type for SecurityAdvisory.
"""
mutable struct SecurityAdvisoryConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{SecurityAdvisoryEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{SecurityAdvisory, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function SecurityAdvisoryConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    SecurityAdvisoryConnection(edges, nodes, pageInfo, totalCount)
end

"""
Autogenerated input type of AddLabelsToLabelable
"""
mutable struct AddLabelsToLabelableInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ids of the labels to add.\n  "
    labelIds::Vector{String}
    "\n  The id of the labelable object to add labels to.\n  "
    labelableId::String
end
function AddLabelsToLabelableInput(; clientMutationId = nothing, labelIds, labelableId)
    AddLabelsToLabelableInput(clientMutationId, labelIds, labelableId)
end

"""
A generic hovercard context with a message and icon
"""
mutable struct GenericHovercardContext <: OfficialGithubSchema
    "\n  A string describing this context\n  "
    message::String
    "\n  An octicon to accompany this context\n  "
    octicon::String
end
function GenericHovercardContext(; message, octicon)
    GenericHovercardContext(message, octicon)
end

"""
Autogenerated input type of UpdateProjectV2ItemPosition
"""
mutable struct UpdateProjectV2ItemPositionInput <: OfficialGithubSchema
    "\n  The ID of the item to position this item after. If omitted or set to null the item will be moved to top.\n  "
    afterId::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the item to be moved.\n  "
    itemId::String
    "\n  The ID of the Project.\n  "
    projectId::String
end
function UpdateProjectV2ItemPositionInput(; afterId = nothing, clientMutationId = nothing, itemId, projectId)
    UpdateProjectV2ItemPositionInput(afterId, clientMutationId, itemId, projectId)
end

"""
Autogenerated input type of DeleteProjectColumn
"""
mutable struct DeleteProjectColumnInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The id of the column to delete.\n  "
    columnId::String
end
function DeleteProjectColumnInput(; clientMutationId = nothing, columnId)
    DeleteProjectColumnInput(clientMutationId, columnId)
end

"""
Autogenerated input type of DeletePullRequestReviewComment
"""
mutable struct DeletePullRequestReviewCommentInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the comment to delete.\n  "
    id::String
end
function DeletePullRequestReviewCommentInput(; clientMutationId = nothing, id)
    DeletePullRequestReviewCommentInput(clientMutationId, id)
end

"""
Autogenerated input type of UpdateDiscussion
"""
mutable struct UpdateDiscussionInput <: OfficialGithubSchema
    "\n  The new contents of the discussion body.\n  "
    body::Union{String, Missing, Nothing}
    "\n  The Node ID of a discussion category within the same repository to change this discussion to.\n  "
    categoryId::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the discussion to update.\n  "
    discussionId::String
    "\n  The new discussion title.\n  "
    title::Union{String, Missing, Nothing}
end
function UpdateDiscussionInput(; body = nothing, categoryId = nothing, clientMutationId = nothing, discussionId, title = nothing)
    UpdateDiscussionInput(body, categoryId, clientMutationId, discussionId, title)
end

"""
Autogenerated input type of AddUpvote
"""
mutable struct AddUpvoteInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the discussion or comment to upvote.\n  "
    subjectId::String
end
function AddUpvoteInput(; clientMutationId = nothing, subjectId)
    AddUpvoteInput(clientMutationId, subjectId)
end

"""
Autogenerated input type of UpdateCheckSuitePreferences
"""
mutable struct UpdateCheckSuitePreferencesInput <: OfficialGithubSchema
    "\n  The check suite preferences to modify.\n  "
    autoTriggerPreferences::Vector{CheckSuiteAutoTriggerPreference}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the repository.\n  "
    repositoryId::String
end
function UpdateCheckSuitePreferencesInput(; autoTriggerPreferences, clientMutationId = nothing, repositoryId)
    UpdateCheckSuitePreferencesInput(autoTriggerPreferences, clientMutationId, repositoryId)
end

"""
Autogenerated input type of DeleteProjectNextItem
"""
mutable struct DeleteProjectNextItemInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the item to be removed. This field is required.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `itemId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    itemId::Union{String, Missing, Nothing}
    "\n  The ID of the Project from which the item should be removed. This field is required.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    projectId::Union{String, Missing, Nothing}
end
function DeleteProjectNextItemInput(; clientMutationId = nothing, itemId = nothing, projectId = nothing)
    DeleteProjectNextItemInput(clientMutationId, itemId, projectId)
end

"""
Autogenerated input type of CreateLabel
"""
mutable struct CreateLabelInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A 6 character hex code, without the leading #, identifying the color of the label.\n  "
    color::String
    "\n  A brief description of the label, such as its purpose.\n  "
    description::Union{String, Missing, Nothing}
    "\n  The name of the label.\n  "
    name::String
    "\n  The Node ID of the repository.\n  "
    repositoryId::String
end
function CreateLabelInput(; clientMutationId = nothing, color, description = nothing, name, repositoryId)
    CreateLabelInput(clientMutationId, color, description, name, repositoryId)
end

"""
Ordering options for organization connections.
"""
mutable struct OrganizationOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order organizations by.\n  "
    field::OrganizationOrderField.T
end
function OrganizationOrder(; direction, field)
    OrganizationOrder(direction, field)
end

"""
Autogenerated input type of UpdateBranchProtectionRule
"""
mutable struct UpdateBranchProtectionRuleInput <: OfficialGithubSchema
    "\n  Can this branch be deleted.\n  "
    allowsDeletions::Union{Bool, Missing, Nothing}
    "\n  Are force pushes allowed on this branch.\n  "
    allowsForcePushes::Union{Bool, Missing, Nothing}
    "\n  Is branch creation a protected operation.\n  "
    blocksCreations::Union{Bool, Missing, Nothing}
    "\n  The global relay id of the branch protection rule to be updated.\n  "
    branchProtectionRuleId::String
    "\n  A list of User, Team, or App IDs allowed to bypass force push targeting matching branches.\n  "
    bypassForcePushActorIds::Union{Vector{String}, Missing, Nothing}
    "\n  A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches.\n  "
    bypassPullRequestActorIds::Union{Vector{String}, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Will new commits pushed to matching branches dismiss pull request review approvals.\n  "
    dismissesStaleReviews::Union{Bool, Missing, Nothing}
    "\n  Can admins overwrite branch protection.\n  "
    isAdminEnforced::Union{Bool, Missing, Nothing}
    "\n  Whether users can pull changes from upstream when the branch is locked. Set to\n  `true` to allow fork syncing. Set to `false` to prevent fork syncing.\n  "
    lockAllowsFetchAndMerge::Union{Bool, Missing, Nothing}
    "\n  Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.\n  "
    lockBranch::Union{Bool, Missing, Nothing}
    "\n  The glob-like pattern used to determine matching branches.\n  "
    pattern::Union{String, Missing, Nothing}
    "\n  A list of User, Team, or App IDs allowed to push to matching branches.\n  "
    pushActorIds::Union{Vector{String}, Missing, Nothing}
    "\n  Whether the most recent push must be approved by someone other than the person who pushed it\n  "
    requireLastPushApproval::Union{Bool, Missing, Nothing}
    "\n  Number of approving reviews required to update matching branches.\n  "
    requiredApprovingReviewCount::Union{Int, Missing, Nothing}
    "\n  List of required status check contexts that must pass for commits to be accepted to matching branches.\n  "
    requiredStatusCheckContexts::Union{Vector{String}, Missing, Nothing}
    "\n  The list of required status checks\n  "
    requiredStatusChecks::Union{Vector{RequiredStatusCheckInput}, Missing, Nothing}
    "\n  Are approving reviews required to update matching branches.\n  "
    requiresApprovingReviews::Union{Bool, Missing, Nothing}
    "\n  Are reviews from code owners required to update matching branches.\n  "
    requiresCodeOwnerReviews::Union{Bool, Missing, Nothing}
    "\n  Are commits required to be signed.\n  "
    requiresCommitSignatures::Union{Bool, Missing, Nothing}
    "\n  Are conversations required to be resolved before merging.\n  "
    requiresConversationResolution::Union{Bool, Missing, Nothing}
    "\n  Are merge commits prohibited from being pushed to this branch.\n  "
    requiresLinearHistory::Union{Bool, Missing, Nothing}
    "\n  Are status checks required to update matching branches.\n  "
    requiresStatusChecks::Union{Bool, Missing, Nothing}
    "\n  Are branches required to be up to date before merging.\n  "
    requiresStrictStatusChecks::Union{Bool, Missing, Nothing}
    "\n  Is pushing to matching branches restricted.\n  "
    restrictsPushes::Union{Bool, Missing, Nothing}
    "\n  Is dismissal of pull request reviews restricted.\n  "
    restrictsReviewDismissals::Union{Bool, Missing, Nothing}
    "\n  A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches.\n  "
    reviewDismissalActorIds::Union{Vector{String}, Missing, Nothing}
end
function UpdateBranchProtectionRuleInput(; allowsDeletions = nothing, allowsForcePushes = nothing, blocksCreations = nothing, branchProtectionRuleId, bypassForcePushActorIds = nothing, bypassPullRequestActorIds = nothing, clientMutationId = nothing, dismissesStaleReviews = nothing, isAdminEnforced = nothing, lockAllowsFetchAndMerge = nothing, lockBranch = nothing, pattern = nothing, pushActorIds = nothing, requireLastPushApproval = nothing, requiredApprovingReviewCount = nothing, requiredStatusCheckContexts = nothing, requiredStatusChecks = nothing, requiresApprovingReviews = nothing, requiresCodeOwnerReviews = nothing, requiresCommitSignatures = nothing, requiresConversationResolution = nothing, requiresLinearHistory = nothing, requiresStatusChecks = nothing, requiresStrictStatusChecks = nothing, restrictsPushes = nothing, restrictsReviewDismissals = nothing, reviewDismissalActorIds = nothing)
    UpdateBranchProtectionRuleInput(allowsDeletions, allowsForcePushes, blocksCreations, branchProtectionRuleId, bypassForcePushActorIds, bypassPullRequestActorIds, clientMutationId, dismissesStaleReviews, isAdminEnforced, lockAllowsFetchAndMerge, lockBranch, pattern, pushActorIds, requireLastPushApproval, requiredApprovingReviewCount, requiredStatusCheckContexts, requiredStatusChecks, requiresApprovingReviews, requiresCodeOwnerReviews, requiresCommitSignatures, requiresConversationResolution, requiresLinearHistory, requiresStatusChecks, requiresStrictStatusChecks, restrictsPushes, restrictsReviewDismissals, reviewDismissalActorIds)
end

"""
Autogenerated input type of CreateProjectV2
"""
mutable struct CreateProjectV2Input <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The owner ID to create the project under.\n  "
    ownerId::String
    "\n  The repository to link the project to.\n  "
    repositoryId::Union{String, Missing, Nothing}
    "\n  The team to link the project to. The team will be granted read permissions.\n  "
    teamId::Union{String, Missing, Nothing}
    "\n  The title of the project.\n  "
    title::String
end
function CreateProjectV2Input(; clientMutationId = nothing, ownerId, repositoryId = nothing, teamId = nothing, title)
    CreateProjectV2Input(clientMutationId, ownerId, repositoryId, teamId, title)
end

"""
Autogenerated input type of RejectDeployments
"""
mutable struct RejectDeploymentsInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Optional comment for rejecting deployments\n  "
    comment::Union{String, Missing, Nothing}
    "\n  The ids of environments to reject deployments\n  "
    environmentIds::Vector{String}
    "\n  The node ID of the workflow run containing the pending deployments.\n  "
    workflowRunId::String
end
function RejectDeploymentsInput(; clientMutationId = nothing, comment = "", environmentIds, workflowRunId)
    RejectDeploymentsInput(clientMutationId, comment, environmentIds, workflowRunId)
end

"""
Autogenerated input type of RemoveEnterpriseOrganization
"""
mutable struct RemoveEnterpriseOrganizationInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise from which the organization should be removed.\n  "
    enterpriseId::String
    "\n  The ID of the organization to remove from the enterprise.\n  "
    organizationId::String
end
function RemoveEnterpriseOrganizationInput(; clientMutationId = nothing, enterpriseId, organizationId)
    RemoveEnterpriseOrganizationInput(clientMutationId, enterpriseId, organizationId)
end

"""
Autogenerated input type of TransferIssue
"""
mutable struct TransferIssueInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Whether to create labels if they don't exist in the target repository (matched by name)\n  "
    createLabelsIfMissing::Union{Bool, Missing, Nothing}
    "\n  The Node ID of the issue to be transferred\n  "
    issueId::String
    "\n  The Node ID of the repository the issue should be transferred to\n  "
    repositoryId::String
end
function TransferIssueInput(; clientMutationId = nothing, createLabelsIfMissing = false, issueId, repositoryId)
    TransferIssueInput(clientMutationId, createLabelsIfMissing, issueId, repositoryId)
end

"""
Represents an S/MIME signature on a Commit or Tag.
"""
mutable struct SmimeSignature <: OfficialGithubSchema
    "\n  Email used to sign this object.\n  "
    email::String
    "\n  True if the signature is valid and verified by GitHub.\n  "
    isValid::Bool
    "\n  Payload for GPG signing object. Raw ODB object without the signature header.\n  "
    payload::String
    "\n  ASCII-armored signature header from object.\n  "
    signature::String
    "\n  GitHub user corresponding to the email signing this commit.\n  "
    signer::Union{User, Missing, Nothing}
    "\n  The state of this signature. `VALID` if signature is valid and verified by\n  GitHub, otherwise represents reason why signature is considered invalid.\n  "
    state::GitSignatureState.T
    "\n  True if the signature was made with GitHub's signing key.\n  "
    wasSignedByGitHub::Bool
end
function SmimeSignature(; email, isValid, payload, signature, signer = nothing, state, wasSignedByGitHub)
    SmimeSignature(email, isValid, payload, signature, signer, state, wasSignedByGitHub)
end

"""
Ordering options for gist connections
"""
mutable struct GistOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order repositories by.\n  "
    field::GistOrderField.T
end
function GistOrder(; direction, field)
    GistOrder(direction, field)
end

"""
Autogenerated input type of DeleteVerifiableDomain
"""
mutable struct DeleteVerifiableDomainInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the verifiable domain to delete.\n  "
    id::String
end
function DeleteVerifiableDomainInput(; clientMutationId = nothing, id)
    DeleteVerifiableDomainInput(clientMutationId, id)
end

"""
Ways in which lists of projects can be ordered upon return.
"""
mutable struct ProjectOrder <: OfficialGithubSchema
    "\n  The direction in which to order projects by the specified field.\n  "
    direction::OrderDirection.T
    "\n  The field in which to order projects by.\n  "
    field::ProjectOrderField.T
end
function ProjectOrder(; direction, field)
    ProjectOrder(direction, field)
end

"""
Ordering options for GitHub Sponsors activity connections.
"""
mutable struct SponsorsActivityOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order activity by.\n  "
    field::SponsorsActivityOrderField.T
end
function SponsorsActivityOrder(; direction, field)
    SponsorsActivityOrder(direction, field)
end

"""
Autogenerated input type of CreateRepository
"""
mutable struct CreateRepositoryInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A short description of the new repository.\n  "
    description::Union{String, Missing, Nothing}
    "\n  Indicates if the repository should have the issues feature enabled.\n  "
    hasIssuesEnabled::Union{Bool, Missing, Nothing}
    "\n  Indicates if the repository should have the wiki feature enabled.\n  "
    hasWikiEnabled::Union{Bool, Missing, Nothing}
    "\n  The URL for a web page about this repository.\n  "
    homepageUrl::Union{URI, Missing, Nothing}
    "\n  The name of the new repository.\n  "
    name::String
    "\n  The ID of the owner for the new repository.\n  "
    ownerId::Union{String, Missing, Nothing}
    "\n  When an organization is specified as the owner, this ID identifies the team\n  that should be granted access to the new repository.\n  "
    teamId::Union{String, Missing, Nothing}
    "\n  Whether this repository should be marked as a template such that anyone who\n  can access it can create new repositories with the same files and directory structure.\n  "
    template::Union{Bool, Missing, Nothing}
    "\n  Indicates the repository's visibility level.\n  "
    visibility::RepositoryVisibility.T
end
function CreateRepositoryInput(; clientMutationId = nothing, description = nothing, hasIssuesEnabled = true, hasWikiEnabled = false, homepageUrl = nothing, name, ownerId = nothing, teamId = nothing, template = false, visibility)
    CreateRepositoryInput(clientMutationId, description, hasIssuesEnabled, hasWikiEnabled, homepageUrl, name, ownerId, teamId, template, visibility)
end

"""
Autogenerated input type of AddProjectDraftIssue
"""
mutable struct AddProjectDraftIssueInput <: OfficialGithubSchema
    "\n  The IDs of the assignees of the draft issue.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `assigneeIds` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    assigneeIds::Union{Vector{String}, Missing, Nothing}
    "\n  The body of the draft issue.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `body` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the Project to add the draft issue to. This field is required.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `projectId` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    projectId::Union{String, Missing, Nothing}
    "\n  The title of the draft issue. This field is required.\n\n  **Upcoming Change on 2023-01-01 UTC**\n  **Description:** `title` will be removed. Follow the ProjectV2 guide at https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/,\n  to find a suitable replacement.\n  **Reason:** The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API.\n  "
    title::Union{String, Missing, Nothing}
end
function AddProjectDraftIssueInput(; assigneeIds = nothing, body = nothing, clientMutationId = nothing, projectId = nothing, title = nothing)
    AddProjectDraftIssueInput(assigneeIds, body, clientMutationId, projectId, title)
end

"""
Ordering options for verifiable domain connections.
"""
mutable struct VerifiableDomainOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order verifiable domains by.\n  "
    field::VerifiableDomainOrderField.T
end
function VerifiableDomainOrder(; direction, field)
    VerifiableDomainOrder(direction, field)
end

"""
Autogenerated input type of UpdateRepository
"""
mutable struct UpdateRepositoryInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A new description for the repository. Pass an empty string to erase the existing description.\n  "
    description::Union{String, Missing, Nothing}
    "\n  Indicates if the repository should have the discussions feature enabled.\n  "
    hasDiscussionsEnabled::Union{Bool, Missing, Nothing}
    "\n  Indicates if the repository should have the issues feature enabled.\n  "
    hasIssuesEnabled::Union{Bool, Missing, Nothing}
    "\n  Indicates if the repository should have the project boards feature enabled.\n  "
    hasProjectsEnabled::Union{Bool, Missing, Nothing}
    "\n  Indicates if the repository should have the wiki feature enabled.\n  "
    hasWikiEnabled::Union{Bool, Missing, Nothing}
    "\n  The URL for a web page about this repository. Pass an empty string to erase the existing URL.\n  "
    homepageUrl::Union{URI, Missing, Nothing}
    "\n  The new name of the repository.\n  "
    name::Union{String, Missing, Nothing}
    "\n  The ID of the repository to update.\n  "
    repositoryId::String
    "\n  Whether this repository should be marked as a template such that anyone who\n  can access it can create new repositories with the same files and directory structure.\n  "
    template::Union{Bool, Missing, Nothing}
end
function UpdateRepositoryInput(; clientMutationId = nothing, description = nothing, hasDiscussionsEnabled = nothing, hasIssuesEnabled = nothing, hasProjectsEnabled = nothing, hasWikiEnabled = nothing, homepageUrl = nothing, name = nothing, repositoryId, template = nothing)
    UpdateRepositoryInput(clientMutationId, description, hasDiscussionsEnabled, hasIssuesEnabled, hasProjectsEnabled, hasWikiEnabled, homepageUrl, name, repositoryId, template)
end

"""
Autogenerated input type of CreateSponsorship
"""
mutable struct CreateSponsorshipInput <: OfficialGithubSchema
    "\n  The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000.\n  "
    amount::Union{Int, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified.\n  "
    isRecurring::Union{Bool, Missing, Nothing}
    "\n  Specify whether others should be able to see that the sponsor is sponsoring\n  the sponsorable. Public visibility still does not reveal which tier is used.\n  "
    privacyLevel::Union{SponsorshipPrivacy.T, Missing, Nothing}
    "\n  Whether the sponsor should receive email updates from the sponsorable.\n  "
    receiveEmails::Union{Bool, Missing, Nothing}
    "\n  The ID of the user or organization who is acting as the sponsor, paying for\n  the sponsorship. Required if sponsorLogin is not given.\n  "
    sponsorId::Union{String, Missing, Nothing}
    "\n  The username of the user or organization who is acting as the sponsor, paying\n  for the sponsorship. Required if sponsorId is not given.\n  "
    sponsorLogin::Union{String, Missing, Nothing}
    "\n  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.\n  "
    sponsorableId::Union{String, Missing, Nothing}
    "\n  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.\n  "
    sponsorableLogin::Union{String, Missing, Nothing}
    "\n  The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified.\n  "
    tierId::Union{String, Missing, Nothing}
end
function CreateSponsorshipInput(; amount = nothing, clientMutationId = nothing, isRecurring = nothing, privacyLevel = PUBLIC, receiveEmails = true, sponsorId = nothing, sponsorLogin = nothing, sponsorableId = nothing, sponsorableLogin = nothing, tierId = nothing)
    CreateSponsorshipInput(amount, clientMutationId, isRecurring, privacyLevel, receiveEmails, sponsorId, sponsorLogin, sponsorableId, sponsorableLogin, tierId)
end

"""
Autogenerated input type of CreateCheckRun
"""
mutable struct CreateCheckRunInput <: OfficialGithubSchema
    "\n  Possible further actions the integrator can perform, which a user may trigger.\n  "
    actions::Union{Vector{CheckRunAction}, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The time that the check run finished.\n  "
    completedAt::Union{DateTime, Missing, Nothing}
    "\n  The final conclusion of the check.\n  "
    conclusion::Union{CheckConclusionState.T, Missing, Nothing}
    "\n  The URL of the integrator's site that has the full details of the check.\n  "
    detailsUrl::Union{URI, Missing, Nothing}
    "\n  A reference for the run on the integrator's system.\n  "
    externalId::Union{String, Missing, Nothing}
    "\n  The SHA of the head commit.\n  "
    headSha::GitObjectID
    "\n  The name of the check.\n  "
    name::String
    "\n  Descriptive details about the run.\n  "
    output::Union{CheckRunOutput, Missing, Nothing}
    "\n  The node ID of the repository.\n  "
    repositoryId::String
    "\n  The time that the check run began.\n  "
    startedAt::Union{DateTime, Missing, Nothing}
    "\n  The current status.\n  "
    status::Union{RequestableCheckStatusState.T, Missing, Nothing}
end
function CreateCheckRunInput(; actions = nothing, clientMutationId = nothing, completedAt = nothing, conclusion = nothing, detailsUrl = nothing, externalId = nothing, headSha, name, output = nothing, repositoryId, startedAt = nothing, status = nothing)
    CreateCheckRunInput(actions, clientMutationId, completedAt, conclusion, detailsUrl, externalId, headSha, name, output, repositoryId, startedAt, status)
end

"""
Autogenerated input type of UpdateEnterpriseProfile
"""
mutable struct UpdateEnterpriseProfileInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The description of the enterprise.\n  "
    description::Union{String, Missing, Nothing}
    "\n  The Enterprise ID to update.\n  "
    enterpriseId::String
    "\n  The location of the enterprise.\n  "
    location::Union{String, Missing, Nothing}
    "\n  The name of the enterprise.\n  "
    name::Union{String, Missing, Nothing}
    "\n  The URL of the enterprise's website.\n  "
    websiteUrl::Union{String, Missing, Nothing}
end
function UpdateEnterpriseProfileInput(; clientMutationId = nothing, description = nothing, enterpriseId, location = nothing, name = nothing, websiteUrl = nothing)
    UpdateEnterpriseProfileInput(clientMutationId, description, enterpriseId, location, name, websiteUrl)
end

"""
Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
"""
mutable struct UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the two factor authentication required setting.\n  "
    enterpriseId::String
    "\n  The value for the two factor authentication required setting on the enterprise.\n  "
    settingValue::EnterpriseEnabledSettingValue.T
end
function UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput(; clientMutationId = nothing, enterpriseId, settingValue)
    UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput(clientMutationId, enterpriseId, settingValue)
end

"""
Ways in which lists of issues can be ordered upon return.
"""
mutable struct IssueOrder <: OfficialGithubSchema
    "\n  The direction in which to order issues by the specified field.\n  "
    direction::OrderDirection.T
    "\n  The field in which to order issues by.\n  "
    field::IssueOrderField.T
end
function IssueOrder(; direction, field)
    IssueOrder(direction, field)
end

"""
Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
"""
mutable struct UpdateEnterpriseMembersCanMakePurchasesSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the members can make purchases setting.\n  "
    enterpriseId::String
    "\n  The value for the members can make purchases setting on the enterprise.\n  "
    settingValue::EnterpriseMembersCanMakePurchasesSettingValue.T
end
function UpdateEnterpriseMembersCanMakePurchasesSettingInput(; clientMutationId = nothing, enterpriseId, settingValue)
    UpdateEnterpriseMembersCanMakePurchasesSettingInput(clientMutationId, enterpriseId, settingValue)
end

"""
Autogenerated input type of AddAssigneesToAssignable
"""
mutable struct AddAssigneesToAssignableInput <: OfficialGithubSchema
    "\n  The id of the assignable object to add assignees to.\n  "
    assignableId::String
    "\n  The id of users to add as assignees.\n  "
    assigneeIds::Vector{String}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
end
function AddAssigneesToAssignableInput(; assignableId, assigneeIds, clientMutationId = nothing)
    AddAssigneesToAssignableInput(assignableId, assigneeIds, clientMutationId)
end

"""
Autogenerated input type of AcceptEnterpriseAdministratorInvitation
"""
mutable struct AcceptEnterpriseAdministratorInvitationInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The id of the invitation being accepted\n  "
    invitationId::String
end
function AcceptEnterpriseAdministratorInvitationInput(; clientMutationId = nothing, invitationId)
    AcceptEnterpriseAdministratorInvitationInput(clientMutationId, invitationId)
end

"""
Autogenerated input type of UpdateIssueComment
"""
mutable struct UpdateIssueCommentInput <: OfficialGithubSchema
    "\n  The updated text of the comment.\n  "
    body::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the IssueComment to modify.\n  "
    id::String
end
function UpdateIssueCommentInput(; body, clientMutationId = nothing, id)
    UpdateIssueCommentInput(body, clientMutationId, id)
end

"""
Autogenerated input type of UpdateTeamDiscussionComment
"""
mutable struct UpdateTeamDiscussionCommentInput <: OfficialGithubSchema
    "\n  The updated text of the comment.\n  "
    body::String
    "\n  The current version of the body content.\n  "
    bodyVersion::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the comment to modify.\n  "
    id::String
end
function UpdateTeamDiscussionCommentInput(; body, bodyVersion = nothing, clientMutationId = nothing, id)
    UpdateTeamDiscussionCommentInput(body, bodyVersion, clientMutationId, id)
end

"""
Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole
"""
mutable struct UpdateEnterpriseOwnerOrganizationRoleInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the Enterprise which the owner belongs to.\n  "
    enterpriseId::String
    "\n  The ID of the organization for membership change.\n  "
    organizationId::String
    "\n  The role to assume in the organization.\n  "
    organizationRole::RoleInOrganization.T
end
function UpdateEnterpriseOwnerOrganizationRoleInput(; clientMutationId = nothing, enterpriseId, organizationId, organizationRole)
    UpdateEnterpriseOwnerOrganizationRoleInput(clientMutationId, enterpriseId, organizationId, organizationRole)
end

"""
Ordering options for discussion poll option connections.
"""
mutable struct DiscussionPollOptionOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order poll options by.\n  "
    field::DiscussionPollOptionOrderField.T
end
function DiscussionPollOptionOrder(; direction, field)
    DiscussionPollOptionOrder(direction, field)
end

"""
Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
"""
mutable struct UpdateEnterpriseMembersCanDeleteIssuesSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the members can delete issues setting.\n  "
    enterpriseId::String
    "\n  The value for the members can delete issues setting on the enterprise.\n  "
    settingValue::EnterpriseEnabledDisabledSettingValue.T
end
function UpdateEnterpriseMembersCanDeleteIssuesSettingInput(; clientMutationId = nothing, enterpriseId, settingValue)
    UpdateEnterpriseMembersCanDeleteIssuesSettingInput(clientMutationId, enterpriseId, settingValue)
end

"""
A version tag contains the mapping between a tag name and a version.
"""
mutable struct PackageTag <: OfficialGithubSchema
    id::String
    "\n  Identifies the tag name of the version.\n  "
    name::String
    "\n  Version that the tag is associated with.\n  "
    version::Union{PackageVersion, Missing, Nothing}
end
function PackageTag(; id, name, version = nothing)
    PackageTag(id, name, version)
end

"""
Autogenerated input type of FollowUser
"""
mutable struct FollowUserInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the user to follow.\n  "
    userId::String
end
function FollowUserInput(; clientMutationId = nothing, userId)
    FollowUserInput(clientMutationId, userId)
end

"""
Represents the client's rate limit.
"""
mutable struct RateLimit <: OfficialGithubSchema
    "\n  The point cost for the current query counting against the rate limit.\n  "
    cost::Int
    "\n  The maximum number of points the client is permitted to consume in a 60 minute window.\n  "
    limit::Int
    "\n  The maximum number of nodes this query may return\n  "
    nodeCount::Int
    "\n  The number of points remaining in the current rate limit window.\n  "
    remaining::Int
    "\n  The time at which the current rate limit window resets in UTC epoch seconds.\n  "
    resetAt::DateTime
    "\n  The number of points used in the current rate limit window.\n  "
    used::Int
end
function RateLimit(; cost, limit, nodeCount, remaining, resetAt, used)
    RateLimit(cost, limit, nodeCount, remaining, resetAt, used)
end

"""
Ordering options for security advisory connections
"""
mutable struct SecurityAdvisoryOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order security advisories by.\n  "
    field::SecurityAdvisoryOrderField.T
end
function SecurityAdvisoryOrder(; direction, field)
    SecurityAdvisoryOrder(direction, field)
end

"""
Autogenerated input type of UpdateSponsorshipPreferences
"""
mutable struct UpdateSponsorshipPreferencesInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Specify whether others should be able to see that the sponsor is sponsoring\n  the sponsorable. Public visibility still does not reveal which tier is used.\n  "
    privacyLevel::Union{SponsorshipPrivacy.T, Missing, Nothing}
    "\n  Whether the sponsor should receive email updates from the sponsorable.\n  "
    receiveEmails::Union{Bool, Missing, Nothing}
    "\n  The ID of the user or organization who is acting as the sponsor, paying for\n  the sponsorship. Required if sponsorLogin is not given.\n  "
    sponsorId::Union{String, Missing, Nothing}
    "\n  The username of the user or organization who is acting as the sponsor, paying\n  for the sponsorship. Required if sponsorId is not given.\n  "
    sponsorLogin::Union{String, Missing, Nothing}
    "\n  The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given.\n  "
    sponsorableId::Union{String, Missing, Nothing}
    "\n  The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given.\n  "
    sponsorableLogin::Union{String, Missing, Nothing}
end
function UpdateSponsorshipPreferencesInput(; clientMutationId = nothing, privacyLevel = PUBLIC, receiveEmails = true, sponsorId = nothing, sponsorLogin = nothing, sponsorableId = nothing, sponsorableLogin = nothing)
    UpdateSponsorshipPreferencesInput(clientMutationId, privacyLevel, receiveEmails, sponsorId, sponsorLogin, sponsorableId, sponsorableLogin)
end

"""
Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole
"""
mutable struct GrantEnterpriseOrganizationsMigratorRoleInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise to which all organizations managed by it will be granted the migrator role.\n  "
    enterpriseId::String
    "\n  The login of the user to grant the migrator role\n  "
    login::String
end
function GrantEnterpriseOrganizationsMigratorRoleInput(; clientMutationId = nothing, enterpriseId, login)
    GrantEnterpriseOrganizationsMigratorRoleInput(clientMutationId, enterpriseId, login)
end

"""
Autogenerated input type of AddProjectColumn
"""
mutable struct AddProjectColumnInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The name of the column.\n  "
    name::String
    "\n  The Node ID of the project.\n  "
    projectId::String
end
function AddProjectColumnInput(; clientMutationId = nothing, name, projectId)
    AddProjectColumnInput(clientMutationId, name, projectId)
end

"""
Autogenerated input type of MarkPullRequestReadyForReview
"""
mutable struct MarkPullRequestReadyForReviewInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the pull request to be marked as ready for review.\n  "
    pullRequestId::String
end
function MarkPullRequestReadyForReviewInput(; clientMutationId = nothing, pullRequestId)
    MarkPullRequestReadyForReviewInput(clientMutationId, pullRequestId)
end

"""
Autogenerated input type of CreateSponsorsTier
"""
mutable struct CreateSponsorsTierInput <: OfficialGithubSchema
    "\n  The value of the new tier in US dollars. Valid values: 1-12000.\n  "
    amount::Int
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc.\n  "
    description::String
    "\n  Whether sponsorships using this tier should happen monthly/yearly or just once.\n  "
    isRecurring::Union{Bool, Missing, Nothing}
    "\n  Whether to make the tier available immediately for sponsors to choose.\n  Defaults to creating a draft tier that will not be publicly visible.\n  "
    publish::Union{Bool, Missing, Nothing}
    "\n  Optional ID of the private repository that sponsors at this tier should gain\n  read-only access to. Must be owned by an organization.\n  "
    repositoryId::Union{String, Missing, Nothing}
    "\n  Optional name of the private repository that sponsors at this tier should gain\n  read-only access to. Must be owned by an organization. Necessary if\n  repositoryOwnerLogin is given. Will be ignored if repositoryId is given.\n  "
    repositoryName::Union{String, Missing, Nothing}
    "\n  Optional login of the organization owner of the private repository that\n  sponsors at this tier should gain read-only access to. Necessary if\n  repositoryName is given. Will be ignored if repositoryId is given.\n  "
    repositoryOwnerLogin::Union{String, Missing, Nothing}
    "\n  The ID of the user or organization who owns the GitHub Sponsors profile.\n  Defaults to the current user if omitted and sponsorableLogin is not given.\n  "
    sponsorableId::Union{String, Missing, Nothing}
    "\n  The username of the user or organization who owns the GitHub Sponsors profile.\n  Defaults to the current user if omitted and sponsorableId is not given.\n  "
    sponsorableLogin::Union{String, Missing, Nothing}
    "\n  Optional message new sponsors at this tier will receive.\n  "
    welcomeMessage::Union{String, Missing, Nothing}
end
function CreateSponsorsTierInput(; amount, clientMutationId = nothing, description, isRecurring = true, publish = false, repositoryId = nothing, repositoryName = nothing, repositoryOwnerLogin = nothing, sponsorableId = nothing, sponsorableLogin = nothing, welcomeMessage = nothing)
    CreateSponsorsTierInput(amount, clientMutationId, description, isRecurring, publish, repositoryId, repositoryName, repositoryOwnerLogin, sponsorableId, sponsorableLogin, welcomeMessage)
end

"""
Autogenerated input type of SetEnterpriseIdentityProvider
"""
mutable struct SetEnterpriseIdentityProviderInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The digest algorithm used to sign SAML requests for the identity provider.\n  "
    digestMethod::SamlDigestAlgorithm.T
    "\n  The ID of the enterprise on which to set an identity provider.\n  "
    enterpriseId::String
    "\n  The x509 certificate used by the identity provider to sign assertions and responses.\n  "
    idpCertificate::String
    "\n  The Issuer Entity ID for the SAML identity provider\n  "
    issuer::Union{String, Missing, Nothing}
    "\n  The signature algorithm used to sign SAML requests for the identity provider.\n  "
    signatureMethod::SamlSignatureAlgorithm.T
    "\n  The URL endpoint for the identity provider's SAML SSO.\n  "
    ssoUrl::URI
end
function SetEnterpriseIdentityProviderInput(; clientMutationId = nothing, digestMethod, enterpriseId, idpCertificate, issuer = nothing, signatureMethod, ssoUrl)
    SetEnterpriseIdentityProviderInput(clientMutationId, digestMethod, enterpriseId, idpCertificate, issuer, signatureMethod, ssoUrl)
end

"""
Autogenerated input type of UpdateIpAllowListEntry
"""
mutable struct UpdateIpAllowListEntryInput <: OfficialGithubSchema
    "\n  An IP address or range of addresses in CIDR notation.\n  "
    allowListValue::String
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the IP allow list entry to update.\n  "
    ipAllowListEntryId::String
    "\n  Whether the IP allow list entry is active when an IP allow list is enabled.\n  "
    isActive::Bool
    "\n  An optional name for the IP allow list entry.\n  "
    name::Union{String, Missing, Nothing}
end
function UpdateIpAllowListEntryInput(; allowListValue, clientMutationId = nothing, ipAllowListEntryId, isActive, name = nothing)
    UpdateIpAllowListEntryInput(allowListValue, clientMutationId, ipAllowListEntryId, isActive, name)
end

"""
Autogenerated input type of RevokeMigratorRole
"""
mutable struct RevokeMigratorRoleInput <: OfficialGithubSchema
    "\n  The user login or Team slug to revoke the migrator role from.\n  "
    actor::String
    "\n  Specifies the type of the actor, can be either USER or TEAM.\n  "
    actorType::ActorType.T
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the organization that the user/team belongs to.\n  "
    organizationId::String
end
function RevokeMigratorRoleInput(; actor, actorType, clientMutationId = nothing, organizationId)
    RevokeMigratorRoleInput(actor, actorType, clientMutationId, organizationId)
end

"""
Autogenerated input type of LockLockable
"""
mutable struct LockLockableInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  A reason for why the item will be locked.\n  "
    lockReason::Union{LockReason.T, Missing, Nothing}
    "\n  ID of the item to be locked.\n  "
    lockableId::String
end
function LockLockableInput(; clientMutationId = nothing, lockReason = nothing, lockableId)
    LockLockableInput(clientMutationId, lockReason, lockableId)
end

Core.@doc "Used for argument of CreateProjectV2 mutation." const OrganizationOrUser = Union{Organization, User}

"""
Autogenerated input type of UpdateProjectDraftIssue
"""
mutable struct UpdateProjectDraftIssueInput <: OfficialGithubSchema
    "\n  The IDs of the assignees of the draft issue.\n  "
    assigneeIds::Union{Vector{String}, Missing, Nothing}
    "\n  The body of the draft issue.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the draft issue to update.\n  "
    draftIssueId::String
    "\n  The title of the draft issue.\n  "
    title::Union{String, Missing, Nothing}
end
function UpdateProjectDraftIssueInput(; assigneeIds = nothing, body = nothing, clientMutationId = nothing, draftIssueId, title = nothing)
    UpdateProjectDraftIssueInput(assigneeIds, body, clientMutationId, draftIssueId, title)
end

"""
Autogenerated input type of RemoveEnterpriseAdmin
"""
mutable struct RemoveEnterpriseAdminInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Enterprise ID from which to remove the administrator.\n  "
    enterpriseId::String
    "\n  The login of the user to remove as an administrator.\n  "
    login::String
end
function RemoveEnterpriseAdminInput(; clientMutationId = nothing, enterpriseId, login)
    RemoveEnterpriseAdminInput(clientMutationId, enterpriseId, login)
end

"""
Look up Marketplace Listings
"""
mutable struct MarketplaceListingConnection <: OfficialGithubSchema
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{MarketplaceListingEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{MarketplaceListing, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  Identifies the total count of items in the connection.\n  "
    totalCount::Int
end
function MarketplaceListingConnection(; edges = nothing, nodes = nothing, pageInfo, totalCount)
    MarketplaceListingConnection(edges, nodes, pageInfo, totalCount)
end

"""
Autogenerated input type of ConvertPullRequestToDraft
"""
mutable struct ConvertPullRequestToDraftInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the pull request to convert to draft\n  "
    pullRequestId::String
end
function ConvertPullRequestToDraftInput(; clientMutationId = nothing, pullRequestId)
    ConvertPullRequestToDraftInput(clientMutationId, pullRequestId)
end

"""
A list of results that matched against a search query. Regardless of the number
of matches, a maximum of 1,000 results will be available across all types,
potentially split across many pages.
"""
mutable struct SearchResultItemConnection <: OfficialGithubSchema
    "\n  The total number of pieces of code that matched the search query. Regardless\n  of the total number of matches, a maximum of 1,000 results will be available\n  across all types.\n  "
    codeCount::Int
    "\n  The total number of discussions that matched the search query. Regardless of\n  the total number of matches, a maximum of 1,000 results will be available\n  across all types.\n  "
    discussionCount::Int
    "\n  A list of edges.\n  "
    edges::Union{Vector{Union{SearchResultItemEdge, Missing, Nothing}}, Missing, Nothing}
    "\n  The total number of issues that matched the search query. Regardless of the\n  total number of matches, a maximum of 1,000 results will be available across all types.\n  "
    issueCount::Int
    "\n  A list of nodes.\n  "
    nodes::Union{Vector{Union{SearchResultItem, Missing, Nothing}}, Missing, Nothing}
    "\n  Information to aid in pagination.\n  "
    pageInfo::PageInfo
    "\n  The total number of repositories that matched the search query. Regardless of\n  the total number of matches, a maximum of 1,000 results will be available\n  across all types.\n  "
    repositoryCount::Int
    "\n  The total number of users that matched the search query. Regardless of the\n  total number of matches, a maximum of 1,000 results will be available across all types.\n  "
    userCount::Int
    "\n  The total number of wiki pages that matched the search query. Regardless of\n  the total number of matches, a maximum of 1,000 results will be available\n  across all types.\n  "
    wikiCount::Int
end
function SearchResultItemConnection(; codeCount, discussionCount, edges = nothing, issueCount, nodes = nothing, pageInfo, repositoryCount, userCount, wikiCount)
    SearchResultItemConnection(codeCount, discussionCount, edges, issueCount, nodes, pageInfo, repositoryCount, userCount, wikiCount)
end

"""
Autogenerated input type of UpdateProjectCard
"""
mutable struct UpdateProjectCardInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Whether or not the ProjectCard should be archived\n  "
    isArchived::Union{Bool, Missing, Nothing}
    "\n  The note of ProjectCard.\n  "
    note::Union{String, Missing, Nothing}
    "\n  The ProjectCard ID to update.\n  "
    projectCardId::String
end
function UpdateProjectCardInput(; clientMutationId = nothing, isArchived = nothing, note = nothing, projectCardId)
    UpdateProjectCardInput(clientMutationId, isArchived, note, projectCardId)
end

"""
The query root of GitHub's GraphQL interface.
"""
mutable struct Query <: OfficialGithubSchema
    "\n  Look up a code of conduct by its key\n  "
    codeOfConduct::Union{CodeOfConduct, Missing, Nothing}
    "\n  Look up a code of conduct by its key\n  "
    codesOfConduct::Union{Vector{Union{CodeOfConduct, Missing, Nothing}}, Missing, Nothing}
    "\n  Look up an enterprise by URL slug.\n  "
    enterprise::Union{Enterprise, Missing, Nothing}
    "\n  Look up a pending enterprise administrator invitation by invitee, enterprise and role.\n  "
    enterpriseAdministratorInvitation::Union{EnterpriseAdministratorInvitation, Missing, Nothing}
    "\n  Look up a pending enterprise administrator invitation by invitation token.\n  "
    enterpriseAdministratorInvitationByToken::Union{EnterpriseAdministratorInvitation, Missing, Nothing}
    "\n  Look up an open source license by its key\n  "
    license::Union{License, Missing, Nothing}
    "\n  Return a list of known open source licenses\n  "
    licenses::Vector{Union{License, Missing, Nothing}}
    "\n  Get alphabetically sorted list of Marketplace categories\n  "
    marketplaceCategories::Vector{MarketplaceCategory}
    "\n  Look up a Marketplace category by its slug.\n  "
    marketplaceCategory::Union{MarketplaceCategory, Missing, Nothing}
    "\n  Look up a single Marketplace listing\n  "
    marketplaceListing::Union{MarketplaceListing, Missing, Nothing}
    "\n  Look up Marketplace listings\n  "
    marketplaceListings::MarketplaceListingConnection
    "\n  Return information about the GitHub instance\n  "
    meta::GitHubMetadata
    "\n  Fetches an object given its ID.\n  "
    node::Union{Node, Missing, Nothing}
    "\n  Lookup nodes by a list of IDs.\n  "
    nodes::Vector{Union{Node, Missing, Nothing}}
    "\n  Lookup a organization by login.\n  "
    organization::Union{Organization, Missing, Nothing}
    "\n  The client's rate limit information.\n  "
    rateLimit::Union{RateLimit, Missing, Nothing}
    "\n  Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object\n  "
    relay::Query
    "\n  Lookup a given repository by the owner and repository name.\n  "
    repository::Union{Repository, Missing, Nothing}
    "\n  Lookup a repository owner (ie. either a User or an Organization) by login.\n  "
    repositoryOwner::Union{RepositoryOwner, Missing, Nothing}
    "\n  Lookup resource by a URL.\n  "
    resource::Union{UniformResourceLocatable, Missing, Nothing}
    "\n  Perform a search across resources, returning a maximum of 1,000 results.\n  "
    search::SearchResultItemConnection
    "\n  GitHub Security Advisories\n  "
    securityAdvisories::SecurityAdvisoryConnection
    "\n  Fetch a Security Advisory by its GHSA ID\n  "
    securityAdvisory::Union{SecurityAdvisory, Missing, Nothing}
    "\n  Software Vulnerabilities documented by GitHub Security Advisories\n  "
    securityVulnerabilities::SecurityVulnerabilityConnection
    "\n  Users and organizations who can be sponsored via GitHub Sponsors.\n  "
    sponsorables::SponsorableItemConnection
    "\n  Look up a topic by name.\n  "
    topic::Union{Topic, Missing, Nothing}
    "\n  Lookup a user by login.\n  "
    user::Union{User, Missing, Nothing}
    "\n  The currently authenticated user.\n  "
    viewer::User
end
function Query(; codeOfConduct = nothing, codesOfConduct = nothing, enterprise = nothing, enterpriseAdministratorInvitation = nothing, enterpriseAdministratorInvitationByToken = nothing, license = nothing, licenses, marketplaceCategories, marketplaceCategory = nothing, marketplaceListing = nothing, marketplaceListings, meta, node = nothing, nodes, organization = nothing, rateLimit = nothing, relay, repository = nothing, repositoryOwner = nothing, resource = nothing, search, securityAdvisories, securityAdvisory = nothing, securityVulnerabilities, sponsorables, topic = nothing, user = nothing, viewer)
    Query(codeOfConduct, codesOfConduct, enterprise, enterpriseAdministratorInvitation, enterpriseAdministratorInvitationByToken, license, licenses, marketplaceCategories, marketplaceCategory, marketplaceListing, marketplaceListings, meta, node, nodes, organization, rateLimit, relay, repository, repositoryOwner, resource, search, securityAdvisories, securityAdvisory, securityVulnerabilities, sponsorables, topic, user, viewer)
end

"""
Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting
"""
mutable struct UpdateIpAllowListForInstalledAppsEnabledSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the owner.\n  "
    ownerId::String
    "\n  The value for the IP allow list configuration for installed GitHub Apps setting.\n  "
    settingValue::IpAllowListForInstalledAppsEnabledSettingValue.T
end
function UpdateIpAllowListForInstalledAppsEnabledSettingInput(; clientMutationId = nothing, ownerId, settingValue)
    UpdateIpAllowListForInstalledAppsEnabledSettingInput(clientMutationId, ownerId, settingValue)
end

"""
Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
"""
mutable struct UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the members can invite collaborators setting.\n  "
    enterpriseId::String
    "\n  The value for the members can invite collaborators setting on the enterprise.\n  "
    settingValue::EnterpriseEnabledDisabledSettingValue.T
end
function UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput(; clientMutationId = nothing, enterpriseId, settingValue)
    UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput(clientMutationId, enterpriseId, settingValue)
end

"""
A hovercard context with a message describing the current code review state of the pull
request.
"""
mutable struct ReviewStatusHovercardContext <: OfficialGithubSchema
    "\n  A string describing this context\n  "
    message::String
    "\n  An octicon to accompany this context\n  "
    octicon::String
    "\n  The current status of the pull request with respect to code review.\n  "
    reviewDecision::Union{PullRequestReviewDecision.T, Missing, Nothing}
end
function ReviewStatusHovercardContext(; message, octicon, reviewDecision = nothing)
    ReviewStatusHovercardContext(message, octicon, reviewDecision)
end

"""
Autogenerated input type of DeleteTeamDiscussionComment
"""
mutable struct DeleteTeamDiscussionCommentInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the comment to delete.\n  "
    id::String
end
function DeleteTeamDiscussionCommentInput(; clientMutationId = nothing, id)
    DeleteTeamDiscussionCommentInput(clientMutationId, id)
end

"""
An organization teams hovercard context
"""
mutable struct OrganizationTeamsHovercardContext <: OfficialGithubSchema
    "\n  A string describing this context\n  "
    message::String
    "\n  An octicon to accompany this context\n  "
    octicon::String
    "\n  Teams in this organization the user is a member of that are relevant\n  "
    relevantTeams::TeamConnection
    "\n  The path for the full team list for this user\n  "
    teamsResourcePath::URI
    "\n  The URL for the full team list for this user\n  "
    teamsUrl::URI
    "\n  The total number of teams the user is on in the organization\n  "
    totalTeamCount::Int
end
function OrganizationTeamsHovercardContext(; message, octicon, relevantTeams, teamsResourcePath, teamsUrl, totalTeamCount)
    OrganizationTeamsHovercardContext(message, octicon, relevantTeams, teamsResourcePath, teamsUrl, totalTeamCount)
end

"""
Ordering options for project v2 item connections
"""
mutable struct ProjectV2ItemOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order the project v2 items by.\n  "
    field::ProjectV2ItemOrderField.T
end
function ProjectV2ItemOrder(; direction, field)
    ProjectV2ItemOrder(direction, field)
end

"""
Autogenerated input type of UnminimizeComment
"""
mutable struct UnminimizeCommentInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the subject to modify.\n  "
    subjectId::String
end
function UnminimizeCommentInput(; clientMutationId = nothing, subjectId)
    UnminimizeCommentInput(clientMutationId, subjectId)
end

"""
Ways in which to filter lists of issues.
"""
mutable struct IssueFilters <: OfficialGithubSchema
    "\n  List issues assigned to given name. Pass in `null` for issues with no assigned\n  user, and `*` for issues assigned to any user.\n  "
    assignee::Union{String, Missing, Nothing}
    "\n  List issues created by given name.\n  "
    createdBy::Union{String, Missing, Nothing}
    "\n  List issues where the list of label names exist on the issue.\n  "
    labels::Union{Vector{String}, Missing, Nothing}
    "\n  List issues where the given name is mentioned in the issue.\n  "
    mentioned::Union{String, Missing, Nothing}
    "\n  List issues by given milestone argument. If an string representation of an\n  integer is passed, it should refer to a milestone by its database ID. Pass in\n  `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.\n  "
    milestone::Union{String, Missing, Nothing}
    "\n  List issues by given milestone argument. If an string representation of an\n  integer is passed, it should refer to a milestone by its number field. Pass in\n  `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.\n  "
    milestoneNumber::Union{String, Missing, Nothing}
    "\n  List issues that have been updated at or after the given date.\n  "
    since::Union{DateTime, Missing, Nothing}
    "\n  List issues filtered by the list of states given.\n  "
    states::Union{Vector{IssueState.T}, Missing, Nothing}
    "\n  List issues subscribed to by viewer.\n  "
    viewerSubscribed::Union{Bool, Missing, Nothing}
end
function IssueFilters(; assignee = nothing, createdBy = nothing, labels = nothing, mentioned = nothing, milestone = nothing, milestoneNumber = nothing, since = nothing, states = nothing, viewerSubscribed = false)
    IssueFilters(assignee, createdBy, labels, mentioned, milestone, milestoneNumber, since, states, viewerSubscribed)
end

"""
Autogenerated input type of UpdateTeamReviewAssignment
"""
mutable struct UpdateTeamReviewAssignmentInput <: OfficialGithubSchema
    "\n  The algorithm to use for review assignment\n  "
    algorithm::Union{TeamReviewAssignmentAlgorithm.T, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  Turn on or off review assignment\n  "
    enabled::Bool
    "\n  An array of team member IDs to exclude\n  "
    excludedTeamMemberIds::Union{Vector{String}, Missing, Nothing}
    "\n  The Node ID of the team to update review assignments of\n  "
    id::String
    "\n  Notify the entire team of the PR if it is delegated\n  "
    notifyTeam::Union{Bool, Missing, Nothing}
    "\n  The number of team members to assign\n  "
    teamMemberCount::Union{Int, Missing, Nothing}
end
function UpdateTeamReviewAssignmentInput(; algorithm = ROUND_ROBIN, clientMutationId = nothing, enabled, excludedTeamMemberIds = nothing, id, notifyTeam = true, teamMemberCount = 1)
    UpdateTeamReviewAssignmentInput(algorithm, clientMutationId, enabled, excludedTeamMemberIds, id, notifyTeam, teamMemberCount)
end

"""
Ways in which lists of issues can be ordered upon return.
"""
mutable struct PullRequestOrder <: OfficialGithubSchema
    "\n  The direction in which to order pull requests by the specified field.\n  "
    direction::OrderDirection.T
    "\n  The field in which to order pull requests by.\n  "
    field::PullRequestOrderField.T
end
function PullRequestOrder(; direction, field)
    PullRequestOrder(direction, field)
end

"""
Autogenerated input type of UnfollowOrganization
"""
mutable struct UnfollowOrganizationInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  ID of the organization to unfollow.\n  "
    organizationId::String
end
function UnfollowOrganizationInput(; clientMutationId = nothing, organizationId)
    UnfollowOrganizationInput(clientMutationId, organizationId)
end

"""
Autogenerated input type of RemoveUpvote
"""
mutable struct RemoveUpvoteInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The Node ID of the discussion or comment to remove upvote.\n  "
    subjectId::String
end
function RemoveUpvoteInput(; clientMutationId = nothing, subjectId)
    RemoveUpvoteInput(clientMutationId, subjectId)
end

"""
Ways in which star connections can be ordered.
"""
mutable struct StarOrder <: OfficialGithubSchema
    "\n  The direction in which to order nodes.\n  "
    direction::OrderDirection.T
    "\n  The field in which to order nodes by.\n  "
    field::StarOrderField.T
end
function StarOrder(; direction, field)
    StarOrder(direction, field)
end

"""
Autogenerated input type of AddProjectV2DraftIssue
"""
mutable struct AddProjectV2DraftIssueInput <: OfficialGithubSchema
    "\n  The IDs of the assignees of the draft issue.\n  "
    assigneeIds::Union{Vector{String}, Missing, Nothing}
    "\n  The body of the draft issue.\n  "
    body::Union{String, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the Project to add the draft issue to.\n  "
    projectId::String
    "\n  The title of the draft issue.\n  "
    title::String
end
function AddProjectV2DraftIssueInput(; assigneeIds = nothing, body = nothing, clientMutationId = nothing, projectId, title)
    AddProjectV2DraftIssueInput(assigneeIds, body, clientMutationId, projectId, title)
end

"""
Autogenerated input type of CreateDeploymentStatus
"""
mutable struct CreateDeploymentStatusInput <: OfficialGithubSchema
    "\n  Adds a new inactive status to all non-transient, non-production environment\n  deployments with the same repository and environment name as the created\n  status's deployment.\n  "
    autoInactive::Union{Bool, Missing, Nothing}
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The node ID of the deployment.\n  "
    deploymentId::String
    "\n  A short description of the status. Maximum length of 140 characters.\n  "
    description::Union{String, Missing, Nothing}
    "\n  If provided, updates the environment of the deploy. Otherwise, does not modify the environment.\n  "
    environment::Union{String, Missing, Nothing}
    "\n  Sets the URL for accessing your environment.\n  "
    environmentUrl::Union{String, Missing, Nothing}
    "\n  The log URL to associate with this status.       This URL should contain\n  output to keep the user updated while the task is running       or serve as\n  historical information for what happened in the deployment.\n  "
    logUrl::Union{String, Missing, Nothing}
    "\n  The state of the deployment.\n  "
    state::DeploymentStatusState.T
end
function CreateDeploymentStatusInput(; autoInactive = true, clientMutationId = nothing, deploymentId, description = "", environment = nothing, environmentUrl = "", logUrl = "", state)
    CreateDeploymentStatusInput(autoInactive, clientMutationId, deploymentId, description, environment, environmentUrl, logUrl, state)
end

"""
Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
"""
mutable struct UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the enterprise on which to set the members can delete repositories setting.\n  "
    enterpriseId::String
    "\n  The value for the members can delete repositories setting on the enterprise.\n  "
    settingValue::EnterpriseEnabledDisabledSettingValue.T
end
function UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput(; clientMutationId = nothing, enterpriseId, settingValue)
    UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput(clientMutationId, enterpriseId, settingValue)
end

"""
Autogenerated input type of DeleteProjectV2Item
"""
mutable struct DeleteProjectV2ItemInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the item to be removed.\n  "
    itemId::String
    "\n  The ID of the Project from which the item should be removed.\n  "
    projectId::String
end
function DeleteProjectV2ItemInput(; clientMutationId = nothing, itemId, projectId)
    DeleteProjectV2ItemInput(clientMutationId, itemId, projectId)
end

"""
Autogenerated input type of UnpinIssue
"""
mutable struct UnpinIssueInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the issue to be unpinned\n  "
    issueId::String
end
function UnpinIssueInput(; clientMutationId = nothing, issueId)
    UnpinIssueInput(clientMutationId, issueId)
end

"""
Ordering options for team repository connections
"""
mutable struct TeamRepositoryOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order repositories by.\n  "
    field::TeamRepositoryOrderField.T
end
function TeamRepositoryOrder(; direction, field)
    TeamRepositoryOrder(direction, field)
end

"""
Autogenerated input type of UnlinkProjectV2FromTeam
"""
mutable struct UnlinkProjectV2FromTeamInput <: OfficialGithubSchema
    "\n  A unique identifier for the client performing the mutation.\n  "
    clientMutationId::Union{String, Missing, Nothing}
    "\n  The ID of the project to unlink from the team.\n  "
    projectId::String
    "\n  The ID of the team to unlink from the project.\n  "
    teamId::String
end
function UnlinkProjectV2FromTeamInput(; clientMutationId = nothing, projectId, teamId)
    UnlinkProjectV2FromTeamInput(clientMutationId, projectId, teamId)
end

"""
Ordering options for connections to get sponsor entities for GitHub Sponsors.
"""
mutable struct SponsorOrder <: OfficialGithubSchema
    "\n  The ordering direction.\n  "
    direction::OrderDirection.T
    "\n  The field to order sponsor entities by.\n  "
    field::SponsorOrderField.T
end
function SponsorOrder(; direction, field)
    SponsorOrder(direction, field)
end

